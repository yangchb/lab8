
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 e0 14 00 	lgdtl  0x14e018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 e0 14 c0       	mov    $0xc014e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 04 32 15 c0       	mov    $0xc0153204,%edx
c0100035:	b8 d0 ee 14 c0       	mov    $0xc014eed0,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d0 ee 14 c0 	movl   $0xc014eed0,(%esp)
c0100051:	e8 a2 53 01 00       	call   c01153f8 <memset>

    cons_init();                // init the console
c0100056:	e8 69 17 00 00       	call   c01017c4 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 a0 55 11 c0 	movl   $0xc01155a0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 bc 55 11 c0 	movl   $0xc01155bc,(%esp)
c0100070:	e8 f0 02 00 00       	call   c0100365 <cprintf>

    print_kerninfo();
c0100075:	e8 f8 09 00 00       	call   c0100a72 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a7 00 00 00       	call   c0100126 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 d0 56 00 00       	call   c0105754 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 19 21 00 00       	call   c01021a2 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 91 22 00 00       	call   c010231f <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 cb 85 00 00       	call   c010865e <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 92 e3 00 00       	call   c010e42a <sched_init>
    proc_init();                // init process table
c0100098:	e8 33 dc 00 00       	call   c010dcd0 <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 53 18 00 00       	call   c01018f5 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 5b 6d 00 00       	call   c0106e02 <swap_init>
    fs_init();                  // init fs
c01000a7:	e8 c4 ae 00 00       	call   c010af70 <fs_init>
    
    clock_init();               // init clock interrupt
c01000ac:	e8 c9 0e 00 00       	call   c0100f7a <clock_init>
    intr_enable();              // enable irq interrupt
c01000b1:	e8 5a 20 00 00       	call   c0102110 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b6:	e8 23 de 00 00       	call   c010dede <cpu_idle>

c01000bb <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bb:	55                   	push   %ebp
c01000bc:	89 e5                	mov    %esp,%ebp
c01000be:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c8:	00 
c01000c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d0:	00 
c01000d1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d8:	e8 c5 0d 00 00       	call   c0100ea2 <mon_backtrace>
}
c01000dd:	c9                   	leave  
c01000de:	c3                   	ret    

c01000df <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000df:	55                   	push   %ebp
c01000e0:	89 e5                	mov    %esp,%ebp
c01000e2:	53                   	push   %ebx
c01000e3:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e6:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000ec:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fe:	89 04 24             	mov    %eax,(%esp)
c0100101:	e8 b5 ff ff ff       	call   c01000bb <grade_backtrace2>
}
c0100106:	83 c4 14             	add    $0x14,%esp
c0100109:	5b                   	pop    %ebx
c010010a:	5d                   	pop    %ebp
c010010b:	c3                   	ret    

c010010c <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010c:	55                   	push   %ebp
c010010d:	89 e5                	mov    %esp,%ebp
c010010f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100112:	8b 45 10             	mov    0x10(%ebp),%eax
c0100115:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100119:	8b 45 08             	mov    0x8(%ebp),%eax
c010011c:	89 04 24             	mov    %eax,(%esp)
c010011f:	e8 bb ff ff ff       	call   c01000df <grade_backtrace1>
}
c0100124:	c9                   	leave  
c0100125:	c3                   	ret    

c0100126 <grade_backtrace>:

void
grade_backtrace(void) {
c0100126:	55                   	push   %ebp
c0100127:	89 e5                	mov    %esp,%ebp
c0100129:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012c:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100131:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100138:	ff 
c0100139:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100144:	e8 c3 ff ff ff       	call   c010010c <grade_backtrace0>
}
c0100149:	c9                   	leave  
c010014a:	c3                   	ret    

c010014b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014b:	55                   	push   %ebp
c010014c:	89 e5                	mov    %esp,%ebp
c010014e:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100151:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100154:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100157:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010015a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100161:	0f b7 c0             	movzwl %ax,%eax
c0100164:	83 e0 03             	and    $0x3,%eax
c0100167:	89 c2                	mov    %eax,%edx
c0100169:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010016e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100172:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100176:	c7 04 24 c1 55 11 c0 	movl   $0xc01155c1,(%esp)
c010017d:	e8 e3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100182:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100186:	0f b7 d0             	movzwl %ax,%edx
c0100189:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010018e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100196:	c7 04 24 cf 55 11 c0 	movl   $0xc01155cf,(%esp)
c010019d:	e8 c3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a6:	0f b7 d0             	movzwl %ax,%edx
c01001a9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ae:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b6:	c7 04 24 dd 55 11 c0 	movl   $0xc01155dd,(%esp)
c01001bd:	e8 a3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c6:	0f b7 d0             	movzwl %ax,%edx
c01001c9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d6:	c7 04 24 eb 55 11 c0 	movl   $0xc01155eb,(%esp)
c01001dd:	e8 83 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e6:	0f b7 d0             	movzwl %ax,%edx
c01001e9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f6:	c7 04 24 f9 55 11 c0 	movl   $0xc01155f9,(%esp)
c01001fd:	e8 63 01 00 00       	call   c0100365 <cprintf>
    round ++;
c0100202:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c0100207:	83 c0 01             	add    $0x1,%eax
c010020a:	a3 e0 ee 14 c0       	mov    %eax,0xc014eee0
}
c010020f:	c9                   	leave  
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100219:	5d                   	pop    %ebp
c010021a:	c3                   	ret    

c010021b <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
c010021e:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100221:	e8 25 ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100226:	c7 04 24 08 56 11 c0 	movl   $0xc0115608,(%esp)
c010022d:	e8 33 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_user();
c0100232:	e8 da ff ff ff       	call   c0100211 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100237:	e8 0f ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023c:	c7 04 24 28 56 11 c0 	movl   $0xc0115628,(%esp)
c0100243:	e8 1d 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_kernel();
c0100248:	e8 c9 ff ff ff       	call   c0100216 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024d:	e8 f9 fe ff ff       	call   c010014b <lab1_print_cur_status>
}
c0100252:	c9                   	leave  
c0100253:	c3                   	ret    

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 47 56 11 c0 	movl   $0xc0115647,(%esp)
c010026e:	e8 f2 00 00 00       	call   c0100365 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010027a:	e8 6e 01 00 00       	call   c01003ed <getchar>
c010027f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100282:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100286:	79 07                	jns    c010028f <readline+0x3b>
            return NULL;
c0100288:	b8 00 00 00 00       	mov    $0x0,%eax
c010028d:	eb 79                	jmp    c0100308 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100293:	7e 28                	jle    c01002bd <readline+0x69>
c0100295:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029c:	7f 1f                	jg     c01002bd <readline+0x69>
            cputchar(c);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	89 04 24             	mov    %eax,(%esp)
c01002a4:	e8 e2 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ac:	8d 50 01             	lea    0x1(%eax),%edx
c01002af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b5:	88 90 00 ef 14 c0    	mov    %dl,-0x3feb1100(%eax)
c01002bb:	eb 46                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002bd:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c1:	75 17                	jne    c01002da <readline+0x86>
c01002c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c7:	7e 11                	jle    c01002da <readline+0x86>
            cputchar(c);
c01002c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cc:	89 04 24             	mov    %eax,(%esp)
c01002cf:	e8 b7 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d8:	eb 29                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002da:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002de:	74 06                	je     c01002e6 <readline+0x92>
c01002e0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e4:	75 1d                	jne    c0100303 <readline+0xaf>
            cputchar(c);
c01002e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e9:	89 04 24             	mov    %eax,(%esp)
c01002ec:	e8 9a 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f4:	05 00 ef 14 c0       	add    $0xc014ef00,%eax
c01002f9:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002fc:	b8 00 ef 14 c0       	mov    $0xc014ef00,%eax
c0100301:	eb 05                	jmp    c0100308 <readline+0xb4>
        }
    }
c0100303:	e9 72 ff ff ff       	jmp    c010027a <readline+0x26>
}
c0100308:	c9                   	leave  
c0100309:	c3                   	ret    

c010030a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010030a:	55                   	push   %ebp
c010030b:	89 e5                	mov    %esp,%ebp
c010030d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100310:	8b 45 08             	mov    0x8(%ebp),%eax
c0100313:	89 04 24             	mov    %eax,(%esp)
c0100316:	e8 d5 14 00 00       	call   c01017f0 <cons_putc>
    (*cnt) ++;
c010031b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010031e:	8b 00                	mov    (%eax),%eax
c0100320:	8d 50 01             	lea    0x1(%eax),%edx
c0100323:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100326:	89 10                	mov    %edx,(%eax)
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c0100330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010033a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010033e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100345:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034c:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0100353:	ff 
c0100354:	c7 04 24 0a 03 10 c0 	movl   $0xc010030a,(%esp)
c010035b:	e8 48 47 01 00       	call   c0114aa8 <vprintfmt>
    return cnt;
c0100360:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100363:	c9                   	leave  
c0100364:	c3                   	ret    

c0100365 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100365:	55                   	push   %ebp
c0100366:	89 e5                	mov    %esp,%ebp
c0100368:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010036b:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 a7 ff ff ff       	call   c010032a <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 54 14 00 00       	call   c01017f0 <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 4a ff ff ff       	call   c010030a <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	8d 50 01             	lea    0x1(%eax),%edx
c01003c6:	89 55 08             	mov    %edx,0x8(%ebp)
c01003c9:	0f b6 00             	movzbl (%eax),%eax
c01003cc:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003cf:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003d3:	75 d8                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e3:	e8 22 ff ff ff       	call   c010030a <cputch>
    return cnt;
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003eb:	c9                   	leave  
c01003ec:	c3                   	ret    

c01003ed <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ed:	55                   	push   %ebp
c01003ee:	89 e5                	mov    %esp,%ebp
c01003f0:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f3:	e8 34 14 00 00       	call   c010182c <cons_getc>
c01003f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003ff:	74 f2                	je     c01003f3 <getchar+0x6>
        /* do nothing */;
    return c;
c0100401:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100404:	c9                   	leave  
c0100405:	c3                   	ret    

c0100406 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100406:	55                   	push   %ebp
c0100407:	89 e5                	mov    %esp,%ebp
c0100409:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010040c:	8b 45 08             	mov    0x8(%ebp),%eax
c010040f:	89 04 24             	mov    %eax,(%esp)
c0100412:	e8 8b 4c 01 00       	call   c01150a2 <strlen>
c0100417:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010041a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010041d:	83 c0 01             	add    $0x1,%eax
c0100420:	89 04 24             	mov    %eax,(%esp)
c0100423:	e8 84 48 00 00       	call   c0104cac <kmalloc>
c0100428:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010042b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010042f:	74 24                	je     c0100455 <strdup+0x4f>
        memcpy(dst, src, len);
c0100431:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100434:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100438:	8b 45 08             	mov    0x8(%ebp),%eax
c010043b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010043f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100442:	89 04 24             	mov    %eax,(%esp)
c0100445:	e8 90 50 01 00       	call   c01154da <memcpy>
        dst[len] = '\0';
c010044a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010044d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100450:	01 d0                	add    %edx,%eax
c0100452:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100455:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100458:	c9                   	leave  
c0100459:	c3                   	ret    

c010045a <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010045a:	55                   	push   %ebp
c010045b:	89 e5                	mov    %esp,%ebp
c010045d:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c0100460:	8b 45 08             	mov    0x8(%ebp),%eax
c0100463:	89 04 24             	mov    %eax,(%esp)
c0100466:	e8 37 4c 01 00       	call   c01150a2 <strlen>
c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010046e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100471:	89 04 24             	mov    %eax,(%esp)
c0100474:	e8 29 4c 01 00       	call   c01150a2 <strlen>
c0100479:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010047f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100482:	01 d0                	add    %edx,%eax
c0100484:	83 c0 01             	add    $0x1,%eax
c0100487:	89 04 24             	mov    %eax,(%esp)
c010048a:	e8 1d 48 00 00       	call   c0104cac <kmalloc>
c010048f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100495:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100498:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010049c:	74 44                	je     c01004e2 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c010049e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01004a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004af:	89 04 24             	mov    %eax,(%esp)
c01004b2:	e8 23 50 01 00       	call   c01154da <memcpy>
c01004b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ba:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ce:	89 04 24             	mov    %eax,(%esp)
c01004d1:	e8 04 50 01 00       	call   c01154da <memcpy>
c01004d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d9:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004df:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004e5:	c9                   	leave  
c01004e6:	c3                   	ret    

c01004e7 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004e7:	55                   	push   %ebp
c01004e8:	89 e5                	mov    %esp,%ebp
c01004ea:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f0:	8b 00                	mov    (%eax),%eax
c01004f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01004f8:	8b 00                	mov    (%eax),%eax
c01004fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100504:	e9 d2 00 00 00       	jmp    c01005db <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100509:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010050c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010050f:	01 d0                	add    %edx,%eax
c0100511:	89 c2                	mov    %eax,%edx
c0100513:	c1 ea 1f             	shr    $0x1f,%edx
c0100516:	01 d0                	add    %edx,%eax
c0100518:	d1 f8                	sar    %eax
c010051a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010051d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100520:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100523:	eb 04                	jmp    c0100529 <stab_binsearch+0x42>
            m --;
c0100525:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010052c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052f:	7c 1f                	jl     c0100550 <stab_binsearch+0x69>
c0100531:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100534:	89 d0                	mov    %edx,%eax
c0100536:	01 c0                	add    %eax,%eax
c0100538:	01 d0                	add    %edx,%eax
c010053a:	c1 e0 02             	shl    $0x2,%eax
c010053d:	89 c2                	mov    %eax,%edx
c010053f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100542:	01 d0                	add    %edx,%eax
c0100544:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100548:	0f b6 c0             	movzbl %al,%eax
c010054b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010054e:	75 d5                	jne    c0100525 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100553:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100556:	7d 0b                	jge    c0100563 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100558:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010055b:	83 c0 01             	add    $0x1,%eax
c010055e:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100561:	eb 78                	jmp    c01005db <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100563:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010056a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010056d:	89 d0                	mov    %edx,%eax
c010056f:	01 c0                	add    %eax,%eax
c0100571:	01 d0                	add    %edx,%eax
c0100573:	c1 e0 02             	shl    $0x2,%eax
c0100576:	89 c2                	mov    %eax,%edx
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	01 d0                	add    %edx,%eax
c010057d:	8b 40 08             	mov    0x8(%eax),%eax
c0100580:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100583:	73 13                	jae    c0100598 <stab_binsearch+0xb1>
            *region_left = m;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010058b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010058d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100590:	83 c0 01             	add    $0x1,%eax
c0100593:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100596:	eb 43                	jmp    c01005db <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010059b:	89 d0                	mov    %edx,%eax
c010059d:	01 c0                	add    %eax,%eax
c010059f:	01 d0                	add    %edx,%eax
c01005a1:	c1 e0 02             	shl    $0x2,%eax
c01005a4:	89 c2                	mov    %eax,%edx
c01005a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01005a9:	01 d0                	add    %edx,%eax
c01005ab:	8b 40 08             	mov    0x8(%eax),%eax
c01005ae:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005b1:	76 16                	jbe    c01005c9 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005b9:	8b 45 10             	mov    0x10(%ebp),%eax
c01005bc:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005c1:	83 e8 01             	sub    $0x1,%eax
c01005c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005c7:	eb 12                	jmp    c01005db <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005cf:	89 10                	mov    %edx,(%eax)
            l = m;
c01005d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005d7:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005de:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005e1:	0f 8e 22 ff ff ff    	jle    c0100509 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005eb:	75 0f                	jne    c01005fc <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f0:	8b 00                	mov    (%eax),%eax
c01005f2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01005f8:	89 10                	mov    %edx,(%eax)
c01005fa:	eb 3f                	jmp    c010063b <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ff:	8b 00                	mov    (%eax),%eax
c0100601:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100604:	eb 04                	jmp    c010060a <stab_binsearch+0x123>
c0100606:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010060a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060d:	8b 00                	mov    (%eax),%eax
c010060f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100612:	7d 1f                	jge    c0100633 <stab_binsearch+0x14c>
c0100614:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100617:	89 d0                	mov    %edx,%eax
c0100619:	01 c0                	add    %eax,%eax
c010061b:	01 d0                	add    %edx,%eax
c010061d:	c1 e0 02             	shl    $0x2,%eax
c0100620:	89 c2                	mov    %eax,%edx
c0100622:	8b 45 08             	mov    0x8(%ebp),%eax
c0100625:	01 d0                	add    %edx,%eax
c0100627:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010062b:	0f b6 c0             	movzbl %al,%eax
c010062e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100631:	75 d3                	jne    c0100606 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100636:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100639:	89 10                	mov    %edx,(%eax)
    }
}
c010063b:	c9                   	leave  
c010063c:	c3                   	ret    

c010063d <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010063d:	55                   	push   %ebp
c010063e:	89 e5                	mov    %esp,%ebp
c0100640:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100646:	c7 00 4c 56 11 c0    	movl   $0xc011564c,(%eax)
    info->eip_line = 0;
c010064c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100659:	c7 40 08 4c 56 11 c0 	movl   $0xc011564c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100660:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100663:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010066a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010066d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100670:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100673:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100676:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010067d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100684:	76 21                	jbe    c01006a7 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100686:	c7 45 f4 e0 9b 11 c0 	movl   $0xc0119be0,-0xc(%ebp)
        stab_end = __STAB_END__;
c010068d:	c7 45 f0 bc f3 13 c0 	movl   $0xc013f3bc,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100694:	c7 45 ec bd f3 13 c0 	movl   $0xc013f3bd,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010069b:	c7 45 e8 de bc 14 c0 	movl   $0xc014bcde,-0x18(%ebp)
c01006a2:	e9 ea 00 00 00       	jmp    c0100791 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006a7:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006ae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006b3:	85 c0                	test   %eax,%eax
c01006b5:	74 11                	je     c01006c8 <debuginfo_eip+0x8b>
c01006b7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006bc:	8b 40 18             	mov    0x18(%eax),%eax
c01006bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006c6:	75 0a                	jne    c01006d2 <debuginfo_eip+0x95>
            return -1;
c01006c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006cd:	e9 9e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006dc:	00 
c01006dd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006e4:	00 
c01006e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006ec:	89 04 24             	mov    %eax,(%esp)
c01006ef:	e8 86 88 00 00       	call   c0108f7a <user_mem_check>
c01006f4:	85 c0                	test   %eax,%eax
c01006f6:	75 0a                	jne    c0100702 <debuginfo_eip+0xc5>
            return -1;
c01006f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006fd:	e9 6e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100705:	8b 00                	mov    (%eax),%eax
c0100707:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070d:	8b 40 04             	mov    0x4(%eax),%eax
c0100710:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100713:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100716:	8b 40 08             	mov    0x8(%eax),%eax
c0100719:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010071c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010071f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100722:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100725:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072b:	29 c2                	sub    %eax,%edx
c010072d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100730:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100737:	00 
c0100738:	89 54 24 08          	mov    %edx,0x8(%esp)
c010073c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100740:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100743:	89 04 24             	mov    %eax,(%esp)
c0100746:	e8 2f 88 00 00       	call   c0108f7a <user_mem_check>
c010074b:	85 c0                	test   %eax,%eax
c010074d:	75 0a                	jne    c0100759 <debuginfo_eip+0x11c>
            return -1;
c010074f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100754:	e9 17 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100759:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010075c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010075f:	29 c2                	sub    %eax,%edx
c0100761:	89 d0                	mov    %edx,%eax
c0100763:	89 c2                	mov    %eax,%edx
c0100765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100768:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010076f:	00 
c0100770:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100774:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100778:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010077b:	89 04 24             	mov    %eax,(%esp)
c010077e:	e8 f7 87 00 00       	call   c0108f7a <user_mem_check>
c0100783:	85 c0                	test   %eax,%eax
c0100785:	75 0a                	jne    c0100791 <debuginfo_eip+0x154>
            return -1;
c0100787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010078c:	e9 df 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100797:	76 0d                	jbe    c01007a6 <debuginfo_eip+0x169>
c0100799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010079c:	83 e8 01             	sub    $0x1,%eax
c010079f:	0f b6 00             	movzbl (%eax),%eax
c01007a2:	84 c0                	test   %al,%al
c01007a4:	74 0a                	je     c01007b0 <debuginfo_eip+0x173>
        return -1;
c01007a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007ab:	e9 c0 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007b0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bd:	29 c2                	sub    %eax,%edx
c01007bf:	89 d0                	mov    %edx,%eax
c01007c1:	c1 f8 02             	sar    $0x2,%eax
c01007c4:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007ca:	83 e8 01             	sub    $0x1,%eax
c01007cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d3:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007d7:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007de:	00 
c01007df:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f0:	89 04 24             	mov    %eax,(%esp)
c01007f3:	e8 ef fc ff ff       	call   c01004e7 <stab_binsearch>
    if (lfile == 0)
c01007f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007fb:	85 c0                	test   %eax,%eax
c01007fd:	75 0a                	jne    c0100809 <debuginfo_eip+0x1cc>
        return -1;
c01007ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100804:	e9 67 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100809:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010080c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010080f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100812:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100815:	8b 45 08             	mov    0x8(%ebp),%eax
c0100818:	89 44 24 10          	mov    %eax,0x10(%esp)
c010081c:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100823:	00 
c0100824:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100827:	89 44 24 08          	mov    %eax,0x8(%esp)
c010082b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010082e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100835:	89 04 24             	mov    %eax,(%esp)
c0100838:	e8 aa fc ff ff       	call   c01004e7 <stab_binsearch>

    if (lfun <= rfun) {
c010083d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100840:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100843:	39 c2                	cmp    %eax,%edx
c0100845:	7f 7c                	jg     c01008c3 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100847:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010084a:	89 c2                	mov    %eax,%edx
c010084c:	89 d0                	mov    %edx,%eax
c010084e:	01 c0                	add    %eax,%eax
c0100850:	01 d0                	add    %edx,%eax
c0100852:	c1 e0 02             	shl    $0x2,%eax
c0100855:	89 c2                	mov    %eax,%edx
c0100857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010085a:	01 d0                	add    %edx,%eax
c010085c:	8b 10                	mov    (%eax),%edx
c010085e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100861:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100864:	29 c1                	sub    %eax,%ecx
c0100866:	89 c8                	mov    %ecx,%eax
c0100868:	39 c2                	cmp    %eax,%edx
c010086a:	73 22                	jae    c010088e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010086c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010086f:	89 c2                	mov    %eax,%edx
c0100871:	89 d0                	mov    %edx,%eax
c0100873:	01 c0                	add    %eax,%eax
c0100875:	01 d0                	add    %edx,%eax
c0100877:	c1 e0 02             	shl    $0x2,%eax
c010087a:	89 c2                	mov    %eax,%edx
c010087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087f:	01 d0                	add    %edx,%eax
c0100881:	8b 10                	mov    (%eax),%edx
c0100883:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100886:	01 c2                	add    %eax,%edx
c0100888:	8b 45 0c             	mov    0xc(%ebp),%eax
c010088b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010088e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	89 d0                	mov    %edx,%eax
c0100895:	01 c0                	add    %eax,%eax
c0100897:	01 d0                	add    %edx,%eax
c0100899:	c1 e0 02             	shl    $0x2,%eax
c010089c:	89 c2                	mov    %eax,%edx
c010089e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a1:	01 d0                	add    %edx,%eax
c01008a3:	8b 50 08             	mov    0x8(%eax),%edx
c01008a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008af:	8b 40 10             	mov    0x10(%eax),%eax
c01008b2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008be:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008c1:	eb 15                	jmp    c01008d8 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01008c9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008db:	8b 40 08             	mov    0x8(%eax),%eax
c01008de:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008e5:	00 
c01008e6:	89 04 24             	mov    %eax,(%esp)
c01008e9:	e8 7e 49 01 00       	call   c011526c <strfind>
c01008ee:	89 c2                	mov    %eax,%edx
c01008f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008f3:	8b 40 08             	mov    0x8(%eax),%eax
c01008f6:	29 c2                	sub    %eax,%edx
c01008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008fb:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100901:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100905:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010090c:	00 
c010090d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100910:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100914:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091e:	89 04 24             	mov    %eax,(%esp)
c0100921:	e8 c1 fb ff ff       	call   c01004e7 <stab_binsearch>
    if (lline <= rline) {
c0100926:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100929:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010092c:	39 c2                	cmp    %eax,%edx
c010092e:	7f 24                	jg     c0100954 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100930:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100933:	89 c2                	mov    %eax,%edx
c0100935:	89 d0                	mov    %edx,%eax
c0100937:	01 c0                	add    %eax,%eax
c0100939:	01 d0                	add    %edx,%eax
c010093b:	c1 e0 02             	shl    $0x2,%eax
c010093e:	89 c2                	mov    %eax,%edx
c0100940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100943:	01 d0                	add    %edx,%eax
c0100945:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100949:	0f b7 d0             	movzwl %ax,%edx
c010094c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094f:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100952:	eb 13                	jmp    c0100967 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100954:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100959:	e9 12 01 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010095e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100961:	83 e8 01             	sub    $0x1,%eax
c0100964:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100967:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010096a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010096d:	39 c2                	cmp    %eax,%edx
c010096f:	7c 56                	jl     c01009c7 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100971:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100974:	89 c2                	mov    %eax,%edx
c0100976:	89 d0                	mov    %edx,%eax
c0100978:	01 c0                	add    %eax,%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	c1 e0 02             	shl    $0x2,%eax
c010097f:	89 c2                	mov    %eax,%edx
c0100981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100984:	01 d0                	add    %edx,%eax
c0100986:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010098a:	3c 84                	cmp    $0x84,%al
c010098c:	74 39                	je     c01009c7 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c010098e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100991:	89 c2                	mov    %eax,%edx
c0100993:	89 d0                	mov    %edx,%eax
c0100995:	01 c0                	add    %eax,%eax
c0100997:	01 d0                	add    %edx,%eax
c0100999:	c1 e0 02             	shl    $0x2,%eax
c010099c:	89 c2                	mov    %eax,%edx
c010099e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a1:	01 d0                	add    %edx,%eax
c01009a3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009a7:	3c 64                	cmp    $0x64,%al
c01009a9:	75 b3                	jne    c010095e <debuginfo_eip+0x321>
c01009ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ae:	89 c2                	mov    %eax,%edx
c01009b0:	89 d0                	mov    %edx,%eax
c01009b2:	01 c0                	add    %eax,%eax
c01009b4:	01 d0                	add    %edx,%eax
c01009b6:	c1 e0 02             	shl    $0x2,%eax
c01009b9:	89 c2                	mov    %eax,%edx
c01009bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009be:	01 d0                	add    %edx,%eax
c01009c0:	8b 40 08             	mov    0x8(%eax),%eax
c01009c3:	85 c0                	test   %eax,%eax
c01009c5:	74 97                	je     c010095e <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009cd:	39 c2                	cmp    %eax,%edx
c01009cf:	7c 46                	jl     c0100a17 <debuginfo_eip+0x3da>
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	89 c2                	mov    %eax,%edx
c01009d6:	89 d0                	mov    %edx,%eax
c01009d8:	01 c0                	add    %eax,%eax
c01009da:	01 d0                	add    %edx,%eax
c01009dc:	c1 e0 02             	shl    $0x2,%eax
c01009df:	89 c2                	mov    %eax,%edx
c01009e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e4:	01 d0                	add    %edx,%eax
c01009e6:	8b 10                	mov    (%eax),%edx
c01009e8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ee:	29 c1                	sub    %eax,%ecx
c01009f0:	89 c8                	mov    %ecx,%eax
c01009f2:	39 c2                	cmp    %eax,%edx
c01009f4:	73 21                	jae    c0100a17 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f9:	89 c2                	mov    %eax,%edx
c01009fb:	89 d0                	mov    %edx,%eax
c01009fd:	01 c0                	add    %eax,%eax
c01009ff:	01 d0                	add    %edx,%eax
c0100a01:	c1 e0 02             	shl    $0x2,%eax
c0100a04:	89 c2                	mov    %eax,%edx
c0100a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a09:	01 d0                	add    %edx,%eax
c0100a0b:	8b 10                	mov    (%eax),%edx
c0100a0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a10:	01 c2                	add    %eax,%edx
c0100a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a15:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a1d:	39 c2                	cmp    %eax,%edx
c0100a1f:	7d 4a                	jge    c0100a6b <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a24:	83 c0 01             	add    $0x1,%eax
c0100a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a2a:	eb 18                	jmp    c0100a44 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a2f:	8b 40 14             	mov    0x14(%eax),%eax
c0100a32:	8d 50 01             	lea    0x1(%eax),%edx
c0100a35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a38:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3e:	83 c0 01             	add    $0x1,%eax
c0100a41:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a44:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a47:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a4a:	39 c2                	cmp    %eax,%edx
c0100a4c:	7d 1d                	jge    c0100a6b <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a51:	89 c2                	mov    %eax,%edx
c0100a53:	89 d0                	mov    %edx,%eax
c0100a55:	01 c0                	add    %eax,%eax
c0100a57:	01 d0                	add    %edx,%eax
c0100a59:	c1 e0 02             	shl    $0x2,%eax
c0100a5c:	89 c2                	mov    %eax,%edx
c0100a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a61:	01 d0                	add    %edx,%eax
c0100a63:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a67:	3c a0                	cmp    $0xa0,%al
c0100a69:	74 c1                	je     c0100a2c <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a70:	c9                   	leave  
c0100a71:	c3                   	ret    

c0100a72 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a72:	55                   	push   %ebp
c0100a73:	89 e5                	mov    %esp,%ebp
c0100a75:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a78:	c7 04 24 56 56 11 c0 	movl   $0xc0115656,(%esp)
c0100a7f:	e8 e1 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a84:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0100a8b:	c0 
c0100a8c:	c7 04 24 6f 56 11 c0 	movl   $0xc011566f,(%esp)
c0100a93:	e8 cd f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a98:	c7 44 24 04 81 55 11 	movl   $0xc0115581,0x4(%esp)
c0100a9f:	c0 
c0100aa0:	c7 04 24 87 56 11 c0 	movl   $0xc0115687,(%esp)
c0100aa7:	e8 b9 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100aac:	c7 44 24 04 d0 ee 14 	movl   $0xc014eed0,0x4(%esp)
c0100ab3:	c0 
c0100ab4:	c7 04 24 9f 56 11 c0 	movl   $0xc011569f,(%esp)
c0100abb:	e8 a5 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100ac0:	c7 44 24 04 04 32 15 	movl   $0xc0153204,0x4(%esp)
c0100ac7:	c0 
c0100ac8:	c7 04 24 b7 56 11 c0 	movl   $0xc01156b7,(%esp)
c0100acf:	e8 91 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100ad4:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c0100ad9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100adf:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100ae4:	29 c2                	sub    %eax,%edx
c0100ae6:	89 d0                	mov    %edx,%eax
c0100ae8:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aee:	85 c0                	test   %eax,%eax
c0100af0:	0f 48 c2             	cmovs  %edx,%eax
c0100af3:	c1 f8 0a             	sar    $0xa,%eax
c0100af6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100afa:	c7 04 24 d0 56 11 c0 	movl   $0xc01156d0,(%esp)
c0100b01:	e8 5f f8 ff ff       	call   c0100365 <cprintf>
}
c0100b06:	c9                   	leave  
c0100b07:	c3                   	ret    

c0100b08 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b08:	55                   	push   %ebp
c0100b09:	89 e5                	mov    %esp,%ebp
c0100b0b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b11:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b1b:	89 04 24             	mov    %eax,(%esp)
c0100b1e:	e8 1a fb ff ff       	call   c010063d <debuginfo_eip>
c0100b23:	85 c0                	test   %eax,%eax
c0100b25:	74 15                	je     c0100b3c <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b2e:	c7 04 24 fa 56 11 c0 	movl   $0xc01156fa,(%esp)
c0100b35:	e8 2b f8 ff ff       	call   c0100365 <cprintf>
c0100b3a:	eb 6d                	jmp    c0100ba9 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b43:	eb 1c                	jmp    c0100b61 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4b:	01 d0                	add    %edx,%eax
c0100b4d:	0f b6 00             	movzbl (%eax),%eax
c0100b50:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b59:	01 ca                	add    %ecx,%edx
c0100b5b:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b67:	7f dc                	jg     c0100b45 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b69:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	01 d0                	add    %edx,%eax
c0100b74:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b7d:	89 d1                	mov    %edx,%ecx
c0100b7f:	29 c1                	sub    %eax,%ecx
c0100b81:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b87:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b8b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b91:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b95:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b9d:	c7 04 24 16 57 11 c0 	movl   $0xc0115716,(%esp)
c0100ba4:	e8 bc f7 ff ff       	call   c0100365 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ba9:	c9                   	leave  
c0100baa:	c3                   	ret    

c0100bab <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100bab:	55                   	push   %ebp
c0100bac:	89 e5                	mov    %esp,%ebp
c0100bae:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100bb1:	8b 45 04             	mov    0x4(%ebp),%eax
c0100bb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100bba:	c9                   	leave  
c0100bbb:	c3                   	ret    

c0100bbc <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100bbc:	55                   	push   %ebp
c0100bbd:	89 e5                	mov    %esp,%ebp
c0100bbf:	53                   	push   %ebx
c0100bc0:	83 ec 34             	sub    $0x34,%esp
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */

  uint32_t *ebp = 0;   //定义两个变量存放ebp,eip寄存器的值，ebp为指针，方便后续调取
c0100bc3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  uint32_t eip = 0;
c0100bca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bd1:	89 e8                	mov    %ebp,%eax
c0100bd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return ebp;
c0100bd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
 
  ebp = (uint32_t *)read_ebp();  //获取当前ebp寄存器的值
c0100bd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  eip = read_eip();  //获取eip寄存器的值，得到当前指令的位置
c0100bdc:	e8 ca ff ff ff       	call   c0100bab <read_eip>
c0100be1:	89 45 f0             	mov    %eax,-0x10(%ebp)

  while (ebp)
c0100be4:	eb 75                	jmp    c0100c5b <print_stackframe+0x9f>
   {
      cprintf("ebp:0x%08x eip:0x%08x args:", (uint32_t)ebp, eip);    
c0100be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100bec:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100bf0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bf4:	c7 04 24 28 57 11 c0 	movl   $0xc0115728,(%esp)
c0100bfb:	e8 65 f7 ff ff       	call   c0100365 <cprintf>
      cprintf("0x%08x 0x%08x 0x%08x 0x%08x\n", ebp[2], ebp[3], ebp[4], ebp[5]); 
c0100c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c03:	83 c0 14             	add    $0x14,%eax
c0100c06:	8b 18                	mov    (%eax),%ebx
c0100c08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c0b:	83 c0 10             	add    $0x10,%eax
c0100c0e:	8b 08                	mov    (%eax),%ecx
c0100c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c13:	83 c0 0c             	add    $0xc,%eax
c0100c16:	8b 10                	mov    (%eax),%edx
c0100c18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c1b:	83 c0 08             	add    $0x8,%eax
c0100c1e:	8b 00                	mov    (%eax),%eax
c0100c20:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0100c24:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100c28:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100c2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c30:	c7 04 24 44 57 11 c0 	movl   $0xc0115744,(%esp)
c0100c37:	e8 29 f7 ff ff       	call   c0100365 <cprintf>
      print_debuginfo(eip - 1); //eip存放的是下一条指令的地址，所以-1得到当前指令
c0100c3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c3f:	83 e8 01             	sub    $0x1,%eax
c0100c42:	89 04 24             	mov    %eax,(%esp)
c0100c45:	e8 be fe ff ff       	call   c0100b08 <print_debuginfo>
 
      eip = ebp[1];   //循环开始后的eip从edp的棧中取上一位取值
c0100c4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c4d:	8b 40 04             	mov    0x4(%eax),%eax
c0100c50:	89 45 f0             	mov    %eax,-0x10(%ebp)
      ebp = (uint32_t *)*ebp; //ebp的棧中存放的是调用者的ebp寄存器的值，循环取至ebp寄存器的值为0
c0100c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c56:	8b 00                	mov    (%eax),%eax
c0100c58:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t eip = 0;
 
  ebp = (uint32_t *)read_ebp();  //获取当前ebp寄存器的值
  eip = read_eip();  //获取eip寄存器的值，得到当前指令的位置

  while (ebp)
c0100c5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c5f:	75 85                	jne    c0100be6 <print_stackframe+0x2a>
      print_debuginfo(eip - 1); //eip存放的是下一条指令的地址，所以-1得到当前指令
 
      eip = ebp[1];   //循环开始后的eip从edp的棧中取上一位取值
      ebp = (uint32_t *)*ebp; //ebp的棧中存放的是调用者的ebp寄存器的值，循环取至ebp寄存器的值为0
  }
}
c0100c61:	83 c4 34             	add    $0x34,%esp
c0100c64:	5b                   	pop    %ebx
c0100c65:	5d                   	pop    %ebp
c0100c66:	c3                   	ret    

c0100c67 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c67:	55                   	push   %ebp
c0100c68:	89 e5                	mov    %esp,%ebp
c0100c6a:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c74:	eb 0c                	jmp    c0100c82 <parse+0x1b>
            *buf ++ = '\0';
c0100c76:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c79:	8d 50 01             	lea    0x1(%eax),%edx
c0100c7c:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c7f:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c82:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c85:	0f b6 00             	movzbl (%eax),%eax
c0100c88:	84 c0                	test   %al,%al
c0100c8a:	74 1d                	je     c0100ca9 <parse+0x42>
c0100c8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8f:	0f b6 00             	movzbl (%eax),%eax
c0100c92:	0f be c0             	movsbl %al,%eax
c0100c95:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c99:	c7 04 24 e4 57 11 c0 	movl   $0xc01157e4,(%esp)
c0100ca0:	e8 94 45 01 00       	call   c0115239 <strchr>
c0100ca5:	85 c0                	test   %eax,%eax
c0100ca7:	75 cd                	jne    c0100c76 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100ca9:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cac:	0f b6 00             	movzbl (%eax),%eax
c0100caf:	84 c0                	test   %al,%al
c0100cb1:	75 02                	jne    c0100cb5 <parse+0x4e>
            break;
c0100cb3:	eb 67                	jmp    c0100d1c <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cb5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100cb9:	75 14                	jne    c0100ccf <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100cbb:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cc2:	00 
c0100cc3:	c7 04 24 e9 57 11 c0 	movl   $0xc01157e9,(%esp)
c0100cca:	e8 96 f6 ff ff       	call   c0100365 <cprintf>
        }
        argv[argc ++] = buf;
c0100ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd2:	8d 50 01             	lea    0x1(%eax),%edx
c0100cd5:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100cd8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ce2:	01 c2                	add    %eax,%edx
c0100ce4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ce7:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ce9:	eb 04                	jmp    c0100cef <parse+0x88>
            buf ++;
c0100ceb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cef:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cf2:	0f b6 00             	movzbl (%eax),%eax
c0100cf5:	84 c0                	test   %al,%al
c0100cf7:	74 1d                	je     c0100d16 <parse+0xaf>
c0100cf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cfc:	0f b6 00             	movzbl (%eax),%eax
c0100cff:	0f be c0             	movsbl %al,%eax
c0100d02:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d06:	c7 04 24 e4 57 11 c0 	movl   $0xc01157e4,(%esp)
c0100d0d:	e8 27 45 01 00       	call   c0115239 <strchr>
c0100d12:	85 c0                	test   %eax,%eax
c0100d14:	74 d5                	je     c0100ceb <parse+0x84>
            buf ++;
        }
    }
c0100d16:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d17:	e9 66 ff ff ff       	jmp    c0100c82 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d1f:	c9                   	leave  
c0100d20:	c3                   	ret    

c0100d21 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d21:	55                   	push   %ebp
c0100d22:	89 e5                	mov    %esp,%ebp
c0100d24:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d27:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d31:	89 04 24             	mov    %eax,(%esp)
c0100d34:	e8 2e ff ff ff       	call   c0100c67 <parse>
c0100d39:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d3c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d40:	75 0a                	jne    c0100d4c <runcmd+0x2b>
        return 0;
c0100d42:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d47:	e9 85 00 00 00       	jmp    c0100dd1 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d53:	eb 5c                	jmp    c0100db1 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d55:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d58:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d5b:	89 d0                	mov    %edx,%eax
c0100d5d:	01 c0                	add    %eax,%eax
c0100d5f:	01 d0                	add    %edx,%eax
c0100d61:	c1 e0 02             	shl    $0x2,%eax
c0100d64:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100d69:	8b 00                	mov    (%eax),%eax
c0100d6b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d6f:	89 04 24             	mov    %eax,(%esp)
c0100d72:	e8 23 44 01 00       	call   c011519a <strcmp>
c0100d77:	85 c0                	test   %eax,%eax
c0100d79:	75 32                	jne    c0100dad <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d7e:	89 d0                	mov    %edx,%eax
c0100d80:	01 c0                	add    %eax,%eax
c0100d82:	01 d0                	add    %edx,%eax
c0100d84:	c1 e0 02             	shl    $0x2,%eax
c0100d87:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100d8c:	8b 40 08             	mov    0x8(%eax),%eax
c0100d8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100d92:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100d95:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100d98:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100d9c:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100d9f:	83 c2 04             	add    $0x4,%edx
c0100da2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100da6:	89 0c 24             	mov    %ecx,(%esp)
c0100da9:	ff d0                	call   *%eax
c0100dab:	eb 24                	jmp    c0100dd1 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100db4:	83 f8 02             	cmp    $0x2,%eax
c0100db7:	76 9c                	jbe    c0100d55 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100db9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100dbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dc0:	c7 04 24 07 58 11 c0 	movl   $0xc0115807,(%esp)
c0100dc7:	e8 99 f5 ff ff       	call   c0100365 <cprintf>
    return 0;
c0100dcc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd1:	c9                   	leave  
c0100dd2:	c3                   	ret    

c0100dd3 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100dd3:	55                   	push   %ebp
c0100dd4:	89 e5                	mov    %esp,%ebp
c0100dd6:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100dd9:	c7 04 24 20 58 11 c0 	movl   $0xc0115820,(%esp)
c0100de0:	e8 80 f5 ff ff       	call   c0100365 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100de5:	c7 04 24 48 58 11 c0 	movl   $0xc0115848,(%esp)
c0100dec:	e8 74 f5 ff ff       	call   c0100365 <cprintf>

    if (tf != NULL) {
c0100df1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100df5:	74 0b                	je     c0100e02 <kmonitor+0x2f>
        print_trapframe(tf);
c0100df7:	8b 45 08             	mov    0x8(%ebp),%eax
c0100dfa:	89 04 24             	mov    %eax,(%esp)
c0100dfd:	e8 d1 16 00 00       	call   c01024d3 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e02:	c7 04 24 6d 58 11 c0 	movl   $0xc011586d,(%esp)
c0100e09:	e8 46 f4 ff ff       	call   c0100254 <readline>
c0100e0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e11:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e15:	74 18                	je     c0100e2f <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e17:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e21:	89 04 24             	mov    %eax,(%esp)
c0100e24:	e8 f8 fe ff ff       	call   c0100d21 <runcmd>
c0100e29:	85 c0                	test   %eax,%eax
c0100e2b:	79 02                	jns    c0100e2f <kmonitor+0x5c>
                break;
c0100e2d:	eb 02                	jmp    c0100e31 <kmonitor+0x5e>
            }
        }
    }
c0100e2f:	eb d1                	jmp    c0100e02 <kmonitor+0x2f>
}
c0100e31:	c9                   	leave  
c0100e32:	c3                   	ret    

c0100e33 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e33:	55                   	push   %ebp
c0100e34:	89 e5                	mov    %esp,%ebp
c0100e36:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e40:	eb 3f                	jmp    c0100e81 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e42:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e45:	89 d0                	mov    %edx,%eax
c0100e47:	01 c0                	add    %eax,%eax
c0100e49:	01 d0                	add    %edx,%eax
c0100e4b:	c1 e0 02             	shl    $0x2,%eax
c0100e4e:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e53:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e59:	89 d0                	mov    %edx,%eax
c0100e5b:	01 c0                	add    %eax,%eax
c0100e5d:	01 d0                	add    %edx,%eax
c0100e5f:	c1 e0 02             	shl    $0x2,%eax
c0100e62:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e67:	8b 00                	mov    (%eax),%eax
c0100e69:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e71:	c7 04 24 71 58 11 c0 	movl   $0xc0115871,(%esp)
c0100e78:	e8 e8 f4 ff ff       	call   c0100365 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e7d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e84:	83 f8 02             	cmp    $0x2,%eax
c0100e87:	76 b9                	jbe    c0100e42 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e89:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e8e:	c9                   	leave  
c0100e8f:	c3                   	ret    

c0100e90 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e90:	55                   	push   %ebp
c0100e91:	89 e5                	mov    %esp,%ebp
c0100e93:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e96:	e8 d7 fb ff ff       	call   c0100a72 <print_kerninfo>
    return 0;
c0100e9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea0:	c9                   	leave  
c0100ea1:	c3                   	ret    

c0100ea2 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100ea2:	55                   	push   %ebp
c0100ea3:	89 e5                	mov    %esp,%ebp
c0100ea5:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ea8:	e8 0f fd ff ff       	call   c0100bbc <print_stackframe>
    return 0;
c0100ead:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eb2:	c9                   	leave  
c0100eb3:	c3                   	ret    

c0100eb4 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100eb4:	55                   	push   %ebp
c0100eb5:	89 e5                	mov    %esp,%ebp
c0100eb7:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100eba:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
c0100ebf:	85 c0                	test   %eax,%eax
c0100ec1:	74 02                	je     c0100ec5 <__panic+0x11>
        goto panic_dead;
c0100ec3:	eb 48                	jmp    c0100f0d <__panic+0x59>
    }
    is_panic = 1;
c0100ec5:	c7 05 00 f3 14 c0 01 	movl   $0x1,0xc014f300
c0100ecc:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ecf:	8d 45 14             	lea    0x14(%ebp),%eax
c0100ed2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ed8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100edc:	8b 45 08             	mov    0x8(%ebp),%eax
c0100edf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ee3:	c7 04 24 7a 58 11 c0 	movl   $0xc011587a,(%esp)
c0100eea:	e8 76 f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ef2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ef6:	8b 45 10             	mov    0x10(%ebp),%eax
c0100ef9:	89 04 24             	mov    %eax,(%esp)
c0100efc:	e8 29 f4 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f01:	c7 04 24 96 58 11 c0 	movl   $0xc0115896,(%esp)
c0100f08:	e8 58 f4 ff ff       	call   c0100365 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100f0d:	e8 04 12 00 00       	call   c0102116 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f12:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f19:	e8 b5 fe ff ff       	call   c0100dd3 <kmonitor>
    }
c0100f1e:	eb f2                	jmp    c0100f12 <__panic+0x5e>

c0100f20 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f20:	55                   	push   %ebp
c0100f21:	89 e5                	mov    %esp,%ebp
c0100f23:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f26:	8d 45 14             	lea    0x14(%ebp),%eax
c0100f29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f2f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f33:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f3a:	c7 04 24 98 58 11 c0 	movl   $0xc0115898,(%esp)
c0100f41:	e8 1f f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f49:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f4d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f50:	89 04 24             	mov    %eax,(%esp)
c0100f53:	e8 d2 f3 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f58:	c7 04 24 96 58 11 c0 	movl   $0xc0115896,(%esp)
c0100f5f:	e8 01 f4 ff ff       	call   c0100365 <cprintf>
    va_end(ap);
}
c0100f64:	c9                   	leave  
c0100f65:	c3                   	ret    

c0100f66 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100f66:	55                   	push   %ebp
c0100f67:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100f69:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
}
c0100f6e:	5d                   	pop    %ebp
c0100f6f:	c3                   	ret    

c0100f70 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100f70:	55                   	push   %ebp
c0100f71:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100f73:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c0100f78:	5d                   	pop    %ebp
c0100f79:	c3                   	ret    

c0100f7a <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100f7a:	55                   	push   %ebp
c0100f7b:	89 e5                	mov    %esp,%ebp
c0100f7d:	83 ec 28             	sub    $0x28,%esp
c0100f80:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100f86:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f8a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100f8e:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100f92:	ee                   	out    %al,(%dx)
c0100f93:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100f99:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100f9d:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fa1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fa5:	ee                   	out    %al,(%dx)
c0100fa6:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fac:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100fb0:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fb4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fb8:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100fb9:	c7 05 10 30 15 c0 00 	movl   $0x0,0xc0153010
c0100fc0:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100fc3:	c7 04 24 b6 58 11 c0 	movl   $0xc01158b6,(%esp)
c0100fca:	e8 96 f3 ff ff       	call   c0100365 <cprintf>
    pic_enable(IRQ_TIMER);
c0100fcf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100fd6:	e8 99 11 00 00       	call   c0102174 <pic_enable>
}
c0100fdb:	c9                   	leave  
c0100fdc:	c3                   	ret    

c0100fdd <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100fdd:	55                   	push   %ebp
c0100fde:	89 e5                	mov    %esp,%ebp
c0100fe0:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100fe3:	9c                   	pushf  
c0100fe4:	58                   	pop    %eax
c0100fe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100feb:	25 00 02 00 00       	and    $0x200,%eax
c0100ff0:	85 c0                	test   %eax,%eax
c0100ff2:	74 0c                	je     c0101000 <__intr_save+0x23>
        intr_disable();
c0100ff4:	e8 1d 11 00 00       	call   c0102116 <intr_disable>
        return 1;
c0100ff9:	b8 01 00 00 00       	mov    $0x1,%eax
c0100ffe:	eb 05                	jmp    c0101005 <__intr_save+0x28>
    }
    return 0;
c0101000:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101005:	c9                   	leave  
c0101006:	c3                   	ret    

c0101007 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0101007:	55                   	push   %ebp
c0101008:	89 e5                	mov    %esp,%ebp
c010100a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010100d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101011:	74 05                	je     c0101018 <__intr_restore+0x11>
        intr_enable();
c0101013:	e8 f8 10 00 00       	call   c0102110 <intr_enable>
    }
}
c0101018:	c9                   	leave  
c0101019:	c3                   	ret    

c010101a <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010101a:	55                   	push   %ebp
c010101b:	89 e5                	mov    %esp,%ebp
c010101d:	83 ec 10             	sub    $0x10,%esp
c0101020:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101026:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010102a:	89 c2                	mov    %eax,%edx
c010102c:	ec                   	in     (%dx),%al
c010102d:	88 45 fd             	mov    %al,-0x3(%ebp)
c0101030:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0101036:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010103a:	89 c2                	mov    %eax,%edx
c010103c:	ec                   	in     (%dx),%al
c010103d:	88 45 f9             	mov    %al,-0x7(%ebp)
c0101040:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0101046:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010104a:	89 c2                	mov    %eax,%edx
c010104c:	ec                   	in     (%dx),%al
c010104d:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101050:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0101056:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010105a:	89 c2                	mov    %eax,%edx
c010105c:	ec                   	in     (%dx),%al
c010105d:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101060:	c9                   	leave  
c0101061:	c3                   	ret    

c0101062 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101062:	55                   	push   %ebp
c0101063:	89 e5                	mov    %esp,%ebp
c0101065:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0101068:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c010106f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101072:	0f b7 00             	movzwl (%eax),%eax
c0101075:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0101079:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010107c:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101081:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101084:	0f b7 00             	movzwl (%eax),%eax
c0101087:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010108b:	74 12                	je     c010109f <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c010108d:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0101094:	66 c7 05 26 f3 14 c0 	movw   $0x3b4,0xc014f326
c010109b:	b4 03 
c010109d:	eb 13                	jmp    c01010b2 <cga_init+0x50>
    } else {
        *cp = was;
c010109f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010a2:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01010a6:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010a9:	66 c7 05 26 f3 14 c0 	movw   $0x3d4,0xc014f326
c01010b0:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010b2:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010b9:	0f b7 c0             	movzwl %ax,%eax
c01010bc:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01010c0:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010c4:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010c8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010cc:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01010cd:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010d4:	83 c0 01             	add    $0x1,%eax
c01010d7:	0f b7 c0             	movzwl %ax,%eax
c01010da:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010de:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c01010e2:	89 c2                	mov    %eax,%edx
c01010e4:	ec                   	in     (%dx),%al
c01010e5:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c01010e8:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01010ec:	0f b6 c0             	movzbl %al,%eax
c01010ef:	c1 e0 08             	shl    $0x8,%eax
c01010f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c01010f5:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010fc:	0f b7 c0             	movzwl %ax,%eax
c01010ff:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101103:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101107:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010110b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010110f:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101110:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101117:	83 c0 01             	add    $0x1,%eax
c010111a:	0f b7 c0             	movzwl %ax,%eax
c010111d:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101121:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101125:	89 c2                	mov    %eax,%edx
c0101127:	ec                   	in     (%dx),%al
c0101128:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c010112b:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010112f:	0f b6 c0             	movzbl %al,%eax
c0101132:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101135:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101138:	a3 20 f3 14 c0       	mov    %eax,0xc014f320
    crt_pos = pos;
c010113d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101140:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
}
c0101146:	c9                   	leave  
c0101147:	c3                   	ret    

c0101148 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101148:	55                   	push   %ebp
c0101149:	89 e5                	mov    %esp,%ebp
c010114b:	83 ec 48             	sub    $0x48,%esp
c010114e:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101154:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101158:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010115c:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101160:	ee                   	out    %al,(%dx)
c0101161:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0101167:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c010116b:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010116f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101173:	ee                   	out    %al,(%dx)
c0101174:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c010117a:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c010117e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101182:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101186:	ee                   	out    %al,(%dx)
c0101187:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c010118d:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c0101191:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101195:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101199:	ee                   	out    %al,(%dx)
c010119a:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011a0:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011a4:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011a8:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011ac:	ee                   	out    %al,(%dx)
c01011ad:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011b3:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011b7:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011bb:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01011bf:	ee                   	out    %al,(%dx)
c01011c0:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01011c6:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01011ca:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01011ce:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01011d2:	ee                   	out    %al,(%dx)
c01011d3:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01011d9:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01011dd:	89 c2                	mov    %eax,%edx
c01011df:	ec                   	in     (%dx),%al
c01011e0:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01011e3:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01011e7:	3c ff                	cmp    $0xff,%al
c01011e9:	0f 95 c0             	setne  %al
c01011ec:	0f b6 c0             	movzbl %al,%eax
c01011ef:	a3 28 f3 14 c0       	mov    %eax,0xc014f328
c01011f4:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01011fa:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c01011fe:	89 c2                	mov    %eax,%edx
c0101200:	ec                   	in     (%dx),%al
c0101201:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101204:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010120a:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c010120e:	89 c2                	mov    %eax,%edx
c0101210:	ec                   	in     (%dx),%al
c0101211:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101214:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c0101219:	85 c0                	test   %eax,%eax
c010121b:	74 0c                	je     c0101229 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c010121d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101224:	e8 4b 0f 00 00       	call   c0102174 <pic_enable>
    }
}
c0101229:	c9                   	leave  
c010122a:	c3                   	ret    

c010122b <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010122b:	55                   	push   %ebp
c010122c:	89 e5                	mov    %esp,%ebp
c010122e:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101231:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101238:	eb 09                	jmp    c0101243 <lpt_putc_sub+0x18>
        delay();
c010123a:	e8 db fd ff ff       	call   c010101a <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010123f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101243:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101249:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010124d:	89 c2                	mov    %eax,%edx
c010124f:	ec                   	in     (%dx),%al
c0101250:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101253:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101257:	84 c0                	test   %al,%al
c0101259:	78 09                	js     c0101264 <lpt_putc_sub+0x39>
c010125b:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101262:	7e d6                	jle    c010123a <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101264:	8b 45 08             	mov    0x8(%ebp),%eax
c0101267:	0f b6 c0             	movzbl %al,%eax
c010126a:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101270:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101273:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101277:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010127b:	ee                   	out    %al,(%dx)
c010127c:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101282:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0101286:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010128a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010128e:	ee                   	out    %al,(%dx)
c010128f:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c0101295:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c0101299:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010129d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012a1:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01012a2:	c9                   	leave  
c01012a3:	c3                   	ret    

c01012a4 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01012a4:	55                   	push   %ebp
c01012a5:	89 e5                	mov    %esp,%ebp
c01012a7:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01012aa:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01012ae:	74 0d                	je     c01012bd <lpt_putc+0x19>
        lpt_putc_sub(c);
c01012b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01012b3:	89 04 24             	mov    %eax,(%esp)
c01012b6:	e8 70 ff ff ff       	call   c010122b <lpt_putc_sub>
c01012bb:	eb 24                	jmp    c01012e1 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01012bd:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012c4:	e8 62 ff ff ff       	call   c010122b <lpt_putc_sub>
        lpt_putc_sub(' ');
c01012c9:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01012d0:	e8 56 ff ff ff       	call   c010122b <lpt_putc_sub>
        lpt_putc_sub('\b');
c01012d5:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012dc:	e8 4a ff ff ff       	call   c010122b <lpt_putc_sub>
    }
}
c01012e1:	c9                   	leave  
c01012e2:	c3                   	ret    

c01012e3 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01012e3:	55                   	push   %ebp
c01012e4:	89 e5                	mov    %esp,%ebp
c01012e6:	53                   	push   %ebx
c01012e7:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c01012ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01012ed:	b0 00                	mov    $0x0,%al
c01012ef:	85 c0                	test   %eax,%eax
c01012f1:	75 07                	jne    c01012fa <cga_putc+0x17>
        c |= 0x0700;
c01012f3:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c01012fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01012fd:	0f b6 c0             	movzbl %al,%eax
c0101300:	83 f8 0a             	cmp    $0xa,%eax
c0101303:	74 4c                	je     c0101351 <cga_putc+0x6e>
c0101305:	83 f8 0d             	cmp    $0xd,%eax
c0101308:	74 57                	je     c0101361 <cga_putc+0x7e>
c010130a:	83 f8 08             	cmp    $0x8,%eax
c010130d:	0f 85 88 00 00 00    	jne    c010139b <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101313:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010131a:	66 85 c0             	test   %ax,%ax
c010131d:	74 30                	je     c010134f <cga_putc+0x6c>
            crt_pos --;
c010131f:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c0101326:	83 e8 01             	sub    $0x1,%eax
c0101329:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c010132f:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101334:	0f b7 15 24 f3 14 c0 	movzwl 0xc014f324,%edx
c010133b:	0f b7 d2             	movzwl %dx,%edx
c010133e:	01 d2                	add    %edx,%edx
c0101340:	01 c2                	add    %eax,%edx
c0101342:	8b 45 08             	mov    0x8(%ebp),%eax
c0101345:	b0 00                	mov    $0x0,%al
c0101347:	83 c8 20             	or     $0x20,%eax
c010134a:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c010134d:	eb 72                	jmp    c01013c1 <cga_putc+0xde>
c010134f:	eb 70                	jmp    c01013c1 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101351:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c0101358:	83 c0 50             	add    $0x50,%eax
c010135b:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101361:	0f b7 1d 24 f3 14 c0 	movzwl 0xc014f324,%ebx
c0101368:	0f b7 0d 24 f3 14 c0 	movzwl 0xc014f324,%ecx
c010136f:	0f b7 c1             	movzwl %cx,%eax
c0101372:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101378:	c1 e8 10             	shr    $0x10,%eax
c010137b:	89 c2                	mov    %eax,%edx
c010137d:	66 c1 ea 06          	shr    $0x6,%dx
c0101381:	89 d0                	mov    %edx,%eax
c0101383:	c1 e0 02             	shl    $0x2,%eax
c0101386:	01 d0                	add    %edx,%eax
c0101388:	c1 e0 04             	shl    $0x4,%eax
c010138b:	29 c1                	sub    %eax,%ecx
c010138d:	89 ca                	mov    %ecx,%edx
c010138f:	89 d8                	mov    %ebx,%eax
c0101391:	29 d0                	sub    %edx,%eax
c0101393:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
        break;
c0101399:	eb 26                	jmp    c01013c1 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c010139b:	8b 0d 20 f3 14 c0    	mov    0xc014f320,%ecx
c01013a1:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013a8:	8d 50 01             	lea    0x1(%eax),%edx
c01013ab:	66 89 15 24 f3 14 c0 	mov    %dx,0xc014f324
c01013b2:	0f b7 c0             	movzwl %ax,%eax
c01013b5:	01 c0                	add    %eax,%eax
c01013b7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01013ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01013bd:	66 89 02             	mov    %ax,(%edx)
        break;
c01013c0:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01013c1:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013c8:	66 3d cf 07          	cmp    $0x7cf,%ax
c01013cc:	76 5b                	jbe    c0101429 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01013ce:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013d3:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01013d9:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013de:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01013e5:	00 
c01013e6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01013ea:	89 04 24             	mov    %eax,(%esp)
c01013ed:	e8 45 40 01 00       	call   c0115437 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c01013f2:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c01013f9:	eb 15                	jmp    c0101410 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c01013fb:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101400:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101403:	01 d2                	add    %edx,%edx
c0101405:	01 d0                	add    %edx,%eax
c0101407:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010140c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101410:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101417:	7e e2                	jle    c01013fb <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101419:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c0101420:	83 e8 50             	sub    $0x50,%eax
c0101423:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101429:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101430:	0f b7 c0             	movzwl %ax,%eax
c0101433:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101437:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c010143b:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010143f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101443:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101444:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010144b:	66 c1 e8 08          	shr    $0x8,%ax
c010144f:	0f b6 c0             	movzbl %al,%eax
c0101452:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c0101459:	83 c2 01             	add    $0x1,%edx
c010145c:	0f b7 d2             	movzwl %dx,%edx
c010145f:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101463:	88 45 ed             	mov    %al,-0x13(%ebp)
c0101466:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010146a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010146e:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c010146f:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101476:	0f b7 c0             	movzwl %ax,%eax
c0101479:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010147d:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101481:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101485:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101489:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010148a:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c0101491:	0f b6 c0             	movzbl %al,%eax
c0101494:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c010149b:	83 c2 01             	add    $0x1,%edx
c010149e:	0f b7 d2             	movzwl %dx,%edx
c01014a1:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014a5:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014a8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014ac:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014b0:	ee                   	out    %al,(%dx)
}
c01014b1:	83 c4 34             	add    $0x34,%esp
c01014b4:	5b                   	pop    %ebx
c01014b5:	5d                   	pop    %ebp
c01014b6:	c3                   	ret    

c01014b7 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01014b7:	55                   	push   %ebp
c01014b8:	89 e5                	mov    %esp,%ebp
c01014ba:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01014c4:	eb 09                	jmp    c01014cf <serial_putc_sub+0x18>
        delay();
c01014c6:	e8 4f fb ff ff       	call   c010101a <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014cb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01014cf:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014d5:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014d9:	89 c2                	mov    %eax,%edx
c01014db:	ec                   	in     (%dx),%al
c01014dc:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014df:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01014e3:	0f b6 c0             	movzbl %al,%eax
c01014e6:	83 e0 20             	and    $0x20,%eax
c01014e9:	85 c0                	test   %eax,%eax
c01014eb:	75 09                	jne    c01014f6 <serial_putc_sub+0x3f>
c01014ed:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01014f4:	7e d0                	jle    c01014c6 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c01014f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01014f9:	0f b6 c0             	movzbl %al,%eax
c01014fc:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101502:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101505:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101509:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010150d:	ee                   	out    %al,(%dx)
}
c010150e:	c9                   	leave  
c010150f:	c3                   	ret    

c0101510 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101510:	55                   	push   %ebp
c0101511:	89 e5                	mov    %esp,%ebp
c0101513:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101516:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010151a:	74 0d                	je     c0101529 <serial_putc+0x19>
        serial_putc_sub(c);
c010151c:	8b 45 08             	mov    0x8(%ebp),%eax
c010151f:	89 04 24             	mov    %eax,(%esp)
c0101522:	e8 90 ff ff ff       	call   c01014b7 <serial_putc_sub>
c0101527:	eb 24                	jmp    c010154d <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101529:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101530:	e8 82 ff ff ff       	call   c01014b7 <serial_putc_sub>
        serial_putc_sub(' ');
c0101535:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010153c:	e8 76 ff ff ff       	call   c01014b7 <serial_putc_sub>
        serial_putc_sub('\b');
c0101541:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101548:	e8 6a ff ff ff       	call   c01014b7 <serial_putc_sub>
    }
}
c010154d:	c9                   	leave  
c010154e:	c3                   	ret    

c010154f <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c010154f:	55                   	push   %ebp
c0101550:	89 e5                	mov    %esp,%ebp
c0101552:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101555:	eb 33                	jmp    c010158a <cons_intr+0x3b>
        if (c != 0) {
c0101557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010155b:	74 2d                	je     c010158a <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c010155d:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c0101562:	8d 50 01             	lea    0x1(%eax),%edx
c0101565:	89 15 44 f5 14 c0    	mov    %edx,0xc014f544
c010156b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010156e:	88 90 40 f3 14 c0    	mov    %dl,-0x3feb0cc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101574:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c0101579:	3d 00 02 00 00       	cmp    $0x200,%eax
c010157e:	75 0a                	jne    c010158a <cons_intr+0x3b>
                cons.wpos = 0;
c0101580:	c7 05 44 f5 14 c0 00 	movl   $0x0,0xc014f544
c0101587:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010158a:	8b 45 08             	mov    0x8(%ebp),%eax
c010158d:	ff d0                	call   *%eax
c010158f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101592:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101596:	75 bf                	jne    c0101557 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101598:	c9                   	leave  
c0101599:	c3                   	ret    

c010159a <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c010159a:	55                   	push   %ebp
c010159b:	89 e5                	mov    %esp,%ebp
c010159d:	83 ec 10             	sub    $0x10,%esp
c01015a0:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015a6:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015aa:	89 c2                	mov    %eax,%edx
c01015ac:	ec                   	in     (%dx),%al
c01015ad:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015b0:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01015b4:	0f b6 c0             	movzbl %al,%eax
c01015b7:	83 e0 01             	and    $0x1,%eax
c01015ba:	85 c0                	test   %eax,%eax
c01015bc:	75 07                	jne    c01015c5 <serial_proc_data+0x2b>
        return -1;
c01015be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015c3:	eb 2a                	jmp    c01015ef <serial_proc_data+0x55>
c01015c5:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015cb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01015cf:	89 c2                	mov    %eax,%edx
c01015d1:	ec                   	in     (%dx),%al
c01015d2:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01015d5:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01015d9:	0f b6 c0             	movzbl %al,%eax
c01015dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01015df:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01015e3:	75 07                	jne    c01015ec <serial_proc_data+0x52>
        c = '\b';
c01015e5:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c01015ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01015ef:	c9                   	leave  
c01015f0:	c3                   	ret    

c01015f1 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c01015f1:	55                   	push   %ebp
c01015f2:	89 e5                	mov    %esp,%ebp
c01015f4:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c01015f7:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c01015fc:	85 c0                	test   %eax,%eax
c01015fe:	74 0c                	je     c010160c <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101600:	c7 04 24 9a 15 10 c0 	movl   $0xc010159a,(%esp)
c0101607:	e8 43 ff ff ff       	call   c010154f <cons_intr>
    }
}
c010160c:	c9                   	leave  
c010160d:	c3                   	ret    

c010160e <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010160e:	55                   	push   %ebp
c010160f:	89 e5                	mov    %esp,%ebp
c0101611:	83 ec 38             	sub    $0x38,%esp
c0101614:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010161a:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010161e:	89 c2                	mov    %eax,%edx
c0101620:	ec                   	in     (%dx),%al
c0101621:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101624:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101628:	0f b6 c0             	movzbl %al,%eax
c010162b:	83 e0 01             	and    $0x1,%eax
c010162e:	85 c0                	test   %eax,%eax
c0101630:	75 0a                	jne    c010163c <kbd_proc_data+0x2e>
        return -1;
c0101632:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101637:	e9 59 01 00 00       	jmp    c0101795 <kbd_proc_data+0x187>
c010163c:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101642:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101646:	89 c2                	mov    %eax,%edx
c0101648:	ec                   	in     (%dx),%al
c0101649:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c010164c:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101650:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101653:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101657:	75 17                	jne    c0101670 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101659:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c010165e:	83 c8 40             	or     $0x40,%eax
c0101661:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c0101666:	b8 00 00 00 00       	mov    $0x0,%eax
c010166b:	e9 25 01 00 00       	jmp    c0101795 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101670:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101674:	84 c0                	test   %al,%al
c0101676:	79 47                	jns    c01016bf <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101678:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c010167d:	83 e0 40             	and    $0x40,%eax
c0101680:	85 c0                	test   %eax,%eax
c0101682:	75 09                	jne    c010168d <kbd_proc_data+0x7f>
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	83 e0 7f             	and    $0x7f,%eax
c010168b:	eb 04                	jmp    c0101691 <kbd_proc_data+0x83>
c010168d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101691:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101694:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101698:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c010169f:	83 c8 40             	or     $0x40,%eax
c01016a2:	0f b6 c0             	movzbl %al,%eax
c01016a5:	f7 d0                	not    %eax
c01016a7:	89 c2                	mov    %eax,%edx
c01016a9:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016ae:	21 d0                	and    %edx,%eax
c01016b0:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c01016b5:	b8 00 00 00 00       	mov    $0x0,%eax
c01016ba:	e9 d6 00 00 00       	jmp    c0101795 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01016bf:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016c4:	83 e0 40             	and    $0x40,%eax
c01016c7:	85 c0                	test   %eax,%eax
c01016c9:	74 11                	je     c01016dc <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01016cb:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01016cf:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016d4:	83 e0 bf             	and    $0xffffffbf,%eax
c01016d7:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    }

    shift |= shiftcode[data];
c01016dc:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016e0:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016e7:	0f b6 d0             	movzbl %al,%edx
c01016ea:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016ef:	09 d0                	or     %edx,%eax
c01016f1:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    shift ^= togglecode[data];
c01016f6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016fa:	0f b6 80 60 e1 14 c0 	movzbl -0x3feb1ea0(%eax),%eax
c0101701:	0f b6 d0             	movzbl %al,%edx
c0101704:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101709:	31 d0                	xor    %edx,%eax
c010170b:	a3 48 f5 14 c0       	mov    %eax,0xc014f548

    c = charcode[shift & (CTL | SHIFT)][data];
c0101710:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101715:	83 e0 03             	and    $0x3,%eax
c0101718:	8b 14 85 60 e5 14 c0 	mov    -0x3feb1aa0(,%eax,4),%edx
c010171f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101723:	01 d0                	add    %edx,%eax
c0101725:	0f b6 00             	movzbl (%eax),%eax
c0101728:	0f b6 c0             	movzbl %al,%eax
c010172b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c010172e:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101733:	83 e0 08             	and    $0x8,%eax
c0101736:	85 c0                	test   %eax,%eax
c0101738:	74 22                	je     c010175c <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010173a:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c010173e:	7e 0c                	jle    c010174c <kbd_proc_data+0x13e>
c0101740:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101744:	7f 06                	jg     c010174c <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101746:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010174a:	eb 10                	jmp    c010175c <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c010174c:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101750:	7e 0a                	jle    c010175c <kbd_proc_data+0x14e>
c0101752:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101756:	7f 04                	jg     c010175c <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101758:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c010175c:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101761:	f7 d0                	not    %eax
c0101763:	83 e0 06             	and    $0x6,%eax
c0101766:	85 c0                	test   %eax,%eax
c0101768:	75 28                	jne    c0101792 <kbd_proc_data+0x184>
c010176a:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101771:	75 1f                	jne    c0101792 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101773:	c7 04 24 d1 58 11 c0 	movl   $0xc01158d1,(%esp)
c010177a:	e8 e6 eb ff ff       	call   c0100365 <cprintf>
c010177f:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101785:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101789:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c010178d:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101791:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101792:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101795:	c9                   	leave  
c0101796:	c3                   	ret    

c0101797 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101797:	55                   	push   %ebp
c0101798:	89 e5                	mov    %esp,%ebp
c010179a:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c010179d:	c7 04 24 0e 16 10 c0 	movl   $0xc010160e,(%esp)
c01017a4:	e8 a6 fd ff ff       	call   c010154f <cons_intr>
}
c01017a9:	c9                   	leave  
c01017aa:	c3                   	ret    

c01017ab <kbd_init>:

static void
kbd_init(void) {
c01017ab:	55                   	push   %ebp
c01017ac:	89 e5                	mov    %esp,%ebp
c01017ae:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01017b1:	e8 e1 ff ff ff       	call   c0101797 <kbd_intr>
    pic_enable(IRQ_KBD);
c01017b6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01017bd:	e8 b2 09 00 00       	call   c0102174 <pic_enable>
}
c01017c2:	c9                   	leave  
c01017c3:	c3                   	ret    

c01017c4 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017c4:	55                   	push   %ebp
c01017c5:	89 e5                	mov    %esp,%ebp
c01017c7:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01017ca:	e8 93 f8 ff ff       	call   c0101062 <cga_init>
    serial_init();
c01017cf:	e8 74 f9 ff ff       	call   c0101148 <serial_init>
    kbd_init();
c01017d4:	e8 d2 ff ff ff       	call   c01017ab <kbd_init>
    if (!serial_exists) {
c01017d9:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c01017de:	85 c0                	test   %eax,%eax
c01017e0:	75 0c                	jne    c01017ee <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01017e2:	c7 04 24 dd 58 11 c0 	movl   $0xc01158dd,(%esp)
c01017e9:	e8 77 eb ff ff       	call   c0100365 <cprintf>
    }
}
c01017ee:	c9                   	leave  
c01017ef:	c3                   	ret    

c01017f0 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c01017f0:	55                   	push   %ebp
c01017f1:	89 e5                	mov    %esp,%ebp
c01017f3:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01017f6:	e8 e2 f7 ff ff       	call   c0100fdd <__intr_save>
c01017fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c01017fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0101801:	89 04 24             	mov    %eax,(%esp)
c0101804:	e8 9b fa ff ff       	call   c01012a4 <lpt_putc>
        cga_putc(c);
c0101809:	8b 45 08             	mov    0x8(%ebp),%eax
c010180c:	89 04 24             	mov    %eax,(%esp)
c010180f:	e8 cf fa ff ff       	call   c01012e3 <cga_putc>
        serial_putc(c);
c0101814:	8b 45 08             	mov    0x8(%ebp),%eax
c0101817:	89 04 24             	mov    %eax,(%esp)
c010181a:	e8 f1 fc ff ff       	call   c0101510 <serial_putc>
    }
    local_intr_restore(intr_flag);
c010181f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101822:	89 04 24             	mov    %eax,(%esp)
c0101825:	e8 dd f7 ff ff       	call   c0101007 <__intr_restore>
}
c010182a:	c9                   	leave  
c010182b:	c3                   	ret    

c010182c <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c010182c:	55                   	push   %ebp
c010182d:	89 e5                	mov    %esp,%ebp
c010182f:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101832:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101839:	e8 9f f7 ff ff       	call   c0100fdd <__intr_save>
c010183e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101841:	e8 ab fd ff ff       	call   c01015f1 <serial_intr>
        kbd_intr();
c0101846:	e8 4c ff ff ff       	call   c0101797 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010184b:	8b 15 40 f5 14 c0    	mov    0xc014f540,%edx
c0101851:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c0101856:	39 c2                	cmp    %eax,%edx
c0101858:	74 31                	je     c010188b <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010185a:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c010185f:	8d 50 01             	lea    0x1(%eax),%edx
c0101862:	89 15 40 f5 14 c0    	mov    %edx,0xc014f540
c0101868:	0f b6 80 40 f3 14 c0 	movzbl -0x3feb0cc0(%eax),%eax
c010186f:	0f b6 c0             	movzbl %al,%eax
c0101872:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101875:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c010187a:	3d 00 02 00 00       	cmp    $0x200,%eax
c010187f:	75 0a                	jne    c010188b <cons_getc+0x5f>
                cons.rpos = 0;
c0101881:	c7 05 40 f5 14 c0 00 	movl   $0x0,0xc014f540
c0101888:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010188b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010188e:	89 04 24             	mov    %eax,(%esp)
c0101891:	e8 71 f7 ff ff       	call   c0101007 <__intr_restore>
    return c;
c0101896:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101899:	c9                   	leave  
c010189a:	c3                   	ret    

c010189b <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c010189b:	55                   	push   %ebp
c010189c:	89 e5                	mov    %esp,%ebp
c010189e:	83 ec 14             	sub    $0x14,%esp
c01018a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01018a4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01018a8:	90                   	nop
c01018a9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01018ad:	83 c0 07             	add    $0x7,%eax
c01018b0:	0f b7 c0             	movzwl %ax,%eax
c01018b3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018b7:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018bb:	89 c2                	mov    %eax,%edx
c01018bd:	ec                   	in     (%dx),%al
c01018be:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01018c1:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01018c5:	0f b6 c0             	movzbl %al,%eax
c01018c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018ce:	25 80 00 00 00       	and    $0x80,%eax
c01018d3:	85 c0                	test   %eax,%eax
c01018d5:	75 d2                	jne    c01018a9 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01018d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01018db:	74 11                	je     c01018ee <ide_wait_ready+0x53>
c01018dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018e0:	83 e0 21             	and    $0x21,%eax
c01018e3:	85 c0                	test   %eax,%eax
c01018e5:	74 07                	je     c01018ee <ide_wait_ready+0x53>
        return -1;
c01018e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01018ec:	eb 05                	jmp    c01018f3 <ide_wait_ready+0x58>
    }
    return 0;
c01018ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01018f3:	c9                   	leave  
c01018f4:	c3                   	ret    

c01018f5 <ide_init>:

void
ide_init(void) {
c01018f5:	55                   	push   %ebp
c01018f6:	89 e5                	mov    %esp,%ebp
c01018f8:	57                   	push   %edi
c01018f9:	53                   	push   %ebx
c01018fa:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101900:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0101906:	e9 d6 02 00 00       	jmp    c0101be1 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c010190b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010190f:	c1 e0 03             	shl    $0x3,%eax
c0101912:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101919:	29 c2                	sub    %eax,%edx
c010191b:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101921:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101924:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101928:	66 d1 e8             	shr    %ax
c010192b:	0f b7 c0             	movzwl %ax,%eax
c010192e:	0f b7 04 85 fc 58 11 	movzwl -0x3feea704(,%eax,4),%eax
c0101935:	c0 
c0101936:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010193a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010193e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101945:	00 
c0101946:	89 04 24             	mov    %eax,(%esp)
c0101949:	e8 4d ff ff ff       	call   c010189b <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c010194e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101952:	83 e0 01             	and    $0x1,%eax
c0101955:	c1 e0 04             	shl    $0x4,%eax
c0101958:	83 c8 e0             	or     $0xffffffe0,%eax
c010195b:	0f b6 c0             	movzbl %al,%eax
c010195e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101962:	83 c2 06             	add    $0x6,%edx
c0101965:	0f b7 d2             	movzwl %dx,%edx
c0101968:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c010196c:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010196f:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101973:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101977:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101978:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010197c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101983:	00 
c0101984:	89 04 24             	mov    %eax,(%esp)
c0101987:	e8 0f ff ff ff       	call   c010189b <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c010198c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101990:	83 c0 07             	add    $0x7,%eax
c0101993:	0f b7 c0             	movzwl %ax,%eax
c0101996:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c010199a:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c010199e:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01019a2:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01019a6:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019a7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019ab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019b2:	00 
c01019b3:	89 04 24             	mov    %eax,(%esp)
c01019b6:	e8 e0 fe ff ff       	call   c010189b <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019bf:	83 c0 07             	add    $0x7,%eax
c01019c2:	0f b7 c0             	movzwl %ax,%eax
c01019c5:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019c9:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01019cd:	89 c2                	mov    %eax,%edx
c01019cf:	ec                   	in     (%dx),%al
c01019d0:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01019d3:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01019d7:	84 c0                	test   %al,%al
c01019d9:	0f 84 f7 01 00 00    	je     c0101bd6 <ide_init+0x2e1>
c01019df:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019e3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019ea:	00 
c01019eb:	89 04 24             	mov    %eax,(%esp)
c01019ee:	e8 a8 fe ff ff       	call   c010189b <ide_wait_ready>
c01019f3:	85 c0                	test   %eax,%eax
c01019f5:	0f 85 db 01 00 00    	jne    c0101bd6 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c01019fb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019ff:	c1 e0 03             	shl    $0x3,%eax
c0101a02:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a09:	29 c2                	sub    %eax,%edx
c0101a0b:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101a11:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a14:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a18:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101a1b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a21:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101a24:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a2b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101a2e:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101a31:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101a34:	89 cb                	mov    %ecx,%ebx
c0101a36:	89 df                	mov    %ebx,%edi
c0101a38:	89 c1                	mov    %eax,%ecx
c0101a3a:	fc                   	cld    
c0101a3b:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a3d:	89 c8                	mov    %ecx,%eax
c0101a3f:	89 fb                	mov    %edi,%ebx
c0101a41:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101a44:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a47:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a53:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a59:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a5f:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a64:	85 c0                	test   %eax,%eax
c0101a66:	74 0e                	je     c0101a76 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a6b:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a71:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101a74:	eb 09                	jmp    c0101a7f <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a79:	8b 40 78             	mov    0x78(%eax),%eax
c0101a7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a7f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a83:	c1 e0 03             	shl    $0x3,%eax
c0101a86:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a8d:	29 c2                	sub    %eax,%edx
c0101a8f:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101a95:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a98:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101a9b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a9f:	c1 e0 03             	shl    $0x3,%eax
c0101aa2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aa9:	29 c2                	sub    %eax,%edx
c0101aab:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101ab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101ab4:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101ab7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aba:	83 c0 62             	add    $0x62,%eax
c0101abd:	0f b7 00             	movzwl (%eax),%eax
c0101ac0:	0f b7 c0             	movzwl %ax,%eax
c0101ac3:	25 00 02 00 00       	and    $0x200,%eax
c0101ac8:	85 c0                	test   %eax,%eax
c0101aca:	75 24                	jne    c0101af0 <ide_init+0x1fb>
c0101acc:	c7 44 24 0c 04 59 11 	movl   $0xc0115904,0xc(%esp)
c0101ad3:	c0 
c0101ad4:	c7 44 24 08 47 59 11 	movl   $0xc0115947,0x8(%esp)
c0101adb:	c0 
c0101adc:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101ae3:	00 
c0101ae4:	c7 04 24 5c 59 11 c0 	movl   $0xc011595c,(%esp)
c0101aeb:	e8 c4 f3 ff ff       	call   c0100eb4 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101af0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101af4:	c1 e0 03             	shl    $0x3,%eax
c0101af7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101afe:	29 c2                	sub    %eax,%edx
c0101b00:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101b06:	83 c0 0c             	add    $0xc,%eax
c0101b09:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101b0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b0f:	83 c0 36             	add    $0x36,%eax
c0101b12:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101b15:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b1c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101b23:	eb 34                	jmp    c0101b59 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b28:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b2b:	01 c2                	add    %eax,%edx
c0101b2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b30:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b33:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b36:	01 c8                	add    %ecx,%eax
c0101b38:	0f b6 00             	movzbl (%eax),%eax
c0101b3b:	88 02                	mov    %al,(%edx)
c0101b3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b40:	8d 50 01             	lea    0x1(%eax),%edx
c0101b43:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b46:	01 c2                	add    %eax,%edx
c0101b48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b4b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101b4e:	01 c8                	add    %ecx,%eax
c0101b50:	0f b6 00             	movzbl (%eax),%eax
c0101b53:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b55:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101b59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b5c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101b5f:	72 c4                	jb     c0101b25 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b64:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b67:	01 d0                	add    %edx,%eax
c0101b69:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b6f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101b72:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101b75:	85 c0                	test   %eax,%eax
c0101b77:	74 0f                	je     c0101b88 <ide_init+0x293>
c0101b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b7c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b7f:	01 d0                	add    %edx,%eax
c0101b81:	0f b6 00             	movzbl (%eax),%eax
c0101b84:	3c 20                	cmp    $0x20,%al
c0101b86:	74 d9                	je     c0101b61 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b88:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b8c:	c1 e0 03             	shl    $0x3,%eax
c0101b8f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b96:	29 c2                	sub    %eax,%edx
c0101b98:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101b9e:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101ba1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ba5:	c1 e0 03             	shl    $0x3,%eax
c0101ba8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101baf:	29 c2                	sub    %eax,%edx
c0101bb1:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bb7:	8b 50 08             	mov    0x8(%eax),%edx
c0101bba:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bbe:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bc2:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101bc6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bca:	c7 04 24 6e 59 11 c0 	movl   $0xc011596e,(%esp)
c0101bd1:	e8 8f e7 ff ff       	call   c0100365 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101bd6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bda:	83 c0 01             	add    $0x1,%eax
c0101bdd:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101be1:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101be6:	0f 86 1f fd ff ff    	jbe    c010190b <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101bec:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101bf3:	e8 7c 05 00 00       	call   c0102174 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101bf8:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101bff:	e8 70 05 00 00       	call   c0102174 <pic_enable>
}
c0101c04:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101c0a:	5b                   	pop    %ebx
c0101c0b:	5f                   	pop    %edi
c0101c0c:	5d                   	pop    %ebp
c0101c0d:	c3                   	ret    

c0101c0e <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c0e:	55                   	push   %ebp
c0101c0f:	89 e5                	mov    %esp,%ebp
c0101c11:	83 ec 04             	sub    $0x4,%esp
c0101c14:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c17:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c1b:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c20:	77 24                	ja     c0101c46 <ide_device_valid+0x38>
c0101c22:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c26:	c1 e0 03             	shl    $0x3,%eax
c0101c29:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c30:	29 c2                	sub    %eax,%edx
c0101c32:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c38:	0f b6 00             	movzbl (%eax),%eax
c0101c3b:	84 c0                	test   %al,%al
c0101c3d:	74 07                	je     c0101c46 <ide_device_valid+0x38>
c0101c3f:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c44:	eb 05                	jmp    c0101c4b <ide_device_valid+0x3d>
c0101c46:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c4b:	c9                   	leave  
c0101c4c:	c3                   	ret    

c0101c4d <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c4d:	55                   	push   %ebp
c0101c4e:	89 e5                	mov    %esp,%ebp
c0101c50:	83 ec 08             	sub    $0x8,%esp
c0101c53:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c56:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c5a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c5e:	89 04 24             	mov    %eax,(%esp)
c0101c61:	e8 a8 ff ff ff       	call   c0101c0e <ide_device_valid>
c0101c66:	85 c0                	test   %eax,%eax
c0101c68:	74 1b                	je     c0101c85 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c6a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c6e:	c1 e0 03             	shl    $0x3,%eax
c0101c71:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c78:	29 c2                	sub    %eax,%edx
c0101c7a:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c80:	8b 40 08             	mov    0x8(%eax),%eax
c0101c83:	eb 05                	jmp    c0101c8a <ide_device_size+0x3d>
    }
    return 0;
c0101c85:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c8a:	c9                   	leave  
c0101c8b:	c3                   	ret    

c0101c8c <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101c8c:	55                   	push   %ebp
c0101c8d:	89 e5                	mov    %esp,%ebp
c0101c8f:	57                   	push   %edi
c0101c90:	53                   	push   %ebx
c0101c91:	83 ec 50             	sub    $0x50,%esp
c0101c94:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c97:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101c9b:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101ca2:	77 24                	ja     c0101cc8 <ide_read_secs+0x3c>
c0101ca4:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101ca9:	77 1d                	ja     c0101cc8 <ide_read_secs+0x3c>
c0101cab:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101caf:	c1 e0 03             	shl    $0x3,%eax
c0101cb2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101cb9:	29 c2                	sub    %eax,%edx
c0101cbb:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101cc1:	0f b6 00             	movzbl (%eax),%eax
c0101cc4:	84 c0                	test   %al,%al
c0101cc6:	75 24                	jne    c0101cec <ide_read_secs+0x60>
c0101cc8:	c7 44 24 0c 8c 59 11 	movl   $0xc011598c,0xc(%esp)
c0101ccf:	c0 
c0101cd0:	c7 44 24 08 47 59 11 	movl   $0xc0115947,0x8(%esp)
c0101cd7:	c0 
c0101cd8:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101cdf:	00 
c0101ce0:	c7 04 24 5c 59 11 c0 	movl   $0xc011595c,(%esp)
c0101ce7:	e8 c8 f1 ff ff       	call   c0100eb4 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101cec:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101cf3:	77 0f                	ja     c0101d04 <ide_read_secs+0x78>
c0101cf5:	8b 45 14             	mov    0x14(%ebp),%eax
c0101cf8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101cfb:	01 d0                	add    %edx,%eax
c0101cfd:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101d02:	76 24                	jbe    c0101d28 <ide_read_secs+0x9c>
c0101d04:	c7 44 24 0c b4 59 11 	movl   $0xc01159b4,0xc(%esp)
c0101d0b:	c0 
c0101d0c:	c7 44 24 08 47 59 11 	movl   $0xc0115947,0x8(%esp)
c0101d13:	c0 
c0101d14:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101d1b:	00 
c0101d1c:	c7 04 24 5c 59 11 c0 	movl   $0xc011595c,(%esp)
c0101d23:	e8 8c f1 ff ff       	call   c0100eb4 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d28:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d2c:	66 d1 e8             	shr    %ax
c0101d2f:	0f b7 c0             	movzwl %ax,%eax
c0101d32:	0f b7 04 85 fc 58 11 	movzwl -0x3feea704(,%eax,4),%eax
c0101d39:	c0 
c0101d3a:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101d3e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d42:	66 d1 e8             	shr    %ax
c0101d45:	0f b7 c0             	movzwl %ax,%eax
c0101d48:	0f b7 04 85 fe 58 11 	movzwl -0x3feea702(,%eax,4),%eax
c0101d4f:	c0 
c0101d50:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101d54:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d58:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d5f:	00 
c0101d60:	89 04 24             	mov    %eax,(%esp)
c0101d63:	e8 33 fb ff ff       	call   c010189b <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d68:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d6c:	83 c0 02             	add    $0x2,%eax
c0101d6f:	0f b7 c0             	movzwl %ax,%eax
c0101d72:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101d76:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d7a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101d7e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101d82:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101d83:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d86:	0f b6 c0             	movzbl %al,%eax
c0101d89:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d8d:	83 c2 02             	add    $0x2,%edx
c0101d90:	0f b7 d2             	movzwl %dx,%edx
c0101d93:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101d97:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101d9a:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101d9e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101da2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101da3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101da6:	0f b6 c0             	movzbl %al,%eax
c0101da9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dad:	83 c2 03             	add    $0x3,%edx
c0101db0:	0f b7 d2             	movzwl %dx,%edx
c0101db3:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101db7:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101dba:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101dbe:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101dc2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101dc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dc6:	c1 e8 08             	shr    $0x8,%eax
c0101dc9:	0f b6 c0             	movzbl %al,%eax
c0101dcc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dd0:	83 c2 04             	add    $0x4,%edx
c0101dd3:	0f b7 d2             	movzwl %dx,%edx
c0101dd6:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101dda:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101ddd:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101de1:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101de5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101de6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101de9:	c1 e8 10             	shr    $0x10,%eax
c0101dec:	0f b6 c0             	movzbl %al,%eax
c0101def:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101df3:	83 c2 05             	add    $0x5,%edx
c0101df6:	0f b7 d2             	movzwl %dx,%edx
c0101df9:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101dfd:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101e00:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e04:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e08:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e09:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e0d:	83 e0 01             	and    $0x1,%eax
c0101e10:	c1 e0 04             	shl    $0x4,%eax
c0101e13:	89 c2                	mov    %eax,%edx
c0101e15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e18:	c1 e8 18             	shr    $0x18,%eax
c0101e1b:	83 e0 0f             	and    $0xf,%eax
c0101e1e:	09 d0                	or     %edx,%eax
c0101e20:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e23:	0f b6 c0             	movzbl %al,%eax
c0101e26:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e2a:	83 c2 06             	add    $0x6,%edx
c0101e2d:	0f b7 d2             	movzwl %dx,%edx
c0101e30:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e34:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e37:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e3b:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e3f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e40:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e44:	83 c0 07             	add    $0x7,%eax
c0101e47:	0f b7 c0             	movzwl %ax,%eax
c0101e4a:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101e4e:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101e52:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e56:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e5a:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e62:	eb 5a                	jmp    c0101ebe <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e64:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e68:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e6f:	00 
c0101e70:	89 04 24             	mov    %eax,(%esp)
c0101e73:	e8 23 fa ff ff       	call   c010189b <ide_wait_ready>
c0101e78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101e7f:	74 02                	je     c0101e83 <ide_read_secs+0x1f7>
            goto out;
c0101e81:	eb 41                	jmp    c0101ec4 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e83:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e87:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101e8a:	8b 45 10             	mov    0x10(%ebp),%eax
c0101e8d:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101e90:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101e97:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101e9a:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101e9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ea0:	89 cb                	mov    %ecx,%ebx
c0101ea2:	89 df                	mov    %ebx,%edi
c0101ea4:	89 c1                	mov    %eax,%ecx
c0101ea6:	fc                   	cld    
c0101ea7:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101ea9:	89 c8                	mov    %ecx,%eax
c0101eab:	89 fb                	mov    %edi,%ebx
c0101ead:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101eb0:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101eb3:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101eb7:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ebe:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101ec2:	75 a0                	jne    c0101e64 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ec7:	83 c4 50             	add    $0x50,%esp
c0101eca:	5b                   	pop    %ebx
c0101ecb:	5f                   	pop    %edi
c0101ecc:	5d                   	pop    %ebp
c0101ecd:	c3                   	ret    

c0101ece <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101ece:	55                   	push   %ebp
c0101ecf:	89 e5                	mov    %esp,%ebp
c0101ed1:	56                   	push   %esi
c0101ed2:	53                   	push   %ebx
c0101ed3:	83 ec 50             	sub    $0x50,%esp
c0101ed6:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ed9:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101edd:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101ee4:	77 24                	ja     c0101f0a <ide_write_secs+0x3c>
c0101ee6:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101eeb:	77 1d                	ja     c0101f0a <ide_write_secs+0x3c>
c0101eed:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ef1:	c1 e0 03             	shl    $0x3,%eax
c0101ef4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101efb:	29 c2                	sub    %eax,%edx
c0101efd:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101f03:	0f b6 00             	movzbl (%eax),%eax
c0101f06:	84 c0                	test   %al,%al
c0101f08:	75 24                	jne    c0101f2e <ide_write_secs+0x60>
c0101f0a:	c7 44 24 0c 8c 59 11 	movl   $0xc011598c,0xc(%esp)
c0101f11:	c0 
c0101f12:	c7 44 24 08 47 59 11 	movl   $0xc0115947,0x8(%esp)
c0101f19:	c0 
c0101f1a:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101f21:	00 
c0101f22:	c7 04 24 5c 59 11 c0 	movl   $0xc011595c,(%esp)
c0101f29:	e8 86 ef ff ff       	call   c0100eb4 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f2e:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f35:	77 0f                	ja     c0101f46 <ide_write_secs+0x78>
c0101f37:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f3d:	01 d0                	add    %edx,%eax
c0101f3f:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f44:	76 24                	jbe    c0101f6a <ide_write_secs+0x9c>
c0101f46:	c7 44 24 0c b4 59 11 	movl   $0xc01159b4,0xc(%esp)
c0101f4d:	c0 
c0101f4e:	c7 44 24 08 47 59 11 	movl   $0xc0115947,0x8(%esp)
c0101f55:	c0 
c0101f56:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f5d:	00 
c0101f5e:	c7 04 24 5c 59 11 c0 	movl   $0xc011595c,(%esp)
c0101f65:	e8 4a ef ff ff       	call   c0100eb4 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f6a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f6e:	66 d1 e8             	shr    %ax
c0101f71:	0f b7 c0             	movzwl %ax,%eax
c0101f74:	0f b7 04 85 fc 58 11 	movzwl -0x3feea704(,%eax,4),%eax
c0101f7b:	c0 
c0101f7c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f80:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f84:	66 d1 e8             	shr    %ax
c0101f87:	0f b7 c0             	movzwl %ax,%eax
c0101f8a:	0f b7 04 85 fe 58 11 	movzwl -0x3feea702(,%eax,4),%eax
c0101f91:	c0 
c0101f92:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101f96:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101f9a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fa1:	00 
c0101fa2:	89 04 24             	mov    %eax,(%esp)
c0101fa5:	e8 f1 f8 ff ff       	call   c010189b <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101faa:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101fae:	83 c0 02             	add    $0x2,%eax
c0101fb1:	0f b7 c0             	movzwl %ax,%eax
c0101fb4:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101fb8:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fbc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101fc0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fc4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101fc5:	8b 45 14             	mov    0x14(%ebp),%eax
c0101fc8:	0f b6 c0             	movzbl %al,%eax
c0101fcb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fcf:	83 c2 02             	add    $0x2,%edx
c0101fd2:	0f b7 d2             	movzwl %dx,%edx
c0101fd5:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101fd9:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101fdc:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101fe0:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101fe4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101fe5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fe8:	0f b6 c0             	movzbl %al,%eax
c0101feb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fef:	83 c2 03             	add    $0x3,%edx
c0101ff2:	0f b7 d2             	movzwl %dx,%edx
c0101ff5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101ff9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101ffc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102000:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102004:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102005:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102008:	c1 e8 08             	shr    $0x8,%eax
c010200b:	0f b6 c0             	movzbl %al,%eax
c010200e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102012:	83 c2 04             	add    $0x4,%edx
c0102015:	0f b7 d2             	movzwl %dx,%edx
c0102018:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c010201c:	88 45 e1             	mov    %al,-0x1f(%ebp)
c010201f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102023:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102027:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0102028:	8b 45 0c             	mov    0xc(%ebp),%eax
c010202b:	c1 e8 10             	shr    $0x10,%eax
c010202e:	0f b6 c0             	movzbl %al,%eax
c0102031:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102035:	83 c2 05             	add    $0x5,%edx
c0102038:	0f b7 d2             	movzwl %dx,%edx
c010203b:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010203f:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102042:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102046:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010204a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010204b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010204f:	83 e0 01             	and    $0x1,%eax
c0102052:	c1 e0 04             	shl    $0x4,%eax
c0102055:	89 c2                	mov    %eax,%edx
c0102057:	8b 45 0c             	mov    0xc(%ebp),%eax
c010205a:	c1 e8 18             	shr    $0x18,%eax
c010205d:	83 e0 0f             	and    $0xf,%eax
c0102060:	09 d0                	or     %edx,%eax
c0102062:	83 c8 e0             	or     $0xffffffe0,%eax
c0102065:	0f b6 c0             	movzbl %al,%eax
c0102068:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010206c:	83 c2 06             	add    $0x6,%edx
c010206f:	0f b7 d2             	movzwl %dx,%edx
c0102072:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0102076:	88 45 d9             	mov    %al,-0x27(%ebp)
c0102079:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010207d:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102081:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102082:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102086:	83 c0 07             	add    $0x7,%eax
c0102089:	0f b7 c0             	movzwl %ax,%eax
c010208c:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0102090:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0102094:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102098:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010209c:	ee                   	out    %al,(%dx)

    int ret = 0;
c010209d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020a4:	eb 5a                	jmp    c0102100 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020a6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020aa:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020b1:	00 
c01020b2:	89 04 24             	mov    %eax,(%esp)
c01020b5:	e8 e1 f7 ff ff       	call   c010189b <ide_wait_ready>
c01020ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020c1:	74 02                	je     c01020c5 <ide_write_secs+0x1f7>
            goto out;
c01020c3:	eb 41                	jmp    c0102106 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01020c5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01020cc:	8b 45 10             	mov    0x10(%ebp),%eax
c01020cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020d2:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01020d9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01020dc:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01020df:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01020e2:	89 cb                	mov    %ecx,%ebx
c01020e4:	89 de                	mov    %ebx,%esi
c01020e6:	89 c1                	mov    %eax,%ecx
c01020e8:	fc                   	cld    
c01020e9:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01020eb:	89 c8                	mov    %ecx,%eax
c01020ed:	89 f3                	mov    %esi,%ebx
c01020ef:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c01020f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020f5:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01020f9:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102100:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102104:	75 a0                	jne    c01020a6 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102106:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102109:	83 c4 50             	add    $0x50,%esp
c010210c:	5b                   	pop    %ebx
c010210d:	5e                   	pop    %esi
c010210e:	5d                   	pop    %ebp
c010210f:	c3                   	ret    

c0102110 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102110:	55                   	push   %ebp
c0102111:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102113:	fb                   	sti    
    sti();
}
c0102114:	5d                   	pop    %ebp
c0102115:	c3                   	ret    

c0102116 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102116:	55                   	push   %ebp
c0102117:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0102119:	fa                   	cli    
    cli();
}
c010211a:	5d                   	pop    %ebp
c010211b:	c3                   	ret    

c010211c <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c010211c:	55                   	push   %ebp
c010211d:	89 e5                	mov    %esp,%ebp
c010211f:	83 ec 14             	sub    $0x14,%esp
c0102122:	8b 45 08             	mov    0x8(%ebp),%eax
c0102125:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102129:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010212d:	66 a3 70 e5 14 c0    	mov    %ax,0xc014e570
    if (did_init) {
c0102133:	a1 40 f6 14 c0       	mov    0xc014f640,%eax
c0102138:	85 c0                	test   %eax,%eax
c010213a:	74 36                	je     c0102172 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010213c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102140:	0f b6 c0             	movzbl %al,%eax
c0102143:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102149:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010214c:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102150:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102154:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102155:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102159:	66 c1 e8 08          	shr    $0x8,%ax
c010215d:	0f b6 c0             	movzbl %al,%eax
c0102160:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102166:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102169:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010216d:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102171:	ee                   	out    %al,(%dx)
    }
}
c0102172:	c9                   	leave  
c0102173:	c3                   	ret    

c0102174 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102174:	55                   	push   %ebp
c0102175:	89 e5                	mov    %esp,%ebp
c0102177:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010217a:	8b 45 08             	mov    0x8(%ebp),%eax
c010217d:	ba 01 00 00 00       	mov    $0x1,%edx
c0102182:	89 c1                	mov    %eax,%ecx
c0102184:	d3 e2                	shl    %cl,%edx
c0102186:	89 d0                	mov    %edx,%eax
c0102188:	f7 d0                	not    %eax
c010218a:	89 c2                	mov    %eax,%edx
c010218c:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c0102193:	21 d0                	and    %edx,%eax
c0102195:	0f b7 c0             	movzwl %ax,%eax
c0102198:	89 04 24             	mov    %eax,(%esp)
c010219b:	e8 7c ff ff ff       	call   c010211c <pic_setmask>
}
c01021a0:	c9                   	leave  
c01021a1:	c3                   	ret    

c01021a2 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021a2:	55                   	push   %ebp
c01021a3:	89 e5                	mov    %esp,%ebp
c01021a5:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021a8:	c7 05 40 f6 14 c0 01 	movl   $0x1,0xc014f640
c01021af:	00 00 00 
c01021b2:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021b8:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021bc:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021c0:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021c4:	ee                   	out    %al,(%dx)
c01021c5:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021cb:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021cf:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021d3:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021d7:	ee                   	out    %al,(%dx)
c01021d8:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01021de:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01021e2:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01021e6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021ea:	ee                   	out    %al,(%dx)
c01021eb:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c01021f1:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c01021f5:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01021f9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01021fd:	ee                   	out    %al,(%dx)
c01021fe:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102204:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102208:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010220c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102210:	ee                   	out    %al,(%dx)
c0102211:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102217:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c010221b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010221f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102223:	ee                   	out    %al,(%dx)
c0102224:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010222a:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c010222e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102232:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102236:	ee                   	out    %al,(%dx)
c0102237:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c010223d:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102241:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102245:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102249:	ee                   	out    %al,(%dx)
c010224a:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102250:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102254:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102258:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010225c:	ee                   	out    %al,(%dx)
c010225d:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102263:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102267:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010226b:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010226f:	ee                   	out    %al,(%dx)
c0102270:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102276:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c010227a:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010227e:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102282:	ee                   	out    %al,(%dx)
c0102283:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0102289:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c010228d:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0102291:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0102295:	ee                   	out    %al,(%dx)
c0102296:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c010229c:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022a0:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022a4:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022a8:	ee                   	out    %al,(%dx)
c01022a9:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022af:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022b3:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022b7:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022bb:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022bc:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022c3:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022c7:	74 12                	je     c01022db <pic_init+0x139>
        pic_setmask(irq_mask);
c01022c9:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022d0:	0f b7 c0             	movzwl %ax,%eax
c01022d3:	89 04 24             	mov    %eax,(%esp)
c01022d6:	e8 41 fe ff ff       	call   c010211c <pic_setmask>
    }
}
c01022db:	c9                   	leave  
c01022dc:	c3                   	ret    

c01022dd <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022dd:	55                   	push   %ebp
c01022de:	89 e5                	mov    %esp,%ebp
c01022e0:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022e3:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01022ea:	00 
c01022eb:	c7 04 24 00 5a 11 c0 	movl   $0xc0115a00,(%esp)
c01022f2:	e8 6e e0 ff ff       	call   c0100365 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01022f7:	c7 04 24 0a 5a 11 c0 	movl   $0xc0115a0a,(%esp)
c01022fe:	e8 62 e0 ff ff       	call   c0100365 <cprintf>
    panic("EOT: kernel seems ok.");
c0102303:	c7 44 24 08 18 5a 11 	movl   $0xc0115a18,0x8(%esp)
c010230a:	c0 
c010230b:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0102312:	00 
c0102313:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c010231a:	e8 95 eb ff ff       	call   c0100eb4 <__panic>

c010231f <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c010231f:	55                   	push   %ebp
c0102320:	89 e5                	mov    %esp,%ebp
c0102322:	83 ec 10             	sub    $0x10,%esp
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
  extern uintptr_t __vectors[];  //中断处理的入口地址数组
  int address;
  //ＳETGATE的参数为向量的首地址、系统特权级、段选择子、偏移地址和DPL
    for (address = 0; address < 256; address++) {
c0102325:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010232c:	e9 c3 00 00 00       	jmp    c01023f4 <idt_init+0xd5>
        SETGATE(idt[address], 0, GD_KTEXT, __vectors[address], 0); 
c0102331:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102334:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c010233b:	89 c2                	mov    %eax,%edx
c010233d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102340:	66 89 14 c5 60 f6 14 	mov    %dx,-0x3feb09a0(,%eax,8)
c0102347:	c0 
c0102348:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010234b:	66 c7 04 c5 62 f6 14 	movw   $0x8,-0x3feb099e(,%eax,8)
c0102352:	c0 08 00 
c0102355:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102358:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c010235f:	c0 
c0102360:	83 e2 e0             	and    $0xffffffe0,%edx
c0102363:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c010236a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010236d:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c0102374:	c0 
c0102375:	83 e2 1f             	and    $0x1f,%edx
c0102378:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c010237f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102382:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c0102389:	c0 
c010238a:	83 e2 f0             	and    $0xfffffff0,%edx
c010238d:	83 ca 0e             	or     $0xe,%edx
c0102390:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c0102397:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010239a:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023a1:	c0 
c01023a2:	83 e2 ef             	and    $0xffffffef,%edx
c01023a5:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023af:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023b6:	c0 
c01023b7:	83 e2 9f             	and    $0xffffff9f,%edx
c01023ba:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c4:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023cb:	c0 
c01023cc:	83 ca 80             	or     $0xffffff80,%edx
c01023cf:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d9:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c01023e0:	c1 e8 10             	shr    $0x10,%eax
c01023e3:	89 c2                	mov    %eax,%edx
c01023e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023e8:	66 89 14 c5 66 f6 14 	mov    %dx,-0x3feb099a(,%eax,8)
c01023ef:	c0 
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
  extern uintptr_t __vectors[];  //中断处理的入口地址数组
  int address;
  //ＳETGATE的参数为向量的首地址、系统特权级、段选择子、偏移地址和DPL
    for (address = 0; address < 256; address++) {
c01023f0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01023f4:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01023fb:	0f 8e 30 ff ff ff    	jle    c0102331 <idt_init+0x12>
        SETGATE(idt[address], 0, GD_KTEXT, __vectors[address], 0); 
    }
        
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102401:	a1 00 e8 14 c0       	mov    0xc014e800,%eax
c0102406:	66 a3 60 fa 14 c0    	mov    %ax,0xc014fa60
c010240c:	66 c7 05 62 fa 14 c0 	movw   $0x8,0xc014fa62
c0102413:	08 00 
c0102415:	0f b6 05 64 fa 14 c0 	movzbl 0xc014fa64,%eax
c010241c:	83 e0 e0             	and    $0xffffffe0,%eax
c010241f:	a2 64 fa 14 c0       	mov    %al,0xc014fa64
c0102424:	0f b6 05 64 fa 14 c0 	movzbl 0xc014fa64,%eax
c010242b:	83 e0 1f             	and    $0x1f,%eax
c010242e:	a2 64 fa 14 c0       	mov    %al,0xc014fa64
c0102433:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c010243a:	83 c8 0f             	or     $0xf,%eax
c010243d:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102442:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102449:	83 e0 ef             	and    $0xffffffef,%eax
c010244c:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102451:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102458:	83 c8 60             	or     $0x60,%eax
c010245b:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102460:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102467:	83 c8 80             	or     $0xffffff80,%eax
c010246a:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c010246f:	a1 00 e8 14 c0       	mov    0xc014e800,%eax
c0102474:	c1 e8 10             	shr    $0x10,%eax
c0102477:	66 a3 66 fa 14 c0    	mov    %ax,0xc014fa66
c010247d:	c7 45 f8 80 e5 14 c0 	movl   $0xc014e580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102484:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102487:	0f 01 18             	lidtl  (%eax)

    lidt(&idt_pd);  //lidt指令将IDT的起始地址存进ＩＤＴＲ寄存器中
}
c010248a:	c9                   	leave  
c010248b:	c3                   	ret    

c010248c <trapname>:

static const char *
trapname(int trapno) {
c010248c:	55                   	push   %ebp
c010248d:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010248f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102492:	83 f8 13             	cmp    $0x13,%eax
c0102495:	77 0c                	ja     c01024a3 <trapname+0x17>
        return excnames[trapno];
c0102497:	8b 45 08             	mov    0x8(%ebp),%eax
c010249a:	8b 04 85 a0 5e 11 c0 	mov    -0x3feea160(,%eax,4),%eax
c01024a1:	eb 18                	jmp    c01024bb <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01024a3:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01024a7:	7e 0d                	jle    c01024b6 <trapname+0x2a>
c01024a9:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01024ad:	7f 07                	jg     c01024b6 <trapname+0x2a>
        return "Hardware Interrupt";
c01024af:	b8 3f 5a 11 c0       	mov    $0xc0115a3f,%eax
c01024b4:	eb 05                	jmp    c01024bb <trapname+0x2f>
    }
    return "(unknown trap)";
c01024b6:	b8 52 5a 11 c0       	mov    $0xc0115a52,%eax
}
c01024bb:	5d                   	pop    %ebp
c01024bc:	c3                   	ret    

c01024bd <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024bd:	55                   	push   %ebp
c01024be:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01024c3:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024c7:	66 83 f8 08          	cmp    $0x8,%ax
c01024cb:	0f 94 c0             	sete   %al
c01024ce:	0f b6 c0             	movzbl %al,%eax
}
c01024d1:	5d                   	pop    %ebp
c01024d2:	c3                   	ret    

c01024d3 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024d3:	55                   	push   %ebp
c01024d4:	89 e5                	mov    %esp,%ebp
c01024d6:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01024dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024e0:	c7 04 24 93 5a 11 c0 	movl   $0xc0115a93,(%esp)
c01024e7:	e8 79 de ff ff       	call   c0100365 <cprintf>
    print_regs(&tf->tf_regs);
c01024ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ef:	89 04 24             	mov    %eax,(%esp)
c01024f2:	e8 a1 01 00 00       	call   c0102698 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fa:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01024fe:	0f b7 c0             	movzwl %ax,%eax
c0102501:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102505:	c7 04 24 a4 5a 11 c0 	movl   $0xc0115aa4,(%esp)
c010250c:	e8 54 de ff ff       	call   c0100365 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102511:	8b 45 08             	mov    0x8(%ebp),%eax
c0102514:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102518:	0f b7 c0             	movzwl %ax,%eax
c010251b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010251f:	c7 04 24 b7 5a 11 c0 	movl   $0xc0115ab7,(%esp)
c0102526:	e8 3a de ff ff       	call   c0100365 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010252b:	8b 45 08             	mov    0x8(%ebp),%eax
c010252e:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102532:	0f b7 c0             	movzwl %ax,%eax
c0102535:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102539:	c7 04 24 ca 5a 11 c0 	movl   $0xc0115aca,(%esp)
c0102540:	e8 20 de ff ff       	call   c0100365 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102545:	8b 45 08             	mov    0x8(%ebp),%eax
c0102548:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010254c:	0f b7 c0             	movzwl %ax,%eax
c010254f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102553:	c7 04 24 dd 5a 11 c0 	movl   $0xc0115add,(%esp)
c010255a:	e8 06 de ff ff       	call   c0100365 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010255f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102562:	8b 40 30             	mov    0x30(%eax),%eax
c0102565:	89 04 24             	mov    %eax,(%esp)
c0102568:	e8 1f ff ff ff       	call   c010248c <trapname>
c010256d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102570:	8b 52 30             	mov    0x30(%edx),%edx
c0102573:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102577:	89 54 24 04          	mov    %edx,0x4(%esp)
c010257b:	c7 04 24 f0 5a 11 c0 	movl   $0xc0115af0,(%esp)
c0102582:	e8 de dd ff ff       	call   c0100365 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102587:	8b 45 08             	mov    0x8(%ebp),%eax
c010258a:	8b 40 34             	mov    0x34(%eax),%eax
c010258d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102591:	c7 04 24 02 5b 11 c0 	movl   $0xc0115b02,(%esp)
c0102598:	e8 c8 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010259d:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a0:	8b 40 38             	mov    0x38(%eax),%eax
c01025a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025a7:	c7 04 24 11 5b 11 c0 	movl   $0xc0115b11,(%esp)
c01025ae:	e8 b2 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b6:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025ba:	0f b7 c0             	movzwl %ax,%eax
c01025bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025c1:	c7 04 24 20 5b 11 c0 	movl   $0xc0115b20,(%esp)
c01025c8:	e8 98 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d0:	8b 40 40             	mov    0x40(%eax),%eax
c01025d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d7:	c7 04 24 33 5b 11 c0 	movl   $0xc0115b33,(%esp)
c01025de:	e8 82 dd ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025ea:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025f1:	eb 3e                	jmp    c0102631 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f6:	8b 50 40             	mov    0x40(%eax),%edx
c01025f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025fc:	21 d0                	and    %edx,%eax
c01025fe:	85 c0                	test   %eax,%eax
c0102600:	74 28                	je     c010262a <print_trapframe+0x157>
c0102602:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102605:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c010260c:	85 c0                	test   %eax,%eax
c010260e:	74 1a                	je     c010262a <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102610:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102613:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c010261a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010261e:	c7 04 24 42 5b 11 c0 	movl   $0xc0115b42,(%esp)
c0102625:	e8 3b dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010262a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010262e:	d1 65 f0             	shll   -0x10(%ebp)
c0102631:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102634:	83 f8 17             	cmp    $0x17,%eax
c0102637:	76 ba                	jbe    c01025f3 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102639:	8b 45 08             	mov    0x8(%ebp),%eax
c010263c:	8b 40 40             	mov    0x40(%eax),%eax
c010263f:	25 00 30 00 00       	and    $0x3000,%eax
c0102644:	c1 e8 0c             	shr    $0xc,%eax
c0102647:	89 44 24 04          	mov    %eax,0x4(%esp)
c010264b:	c7 04 24 46 5b 11 c0 	movl   $0xc0115b46,(%esp)
c0102652:	e8 0e dd ff ff       	call   c0100365 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102657:	8b 45 08             	mov    0x8(%ebp),%eax
c010265a:	89 04 24             	mov    %eax,(%esp)
c010265d:	e8 5b fe ff ff       	call   c01024bd <trap_in_kernel>
c0102662:	85 c0                	test   %eax,%eax
c0102664:	75 30                	jne    c0102696 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102666:	8b 45 08             	mov    0x8(%ebp),%eax
c0102669:	8b 40 44             	mov    0x44(%eax),%eax
c010266c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102670:	c7 04 24 4f 5b 11 c0 	movl   $0xc0115b4f,(%esp)
c0102677:	e8 e9 dc ff ff       	call   c0100365 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010267c:	8b 45 08             	mov    0x8(%ebp),%eax
c010267f:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102683:	0f b7 c0             	movzwl %ax,%eax
c0102686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010268a:	c7 04 24 5e 5b 11 c0 	movl   $0xc0115b5e,(%esp)
c0102691:	e8 cf dc ff ff       	call   c0100365 <cprintf>
    }
}
c0102696:	c9                   	leave  
c0102697:	c3                   	ret    

c0102698 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102698:	55                   	push   %ebp
c0102699:	89 e5                	mov    %esp,%ebp
c010269b:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c010269e:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a1:	8b 00                	mov    (%eax),%eax
c01026a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026a7:	c7 04 24 71 5b 11 c0 	movl   $0xc0115b71,(%esp)
c01026ae:	e8 b2 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b6:	8b 40 04             	mov    0x4(%eax),%eax
c01026b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026bd:	c7 04 24 80 5b 11 c0 	movl   $0xc0115b80,(%esp)
c01026c4:	e8 9c dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01026cc:	8b 40 08             	mov    0x8(%eax),%eax
c01026cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026d3:	c7 04 24 8f 5b 11 c0 	movl   $0xc0115b8f,(%esp)
c01026da:	e8 86 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026df:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e2:	8b 40 0c             	mov    0xc(%eax),%eax
c01026e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026e9:	c7 04 24 9e 5b 11 c0 	movl   $0xc0115b9e,(%esp)
c01026f0:	e8 70 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f8:	8b 40 10             	mov    0x10(%eax),%eax
c01026fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ff:	c7 04 24 ad 5b 11 c0 	movl   $0xc0115bad,(%esp)
c0102706:	e8 5a dc ff ff       	call   c0100365 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c010270b:	8b 45 08             	mov    0x8(%ebp),%eax
c010270e:	8b 40 14             	mov    0x14(%eax),%eax
c0102711:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102715:	c7 04 24 bc 5b 11 c0 	movl   $0xc0115bbc,(%esp)
c010271c:	e8 44 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102721:	8b 45 08             	mov    0x8(%ebp),%eax
c0102724:	8b 40 18             	mov    0x18(%eax),%eax
c0102727:	89 44 24 04          	mov    %eax,0x4(%esp)
c010272b:	c7 04 24 cb 5b 11 c0 	movl   $0xc0115bcb,(%esp)
c0102732:	e8 2e dc ff ff       	call   c0100365 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102737:	8b 45 08             	mov    0x8(%ebp),%eax
c010273a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010273d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102741:	c7 04 24 da 5b 11 c0 	movl   $0xc0115bda,(%esp)
c0102748:	e8 18 dc ff ff       	call   c0100365 <cprintf>
}
c010274d:	c9                   	leave  
c010274e:	c3                   	ret    

c010274f <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010274f:	55                   	push   %ebp
c0102750:	89 e5                	mov    %esp,%ebp
c0102752:	53                   	push   %ebx
c0102753:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102756:	8b 45 08             	mov    0x8(%ebp),%eax
c0102759:	8b 40 34             	mov    0x34(%eax),%eax
c010275c:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010275f:	85 c0                	test   %eax,%eax
c0102761:	74 07                	je     c010276a <print_pgfault+0x1b>
c0102763:	b9 e9 5b 11 c0       	mov    $0xc0115be9,%ecx
c0102768:	eb 05                	jmp    c010276f <print_pgfault+0x20>
c010276a:	b9 fa 5b 11 c0       	mov    $0xc0115bfa,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010276f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102772:	8b 40 34             	mov    0x34(%eax),%eax
c0102775:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102778:	85 c0                	test   %eax,%eax
c010277a:	74 07                	je     c0102783 <print_pgfault+0x34>
c010277c:	ba 57 00 00 00       	mov    $0x57,%edx
c0102781:	eb 05                	jmp    c0102788 <print_pgfault+0x39>
c0102783:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102788:	8b 45 08             	mov    0x8(%ebp),%eax
c010278b:	8b 40 34             	mov    0x34(%eax),%eax
c010278e:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102791:	85 c0                	test   %eax,%eax
c0102793:	74 07                	je     c010279c <print_pgfault+0x4d>
c0102795:	b8 55 00 00 00       	mov    $0x55,%eax
c010279a:	eb 05                	jmp    c01027a1 <print_pgfault+0x52>
c010279c:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027a1:	0f 20 d3             	mov    %cr2,%ebx
c01027a4:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01027a7:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01027aa:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01027ae:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01027b2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01027b6:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01027ba:	c7 04 24 08 5c 11 c0 	movl   $0xc0115c08,(%esp)
c01027c1:	e8 9f db ff ff       	call   c0100365 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027c6:	83 c4 34             	add    $0x34,%esp
c01027c9:	5b                   	pop    %ebx
c01027ca:	5d                   	pop    %ebp
c01027cb:	c3                   	ret    

c01027cc <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027cc:	55                   	push   %ebp
c01027cd:	89 e5                	mov    %esp,%ebp
c01027cf:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027d2:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027d7:	85 c0                	test   %eax,%eax
c01027d9:	74 0b                	je     c01027e6 <pgfault_handler+0x1a>
            print_pgfault(tf);
c01027db:	8b 45 08             	mov    0x8(%ebp),%eax
c01027de:	89 04 24             	mov    %eax,(%esp)
c01027e1:	e8 69 ff ff ff       	call   c010274f <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027e6:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027eb:	85 c0                	test   %eax,%eax
c01027ed:	74 3d                	je     c010282c <pgfault_handler+0x60>
        assert(current == idleproc);
c01027ef:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c01027f5:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c01027fa:	39 c2                	cmp    %eax,%edx
c01027fc:	74 24                	je     c0102822 <pgfault_handler+0x56>
c01027fe:	c7 44 24 0c 2b 5c 11 	movl   $0xc0115c2b,0xc(%esp)
c0102805:	c0 
c0102806:	c7 44 24 08 3f 5c 11 	movl   $0xc0115c3f,0x8(%esp)
c010280d:	c0 
c010280e:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102815:	00 
c0102816:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c010281d:	e8 92 e6 ff ff       	call   c0100eb4 <__panic>
        mm = check_mm_struct;
c0102822:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0102827:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010282a:	eb 46                	jmp    c0102872 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c010282c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102831:	85 c0                	test   %eax,%eax
c0102833:	75 32                	jne    c0102867 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102835:	8b 45 08             	mov    0x8(%ebp),%eax
c0102838:	89 04 24             	mov    %eax,(%esp)
c010283b:	e8 93 fc ff ff       	call   c01024d3 <print_trapframe>
            print_pgfault(tf);
c0102840:	8b 45 08             	mov    0x8(%ebp),%eax
c0102843:	89 04 24             	mov    %eax,(%esp)
c0102846:	e8 04 ff ff ff       	call   c010274f <print_pgfault>
            panic("unhandled page fault.\n");
c010284b:	c7 44 24 08 54 5c 11 	movl   $0xc0115c54,0x8(%esp)
c0102852:	c0 
c0102853:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c010285a:	00 
c010285b:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c0102862:	e8 4d e6 ff ff       	call   c0100eb4 <__panic>
        }
        mm = current->mm;
c0102867:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010286c:	8b 40 18             	mov    0x18(%eax),%eax
c010286f:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102872:	0f 20 d0             	mov    %cr2,%eax
c0102875:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102878:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010287b:	89 c2                	mov    %eax,%edx
c010287d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102880:	8b 40 34             	mov    0x34(%eax),%eax
c0102883:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102887:	89 44 24 04          	mov    %eax,0x4(%esp)
c010288b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010288e:	89 04 24             	mov    %eax,(%esp)
c0102891:	e8 d9 64 00 00       	call   c0108d6f <do_pgfault>
}
c0102896:	c9                   	leave  
c0102897:	c3                   	ret    

c0102898 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102898:	55                   	push   %ebp
c0102899:	89 e5                	mov    %esp,%ebp
c010289b:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c010289e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01028a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01028a8:	8b 40 30             	mov    0x30(%eax),%eax
c01028ab:	83 f8 2f             	cmp    $0x2f,%eax
c01028ae:	77 38                	ja     c01028e8 <trap_dispatch+0x50>
c01028b0:	83 f8 2e             	cmp    $0x2e,%eax
c01028b3:	0f 83 cb 01 00 00    	jae    c0102a84 <trap_dispatch+0x1ec>
c01028b9:	83 f8 20             	cmp    $0x20,%eax
c01028bc:	0f 84 07 01 00 00    	je     c01029c9 <trap_dispatch+0x131>
c01028c2:	83 f8 20             	cmp    $0x20,%eax
c01028c5:	77 0a                	ja     c01028d1 <trap_dispatch+0x39>
c01028c7:	83 f8 0e             	cmp    $0xe,%eax
c01028ca:	74 3e                	je     c010290a <trap_dispatch+0x72>
c01028cc:	e9 6b 01 00 00       	jmp    c0102a3c <trap_dispatch+0x1a4>
c01028d1:	83 f8 21             	cmp    $0x21,%eax
c01028d4:	0f 84 30 01 00 00    	je     c0102a0a <trap_dispatch+0x172>
c01028da:	83 f8 24             	cmp    $0x24,%eax
c01028dd:	0f 84 27 01 00 00    	je     c0102a0a <trap_dispatch+0x172>
c01028e3:	e9 54 01 00 00       	jmp    c0102a3c <trap_dispatch+0x1a4>
c01028e8:	83 f8 78             	cmp    $0x78,%eax
c01028eb:	0f 82 4b 01 00 00    	jb     c0102a3c <trap_dispatch+0x1a4>
c01028f1:	83 f8 79             	cmp    $0x79,%eax
c01028f4:	0f 86 26 01 00 00    	jbe    c0102a20 <trap_dispatch+0x188>
c01028fa:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028ff:	0f 84 ba 00 00 00    	je     c01029bf <trap_dispatch+0x127>
c0102905:	e9 32 01 00 00       	jmp    c0102a3c <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010290a:	8b 45 08             	mov    0x8(%ebp),%eax
c010290d:	89 04 24             	mov    %eax,(%esp)
c0102910:	e8 b7 fe ff ff       	call   c01027cc <pgfault_handler>
c0102915:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102918:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010291c:	0f 84 98 00 00 00    	je     c01029ba <trap_dispatch+0x122>
            print_trapframe(tf);
c0102922:	8b 45 08             	mov    0x8(%ebp),%eax
c0102925:	89 04 24             	mov    %eax,(%esp)
c0102928:	e8 a6 fb ff ff       	call   c01024d3 <print_trapframe>
            if (current == NULL) {
c010292d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102932:	85 c0                	test   %eax,%eax
c0102934:	75 23                	jne    c0102959 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102936:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102939:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010293d:	c7 44 24 08 6c 5c 11 	movl   $0xc0115c6c,0x8(%esp)
c0102944:	c0 
c0102945:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010294c:	00 
c010294d:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c0102954:	e8 5b e5 ff ff       	call   c0100eb4 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102959:	8b 45 08             	mov    0x8(%ebp),%eax
c010295c:	89 04 24             	mov    %eax,(%esp)
c010295f:	e8 59 fb ff ff       	call   c01024bd <trap_in_kernel>
c0102964:	85 c0                	test   %eax,%eax
c0102966:	74 23                	je     c010298b <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010296b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010296f:	c7 44 24 08 8c 5c 11 	movl   $0xc0115c8c,0x8(%esp)
c0102976:	c0 
c0102977:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010297e:	00 
c010297f:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c0102986:	e8 29 e5 ff ff       	call   c0100eb4 <__panic>
                }
                cprintf("killed by kernel.\n");
c010298b:	c7 04 24 ba 5c 11 c0 	movl   $0xc0115cba,(%esp)
c0102992:	e8 ce d9 ff ff       	call   c0100365 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102997:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010299a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010299e:	c7 44 24 08 d0 5c 11 	movl   $0xc0115cd0,0x8(%esp)
c01029a5:	c0 
c01029a6:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01029ad:	00 
c01029ae:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c01029b5:	e8 fa e4 ff ff       	call   c0100eb4 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01029ba:	e9 c6 00 00 00       	jmp    c0102a85 <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c01029bf:	e8 71 c2 00 00       	call   c010ec35 <syscall>
        break;
c01029c4:	e9 bc 00 00 00       	jmp    c0102a85 <trap_dispatch+0x1ed>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        ticks ++;
c01029c9:	a1 10 30 15 c0       	mov    0xc0153010,%eax
c01029ce:	83 c0 01             	add    $0x1,%eax
c01029d1:	a3 10 30 15 c0       	mov    %eax,0xc0153010
        assert(current != NULL);
c01029d6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01029db:	85 c0                	test   %eax,%eax
c01029dd:	75 24                	jne    c0102a03 <trap_dispatch+0x16b>
c01029df:	c7 44 24 0c f9 5c 11 	movl   $0xc0115cf9,0xc(%esp)
c01029e6:	c0 
c01029e7:	c7 44 24 08 3f 5c 11 	movl   $0xc0115c3f,0x8(%esp)
c01029ee:	c0 
c01029ef:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c01029f6:	00 
c01029f7:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c01029fe:	e8 b1 e4 ff ff       	call   c0100eb4 <__panic>
        run_timer_list();//更新定时器，并根据参数调用调度算法  
c0102a03:	e8 b8 bd 00 00       	call   c010e7c0 <run_timer_list>
        break;
c0102a08:	eb 7b                	jmp    c0102a85 <trap_dispatch+0x1ed>
    case IRQ_OFFSET + IRQ_COM1:
    case IRQ_OFFSET + IRQ_KBD:
        // There are user level shell in LAB8, so we need change COM/KBD interrupt processing.
        c = cons_getc();
c0102a0a:	e8 1d ee ff ff       	call   c010182c <cons_getc>
c0102a0f:	88 45 f3             	mov    %al,-0xd(%ebp)
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a12:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a16:	89 04 24             	mov    %eax,(%esp)
c0102a19:	e8 19 e5 00 00       	call   c0110f37 <dev_stdin_write>
        }
        break;
c0102a1e:	eb 65                	jmp    c0102a85 <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a20:	c7 44 24 08 09 5d 11 	movl   $0xc0115d09,0x8(%esp)
c0102a27:	c0 
c0102a28:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c0102a2f:	00 
c0102a30:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c0102a37:	e8 78 e4 ff ff       	call   c0100eb4 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a3f:	89 04 24             	mov    %eax,(%esp)
c0102a42:	e8 8c fa ff ff       	call   c01024d3 <print_trapframe>
        if (current != NULL) {
c0102a47:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a4c:	85 c0                	test   %eax,%eax
c0102a4e:	74 18                	je     c0102a68 <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102a50:	c7 04 24 19 5d 11 c0 	movl   $0xc0115d19,(%esp)
c0102a57:	e8 09 d9 ff ff       	call   c0100365 <cprintf>
            do_exit(-E_KILLED);
c0102a5c:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a63:	e8 ff 9f 00 00       	call   c010ca67 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a68:	c7 44 24 08 2a 5d 11 	movl   $0xc0115d2a,0x8(%esp)
c0102a6f:	c0 
c0102a70:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
c0102a77:	00 
c0102a78:	c7 04 24 2e 5a 11 c0 	movl   $0xc0115a2e,(%esp)
c0102a7f:	e8 30 e4 ff ff       	call   c0100eb4 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a84:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a85:	c9                   	leave  
c0102a86:	c3                   	ret    

c0102a87 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a87:	55                   	push   %ebp
c0102a88:	89 e5                	mov    %esp,%ebp
c0102a8a:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a8d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a92:	85 c0                	test   %eax,%eax
c0102a94:	75 0d                	jne    c0102aa3 <trap+0x1c>
        trap_dispatch(tf);
c0102a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a99:	89 04 24             	mov    %eax,(%esp)
c0102a9c:	e8 f7 fd ff ff       	call   c0102898 <trap_dispatch>
c0102aa1:	eb 6c                	jmp    c0102b0f <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102aa3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102aa8:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102aab:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102aae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102ab3:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ab6:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ab9:	8b 45 08             	mov    0x8(%ebp),%eax
c0102abc:	89 04 24             	mov    %eax,(%esp)
c0102abf:	e8 f9 f9 ff ff       	call   c01024bd <trap_in_kernel>
c0102ac4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ac7:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aca:	89 04 24             	mov    %eax,(%esp)
c0102acd:	e8 c6 fd ff ff       	call   c0102898 <trap_dispatch>
    
        current->tf = otf;
c0102ad2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102ad7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102ada:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102add:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102ae1:	75 2c                	jne    c0102b0f <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102ae3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102ae8:	8b 40 44             	mov    0x44(%eax),%eax
c0102aeb:	83 e0 01             	and    $0x1,%eax
c0102aee:	85 c0                	test   %eax,%eax
c0102af0:	74 0c                	je     c0102afe <trap+0x77>
                do_exit(-E_KILLED);
c0102af2:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102af9:	e8 69 9f 00 00       	call   c010ca67 <do_exit>
            }
            if (current->need_resched) {
c0102afe:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102b03:	8b 40 10             	mov    0x10(%eax),%eax
c0102b06:	85 c0                	test   %eax,%eax
c0102b08:	74 05                	je     c0102b0f <trap+0x88>
                schedule();
c0102b0a:	e8 24 ba 00 00       	call   c010e533 <schedule>
            }
        }
    }
}
c0102b0f:	c9                   	leave  
c0102b10:	c3                   	ret    

c0102b11 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b11:	1e                   	push   %ds
    pushl %es
c0102b12:	06                   	push   %es
    pushl %fs
c0102b13:	0f a0                	push   %fs
    pushl %gs
c0102b15:	0f a8                	push   %gs
    pushal
c0102b17:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b18:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b1d:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b1f:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b21:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b22:	e8 60 ff ff ff       	call   c0102a87 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b27:	5c                   	pop    %esp

c0102b28 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b28:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b29:	0f a9                	pop    %gs
    popl %fs
c0102b2b:	0f a1                	pop    %fs
    popl %es
c0102b2d:	07                   	pop    %es
    popl %ds
c0102b2e:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b2f:	83 c4 08             	add    $0x8,%esp
    iret
c0102b32:	cf                   	iret   

c0102b33 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b33:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b37:	e9 ec ff ff ff       	jmp    c0102b28 <__trapret>

c0102b3c <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b3c:	6a 00                	push   $0x0
  pushl $0
c0102b3e:	6a 00                	push   $0x0
  jmp __alltraps
c0102b40:	e9 cc ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b45 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b45:	6a 00                	push   $0x0
  pushl $1
c0102b47:	6a 01                	push   $0x1
  jmp __alltraps
c0102b49:	e9 c3 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b4e <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b4e:	6a 00                	push   $0x0
  pushl $2
c0102b50:	6a 02                	push   $0x2
  jmp __alltraps
c0102b52:	e9 ba ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b57 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b57:	6a 00                	push   $0x0
  pushl $3
c0102b59:	6a 03                	push   $0x3
  jmp __alltraps
c0102b5b:	e9 b1 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b60 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b60:	6a 00                	push   $0x0
  pushl $4
c0102b62:	6a 04                	push   $0x4
  jmp __alltraps
c0102b64:	e9 a8 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b69 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b69:	6a 00                	push   $0x0
  pushl $5
c0102b6b:	6a 05                	push   $0x5
  jmp __alltraps
c0102b6d:	e9 9f ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b72 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b72:	6a 00                	push   $0x0
  pushl $6
c0102b74:	6a 06                	push   $0x6
  jmp __alltraps
c0102b76:	e9 96 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b7b <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b7b:	6a 00                	push   $0x0
  pushl $7
c0102b7d:	6a 07                	push   $0x7
  jmp __alltraps
c0102b7f:	e9 8d ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b84 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b84:	6a 08                	push   $0x8
  jmp __alltraps
c0102b86:	e9 86 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b8b <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b8b:	6a 09                	push   $0x9
  jmp __alltraps
c0102b8d:	e9 7f ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b92 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b92:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b94:	e9 78 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102b99 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b99:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b9b:	e9 71 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102ba0 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102ba0:	6a 0c                	push   $0xc
  jmp __alltraps
c0102ba2:	e9 6a ff ff ff       	jmp    c0102b11 <__alltraps>

c0102ba7 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102ba7:	6a 0d                	push   $0xd
  jmp __alltraps
c0102ba9:	e9 63 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102bae <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bae:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bb0:	e9 5c ff ff ff       	jmp    c0102b11 <__alltraps>

c0102bb5 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bb5:	6a 00                	push   $0x0
  pushl $15
c0102bb7:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bb9:	e9 53 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102bbe <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bbe:	6a 00                	push   $0x0
  pushl $16
c0102bc0:	6a 10                	push   $0x10
  jmp __alltraps
c0102bc2:	e9 4a ff ff ff       	jmp    c0102b11 <__alltraps>

c0102bc7 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bc7:	6a 11                	push   $0x11
  jmp __alltraps
c0102bc9:	e9 43 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102bce <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bce:	6a 00                	push   $0x0
  pushl $18
c0102bd0:	6a 12                	push   $0x12
  jmp __alltraps
c0102bd2:	e9 3a ff ff ff       	jmp    c0102b11 <__alltraps>

c0102bd7 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bd7:	6a 00                	push   $0x0
  pushl $19
c0102bd9:	6a 13                	push   $0x13
  jmp __alltraps
c0102bdb:	e9 31 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102be0 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102be0:	6a 00                	push   $0x0
  pushl $20
c0102be2:	6a 14                	push   $0x14
  jmp __alltraps
c0102be4:	e9 28 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102be9 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102be9:	6a 00                	push   $0x0
  pushl $21
c0102beb:	6a 15                	push   $0x15
  jmp __alltraps
c0102bed:	e9 1f ff ff ff       	jmp    c0102b11 <__alltraps>

c0102bf2 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bf2:	6a 00                	push   $0x0
  pushl $22
c0102bf4:	6a 16                	push   $0x16
  jmp __alltraps
c0102bf6:	e9 16 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102bfb <vector23>:
.globl vector23
vector23:
  pushl $0
c0102bfb:	6a 00                	push   $0x0
  pushl $23
c0102bfd:	6a 17                	push   $0x17
  jmp __alltraps
c0102bff:	e9 0d ff ff ff       	jmp    c0102b11 <__alltraps>

c0102c04 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c04:	6a 00                	push   $0x0
  pushl $24
c0102c06:	6a 18                	push   $0x18
  jmp __alltraps
c0102c08:	e9 04 ff ff ff       	jmp    c0102b11 <__alltraps>

c0102c0d <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c0d:	6a 00                	push   $0x0
  pushl $25
c0102c0f:	6a 19                	push   $0x19
  jmp __alltraps
c0102c11:	e9 fb fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c16 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c16:	6a 00                	push   $0x0
  pushl $26
c0102c18:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c1a:	e9 f2 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c1f <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c1f:	6a 00                	push   $0x0
  pushl $27
c0102c21:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c23:	e9 e9 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c28 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c28:	6a 00                	push   $0x0
  pushl $28
c0102c2a:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c2c:	e9 e0 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c31 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c31:	6a 00                	push   $0x0
  pushl $29
c0102c33:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c35:	e9 d7 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c3a <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c3a:	6a 00                	push   $0x0
  pushl $30
c0102c3c:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c3e:	e9 ce fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c43 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c43:	6a 00                	push   $0x0
  pushl $31
c0102c45:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c47:	e9 c5 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c4c <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c4c:	6a 00                	push   $0x0
  pushl $32
c0102c4e:	6a 20                	push   $0x20
  jmp __alltraps
c0102c50:	e9 bc fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c55 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c55:	6a 00                	push   $0x0
  pushl $33
c0102c57:	6a 21                	push   $0x21
  jmp __alltraps
c0102c59:	e9 b3 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c5e <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c5e:	6a 00                	push   $0x0
  pushl $34
c0102c60:	6a 22                	push   $0x22
  jmp __alltraps
c0102c62:	e9 aa fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c67 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c67:	6a 00                	push   $0x0
  pushl $35
c0102c69:	6a 23                	push   $0x23
  jmp __alltraps
c0102c6b:	e9 a1 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c70 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c70:	6a 00                	push   $0x0
  pushl $36
c0102c72:	6a 24                	push   $0x24
  jmp __alltraps
c0102c74:	e9 98 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c79 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c79:	6a 00                	push   $0x0
  pushl $37
c0102c7b:	6a 25                	push   $0x25
  jmp __alltraps
c0102c7d:	e9 8f fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c82 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c82:	6a 00                	push   $0x0
  pushl $38
c0102c84:	6a 26                	push   $0x26
  jmp __alltraps
c0102c86:	e9 86 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c8b <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c8b:	6a 00                	push   $0x0
  pushl $39
c0102c8d:	6a 27                	push   $0x27
  jmp __alltraps
c0102c8f:	e9 7d fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c94 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c94:	6a 00                	push   $0x0
  pushl $40
c0102c96:	6a 28                	push   $0x28
  jmp __alltraps
c0102c98:	e9 74 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102c9d <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c9d:	6a 00                	push   $0x0
  pushl $41
c0102c9f:	6a 29                	push   $0x29
  jmp __alltraps
c0102ca1:	e9 6b fe ff ff       	jmp    c0102b11 <__alltraps>

c0102ca6 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102ca6:	6a 00                	push   $0x0
  pushl $42
c0102ca8:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102caa:	e9 62 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102caf <vector43>:
.globl vector43
vector43:
  pushl $0
c0102caf:	6a 00                	push   $0x0
  pushl $43
c0102cb1:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cb3:	e9 59 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102cb8 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cb8:	6a 00                	push   $0x0
  pushl $44
c0102cba:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cbc:	e9 50 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102cc1 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cc1:	6a 00                	push   $0x0
  pushl $45
c0102cc3:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cc5:	e9 47 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102cca <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cca:	6a 00                	push   $0x0
  pushl $46
c0102ccc:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cce:	e9 3e fe ff ff       	jmp    c0102b11 <__alltraps>

c0102cd3 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cd3:	6a 00                	push   $0x0
  pushl $47
c0102cd5:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cd7:	e9 35 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102cdc <vector48>:
.globl vector48
vector48:
  pushl $0
c0102cdc:	6a 00                	push   $0x0
  pushl $48
c0102cde:	6a 30                	push   $0x30
  jmp __alltraps
c0102ce0:	e9 2c fe ff ff       	jmp    c0102b11 <__alltraps>

c0102ce5 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102ce5:	6a 00                	push   $0x0
  pushl $49
c0102ce7:	6a 31                	push   $0x31
  jmp __alltraps
c0102ce9:	e9 23 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102cee <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cee:	6a 00                	push   $0x0
  pushl $50
c0102cf0:	6a 32                	push   $0x32
  jmp __alltraps
c0102cf2:	e9 1a fe ff ff       	jmp    c0102b11 <__alltraps>

c0102cf7 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cf7:	6a 00                	push   $0x0
  pushl $51
c0102cf9:	6a 33                	push   $0x33
  jmp __alltraps
c0102cfb:	e9 11 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102d00 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d00:	6a 00                	push   $0x0
  pushl $52
c0102d02:	6a 34                	push   $0x34
  jmp __alltraps
c0102d04:	e9 08 fe ff ff       	jmp    c0102b11 <__alltraps>

c0102d09 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d09:	6a 00                	push   $0x0
  pushl $53
c0102d0b:	6a 35                	push   $0x35
  jmp __alltraps
c0102d0d:	e9 ff fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d12 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d12:	6a 00                	push   $0x0
  pushl $54
c0102d14:	6a 36                	push   $0x36
  jmp __alltraps
c0102d16:	e9 f6 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d1b <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d1b:	6a 00                	push   $0x0
  pushl $55
c0102d1d:	6a 37                	push   $0x37
  jmp __alltraps
c0102d1f:	e9 ed fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d24 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d24:	6a 00                	push   $0x0
  pushl $56
c0102d26:	6a 38                	push   $0x38
  jmp __alltraps
c0102d28:	e9 e4 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d2d <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d2d:	6a 00                	push   $0x0
  pushl $57
c0102d2f:	6a 39                	push   $0x39
  jmp __alltraps
c0102d31:	e9 db fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d36 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d36:	6a 00                	push   $0x0
  pushl $58
c0102d38:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d3a:	e9 d2 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d3f <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d3f:	6a 00                	push   $0x0
  pushl $59
c0102d41:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d43:	e9 c9 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d48 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d48:	6a 00                	push   $0x0
  pushl $60
c0102d4a:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d4c:	e9 c0 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d51 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d51:	6a 00                	push   $0x0
  pushl $61
c0102d53:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d55:	e9 b7 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d5a <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d5a:	6a 00                	push   $0x0
  pushl $62
c0102d5c:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d5e:	e9 ae fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d63 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d63:	6a 00                	push   $0x0
  pushl $63
c0102d65:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d67:	e9 a5 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d6c <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d6c:	6a 00                	push   $0x0
  pushl $64
c0102d6e:	6a 40                	push   $0x40
  jmp __alltraps
c0102d70:	e9 9c fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d75 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d75:	6a 00                	push   $0x0
  pushl $65
c0102d77:	6a 41                	push   $0x41
  jmp __alltraps
c0102d79:	e9 93 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d7e <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d7e:	6a 00                	push   $0x0
  pushl $66
c0102d80:	6a 42                	push   $0x42
  jmp __alltraps
c0102d82:	e9 8a fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d87 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d87:	6a 00                	push   $0x0
  pushl $67
c0102d89:	6a 43                	push   $0x43
  jmp __alltraps
c0102d8b:	e9 81 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d90 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d90:	6a 00                	push   $0x0
  pushl $68
c0102d92:	6a 44                	push   $0x44
  jmp __alltraps
c0102d94:	e9 78 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102d99 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d99:	6a 00                	push   $0x0
  pushl $69
c0102d9b:	6a 45                	push   $0x45
  jmp __alltraps
c0102d9d:	e9 6f fd ff ff       	jmp    c0102b11 <__alltraps>

c0102da2 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102da2:	6a 00                	push   $0x0
  pushl $70
c0102da4:	6a 46                	push   $0x46
  jmp __alltraps
c0102da6:	e9 66 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102dab <vector71>:
.globl vector71
vector71:
  pushl $0
c0102dab:	6a 00                	push   $0x0
  pushl $71
c0102dad:	6a 47                	push   $0x47
  jmp __alltraps
c0102daf:	e9 5d fd ff ff       	jmp    c0102b11 <__alltraps>

c0102db4 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102db4:	6a 00                	push   $0x0
  pushl $72
c0102db6:	6a 48                	push   $0x48
  jmp __alltraps
c0102db8:	e9 54 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102dbd <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dbd:	6a 00                	push   $0x0
  pushl $73
c0102dbf:	6a 49                	push   $0x49
  jmp __alltraps
c0102dc1:	e9 4b fd ff ff       	jmp    c0102b11 <__alltraps>

c0102dc6 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dc6:	6a 00                	push   $0x0
  pushl $74
c0102dc8:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dca:	e9 42 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102dcf <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dcf:	6a 00                	push   $0x0
  pushl $75
c0102dd1:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dd3:	e9 39 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102dd8 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dd8:	6a 00                	push   $0x0
  pushl $76
c0102dda:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102ddc:	e9 30 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102de1 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102de1:	6a 00                	push   $0x0
  pushl $77
c0102de3:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102de5:	e9 27 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102dea <vector78>:
.globl vector78
vector78:
  pushl $0
c0102dea:	6a 00                	push   $0x0
  pushl $78
c0102dec:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102dee:	e9 1e fd ff ff       	jmp    c0102b11 <__alltraps>

c0102df3 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102df3:	6a 00                	push   $0x0
  pushl $79
c0102df5:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102df7:	e9 15 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102dfc <vector80>:
.globl vector80
vector80:
  pushl $0
c0102dfc:	6a 00                	push   $0x0
  pushl $80
c0102dfe:	6a 50                	push   $0x50
  jmp __alltraps
c0102e00:	e9 0c fd ff ff       	jmp    c0102b11 <__alltraps>

c0102e05 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e05:	6a 00                	push   $0x0
  pushl $81
c0102e07:	6a 51                	push   $0x51
  jmp __alltraps
c0102e09:	e9 03 fd ff ff       	jmp    c0102b11 <__alltraps>

c0102e0e <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e0e:	6a 00                	push   $0x0
  pushl $82
c0102e10:	6a 52                	push   $0x52
  jmp __alltraps
c0102e12:	e9 fa fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e17 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e17:	6a 00                	push   $0x0
  pushl $83
c0102e19:	6a 53                	push   $0x53
  jmp __alltraps
c0102e1b:	e9 f1 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e20 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e20:	6a 00                	push   $0x0
  pushl $84
c0102e22:	6a 54                	push   $0x54
  jmp __alltraps
c0102e24:	e9 e8 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e29 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e29:	6a 00                	push   $0x0
  pushl $85
c0102e2b:	6a 55                	push   $0x55
  jmp __alltraps
c0102e2d:	e9 df fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e32 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e32:	6a 00                	push   $0x0
  pushl $86
c0102e34:	6a 56                	push   $0x56
  jmp __alltraps
c0102e36:	e9 d6 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e3b <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e3b:	6a 00                	push   $0x0
  pushl $87
c0102e3d:	6a 57                	push   $0x57
  jmp __alltraps
c0102e3f:	e9 cd fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e44 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e44:	6a 00                	push   $0x0
  pushl $88
c0102e46:	6a 58                	push   $0x58
  jmp __alltraps
c0102e48:	e9 c4 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e4d <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e4d:	6a 00                	push   $0x0
  pushl $89
c0102e4f:	6a 59                	push   $0x59
  jmp __alltraps
c0102e51:	e9 bb fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e56 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e56:	6a 00                	push   $0x0
  pushl $90
c0102e58:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e5a:	e9 b2 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e5f <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e5f:	6a 00                	push   $0x0
  pushl $91
c0102e61:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e63:	e9 a9 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e68 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e68:	6a 00                	push   $0x0
  pushl $92
c0102e6a:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e6c:	e9 a0 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e71 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e71:	6a 00                	push   $0x0
  pushl $93
c0102e73:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e75:	e9 97 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e7a <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e7a:	6a 00                	push   $0x0
  pushl $94
c0102e7c:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e7e:	e9 8e fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e83 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e83:	6a 00                	push   $0x0
  pushl $95
c0102e85:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e87:	e9 85 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e8c <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e8c:	6a 00                	push   $0x0
  pushl $96
c0102e8e:	6a 60                	push   $0x60
  jmp __alltraps
c0102e90:	e9 7c fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e95 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e95:	6a 00                	push   $0x0
  pushl $97
c0102e97:	6a 61                	push   $0x61
  jmp __alltraps
c0102e99:	e9 73 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102e9e <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e9e:	6a 00                	push   $0x0
  pushl $98
c0102ea0:	6a 62                	push   $0x62
  jmp __alltraps
c0102ea2:	e9 6a fc ff ff       	jmp    c0102b11 <__alltraps>

c0102ea7 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102ea7:	6a 00                	push   $0x0
  pushl $99
c0102ea9:	6a 63                	push   $0x63
  jmp __alltraps
c0102eab:	e9 61 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102eb0 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102eb0:	6a 00                	push   $0x0
  pushl $100
c0102eb2:	6a 64                	push   $0x64
  jmp __alltraps
c0102eb4:	e9 58 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102eb9 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102eb9:	6a 00                	push   $0x0
  pushl $101
c0102ebb:	6a 65                	push   $0x65
  jmp __alltraps
c0102ebd:	e9 4f fc ff ff       	jmp    c0102b11 <__alltraps>

c0102ec2 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ec2:	6a 00                	push   $0x0
  pushl $102
c0102ec4:	6a 66                	push   $0x66
  jmp __alltraps
c0102ec6:	e9 46 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102ecb <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ecb:	6a 00                	push   $0x0
  pushl $103
c0102ecd:	6a 67                	push   $0x67
  jmp __alltraps
c0102ecf:	e9 3d fc ff ff       	jmp    c0102b11 <__alltraps>

c0102ed4 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ed4:	6a 00                	push   $0x0
  pushl $104
c0102ed6:	6a 68                	push   $0x68
  jmp __alltraps
c0102ed8:	e9 34 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102edd <vector105>:
.globl vector105
vector105:
  pushl $0
c0102edd:	6a 00                	push   $0x0
  pushl $105
c0102edf:	6a 69                	push   $0x69
  jmp __alltraps
c0102ee1:	e9 2b fc ff ff       	jmp    c0102b11 <__alltraps>

c0102ee6 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ee6:	6a 00                	push   $0x0
  pushl $106
c0102ee8:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102eea:	e9 22 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102eef <vector107>:
.globl vector107
vector107:
  pushl $0
c0102eef:	6a 00                	push   $0x0
  pushl $107
c0102ef1:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102ef3:	e9 19 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102ef8 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102ef8:	6a 00                	push   $0x0
  pushl $108
c0102efa:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102efc:	e9 10 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102f01 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f01:	6a 00                	push   $0x0
  pushl $109
c0102f03:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f05:	e9 07 fc ff ff       	jmp    c0102b11 <__alltraps>

c0102f0a <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f0a:	6a 00                	push   $0x0
  pushl $110
c0102f0c:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f0e:	e9 fe fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f13 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f13:	6a 00                	push   $0x0
  pushl $111
c0102f15:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f17:	e9 f5 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f1c <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f1c:	6a 00                	push   $0x0
  pushl $112
c0102f1e:	6a 70                	push   $0x70
  jmp __alltraps
c0102f20:	e9 ec fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f25 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f25:	6a 00                	push   $0x0
  pushl $113
c0102f27:	6a 71                	push   $0x71
  jmp __alltraps
c0102f29:	e9 e3 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f2e <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f2e:	6a 00                	push   $0x0
  pushl $114
c0102f30:	6a 72                	push   $0x72
  jmp __alltraps
c0102f32:	e9 da fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f37 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f37:	6a 00                	push   $0x0
  pushl $115
c0102f39:	6a 73                	push   $0x73
  jmp __alltraps
c0102f3b:	e9 d1 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f40 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f40:	6a 00                	push   $0x0
  pushl $116
c0102f42:	6a 74                	push   $0x74
  jmp __alltraps
c0102f44:	e9 c8 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f49 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f49:	6a 00                	push   $0x0
  pushl $117
c0102f4b:	6a 75                	push   $0x75
  jmp __alltraps
c0102f4d:	e9 bf fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f52 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f52:	6a 00                	push   $0x0
  pushl $118
c0102f54:	6a 76                	push   $0x76
  jmp __alltraps
c0102f56:	e9 b6 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f5b <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f5b:	6a 00                	push   $0x0
  pushl $119
c0102f5d:	6a 77                	push   $0x77
  jmp __alltraps
c0102f5f:	e9 ad fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f64 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f64:	6a 00                	push   $0x0
  pushl $120
c0102f66:	6a 78                	push   $0x78
  jmp __alltraps
c0102f68:	e9 a4 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f6d <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f6d:	6a 00                	push   $0x0
  pushl $121
c0102f6f:	6a 79                	push   $0x79
  jmp __alltraps
c0102f71:	e9 9b fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f76 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f76:	6a 00                	push   $0x0
  pushl $122
c0102f78:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f7a:	e9 92 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f7f <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f7f:	6a 00                	push   $0x0
  pushl $123
c0102f81:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f83:	e9 89 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f88 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f88:	6a 00                	push   $0x0
  pushl $124
c0102f8a:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f8c:	e9 80 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f91 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f91:	6a 00                	push   $0x0
  pushl $125
c0102f93:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f95:	e9 77 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102f9a <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f9a:	6a 00                	push   $0x0
  pushl $126
c0102f9c:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f9e:	e9 6e fb ff ff       	jmp    c0102b11 <__alltraps>

c0102fa3 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102fa3:	6a 00                	push   $0x0
  pushl $127
c0102fa5:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fa7:	e9 65 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102fac <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fac:	6a 00                	push   $0x0
  pushl $128
c0102fae:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fb3:	e9 59 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102fb8 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fb8:	6a 00                	push   $0x0
  pushl $129
c0102fba:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fbf:	e9 4d fb ff ff       	jmp    c0102b11 <__alltraps>

c0102fc4 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fc4:	6a 00                	push   $0x0
  pushl $130
c0102fc6:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fcb:	e9 41 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102fd0 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fd0:	6a 00                	push   $0x0
  pushl $131
c0102fd2:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fd7:	e9 35 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102fdc <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fdc:	6a 00                	push   $0x0
  pushl $132
c0102fde:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fe3:	e9 29 fb ff ff       	jmp    c0102b11 <__alltraps>

c0102fe8 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fe8:	6a 00                	push   $0x0
  pushl $133
c0102fea:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fef:	e9 1d fb ff ff       	jmp    c0102b11 <__alltraps>

c0102ff4 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102ff4:	6a 00                	push   $0x0
  pushl $134
c0102ff6:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102ffb:	e9 11 fb ff ff       	jmp    c0102b11 <__alltraps>

c0103000 <vector135>:
.globl vector135
vector135:
  pushl $0
c0103000:	6a 00                	push   $0x0
  pushl $135
c0103002:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0103007:	e9 05 fb ff ff       	jmp    c0102b11 <__alltraps>

c010300c <vector136>:
.globl vector136
vector136:
  pushl $0
c010300c:	6a 00                	push   $0x0
  pushl $136
c010300e:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103013:	e9 f9 fa ff ff       	jmp    c0102b11 <__alltraps>

c0103018 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103018:	6a 00                	push   $0x0
  pushl $137
c010301a:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c010301f:	e9 ed fa ff ff       	jmp    c0102b11 <__alltraps>

c0103024 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103024:	6a 00                	push   $0x0
  pushl $138
c0103026:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c010302b:	e9 e1 fa ff ff       	jmp    c0102b11 <__alltraps>

c0103030 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103030:	6a 00                	push   $0x0
  pushl $139
c0103032:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103037:	e9 d5 fa ff ff       	jmp    c0102b11 <__alltraps>

c010303c <vector140>:
.globl vector140
vector140:
  pushl $0
c010303c:	6a 00                	push   $0x0
  pushl $140
c010303e:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103043:	e9 c9 fa ff ff       	jmp    c0102b11 <__alltraps>

c0103048 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103048:	6a 00                	push   $0x0
  pushl $141
c010304a:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010304f:	e9 bd fa ff ff       	jmp    c0102b11 <__alltraps>

c0103054 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103054:	6a 00                	push   $0x0
  pushl $142
c0103056:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c010305b:	e9 b1 fa ff ff       	jmp    c0102b11 <__alltraps>

c0103060 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103060:	6a 00                	push   $0x0
  pushl $143
c0103062:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103067:	e9 a5 fa ff ff       	jmp    c0102b11 <__alltraps>

c010306c <vector144>:
.globl vector144
vector144:
  pushl $0
c010306c:	6a 00                	push   $0x0
  pushl $144
c010306e:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103073:	e9 99 fa ff ff       	jmp    c0102b11 <__alltraps>

c0103078 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103078:	6a 00                	push   $0x0
  pushl $145
c010307a:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c010307f:	e9 8d fa ff ff       	jmp    c0102b11 <__alltraps>

c0103084 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103084:	6a 00                	push   $0x0
  pushl $146
c0103086:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c010308b:	e9 81 fa ff ff       	jmp    c0102b11 <__alltraps>

c0103090 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103090:	6a 00                	push   $0x0
  pushl $147
c0103092:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103097:	e9 75 fa ff ff       	jmp    c0102b11 <__alltraps>

c010309c <vector148>:
.globl vector148
vector148:
  pushl $0
c010309c:	6a 00                	push   $0x0
  pushl $148
c010309e:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030a3:	e9 69 fa ff ff       	jmp    c0102b11 <__alltraps>

c01030a8 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030a8:	6a 00                	push   $0x0
  pushl $149
c01030aa:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030af:	e9 5d fa ff ff       	jmp    c0102b11 <__alltraps>

c01030b4 <vector150>:
.globl vector150
vector150:
  pushl $0
c01030b4:	6a 00                	push   $0x0
  pushl $150
c01030b6:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030bb:	e9 51 fa ff ff       	jmp    c0102b11 <__alltraps>

c01030c0 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030c0:	6a 00                	push   $0x0
  pushl $151
c01030c2:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030c7:	e9 45 fa ff ff       	jmp    c0102b11 <__alltraps>

c01030cc <vector152>:
.globl vector152
vector152:
  pushl $0
c01030cc:	6a 00                	push   $0x0
  pushl $152
c01030ce:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030d3:	e9 39 fa ff ff       	jmp    c0102b11 <__alltraps>

c01030d8 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030d8:	6a 00                	push   $0x0
  pushl $153
c01030da:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030df:	e9 2d fa ff ff       	jmp    c0102b11 <__alltraps>

c01030e4 <vector154>:
.globl vector154
vector154:
  pushl $0
c01030e4:	6a 00                	push   $0x0
  pushl $154
c01030e6:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030eb:	e9 21 fa ff ff       	jmp    c0102b11 <__alltraps>

c01030f0 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030f0:	6a 00                	push   $0x0
  pushl $155
c01030f2:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030f7:	e9 15 fa ff ff       	jmp    c0102b11 <__alltraps>

c01030fc <vector156>:
.globl vector156
vector156:
  pushl $0
c01030fc:	6a 00                	push   $0x0
  pushl $156
c01030fe:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103103:	e9 09 fa ff ff       	jmp    c0102b11 <__alltraps>

c0103108 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103108:	6a 00                	push   $0x0
  pushl $157
c010310a:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c010310f:	e9 fd f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103114 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103114:	6a 00                	push   $0x0
  pushl $158
c0103116:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010311b:	e9 f1 f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103120 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103120:	6a 00                	push   $0x0
  pushl $159
c0103122:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103127:	e9 e5 f9 ff ff       	jmp    c0102b11 <__alltraps>

c010312c <vector160>:
.globl vector160
vector160:
  pushl $0
c010312c:	6a 00                	push   $0x0
  pushl $160
c010312e:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103133:	e9 d9 f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103138 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103138:	6a 00                	push   $0x0
  pushl $161
c010313a:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010313f:	e9 cd f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103144 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103144:	6a 00                	push   $0x0
  pushl $162
c0103146:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010314b:	e9 c1 f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103150 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103150:	6a 00                	push   $0x0
  pushl $163
c0103152:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103157:	e9 b5 f9 ff ff       	jmp    c0102b11 <__alltraps>

c010315c <vector164>:
.globl vector164
vector164:
  pushl $0
c010315c:	6a 00                	push   $0x0
  pushl $164
c010315e:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103163:	e9 a9 f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103168 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103168:	6a 00                	push   $0x0
  pushl $165
c010316a:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010316f:	e9 9d f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103174 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103174:	6a 00                	push   $0x0
  pushl $166
c0103176:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c010317b:	e9 91 f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103180 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103180:	6a 00                	push   $0x0
  pushl $167
c0103182:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103187:	e9 85 f9 ff ff       	jmp    c0102b11 <__alltraps>

c010318c <vector168>:
.globl vector168
vector168:
  pushl $0
c010318c:	6a 00                	push   $0x0
  pushl $168
c010318e:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103193:	e9 79 f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103198 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103198:	6a 00                	push   $0x0
  pushl $169
c010319a:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010319f:	e9 6d f9 ff ff       	jmp    c0102b11 <__alltraps>

c01031a4 <vector170>:
.globl vector170
vector170:
  pushl $0
c01031a4:	6a 00                	push   $0x0
  pushl $170
c01031a6:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031ab:	e9 61 f9 ff ff       	jmp    c0102b11 <__alltraps>

c01031b0 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031b0:	6a 00                	push   $0x0
  pushl $171
c01031b2:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031b7:	e9 55 f9 ff ff       	jmp    c0102b11 <__alltraps>

c01031bc <vector172>:
.globl vector172
vector172:
  pushl $0
c01031bc:	6a 00                	push   $0x0
  pushl $172
c01031be:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031c3:	e9 49 f9 ff ff       	jmp    c0102b11 <__alltraps>

c01031c8 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031c8:	6a 00                	push   $0x0
  pushl $173
c01031ca:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031cf:	e9 3d f9 ff ff       	jmp    c0102b11 <__alltraps>

c01031d4 <vector174>:
.globl vector174
vector174:
  pushl $0
c01031d4:	6a 00                	push   $0x0
  pushl $174
c01031d6:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031db:	e9 31 f9 ff ff       	jmp    c0102b11 <__alltraps>

c01031e0 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031e0:	6a 00                	push   $0x0
  pushl $175
c01031e2:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031e7:	e9 25 f9 ff ff       	jmp    c0102b11 <__alltraps>

c01031ec <vector176>:
.globl vector176
vector176:
  pushl $0
c01031ec:	6a 00                	push   $0x0
  pushl $176
c01031ee:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031f3:	e9 19 f9 ff ff       	jmp    c0102b11 <__alltraps>

c01031f8 <vector177>:
.globl vector177
vector177:
  pushl $0
c01031f8:	6a 00                	push   $0x0
  pushl $177
c01031fa:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031ff:	e9 0d f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103204 <vector178>:
.globl vector178
vector178:
  pushl $0
c0103204:	6a 00                	push   $0x0
  pushl $178
c0103206:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c010320b:	e9 01 f9 ff ff       	jmp    c0102b11 <__alltraps>

c0103210 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103210:	6a 00                	push   $0x0
  pushl $179
c0103212:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103217:	e9 f5 f8 ff ff       	jmp    c0102b11 <__alltraps>

c010321c <vector180>:
.globl vector180
vector180:
  pushl $0
c010321c:	6a 00                	push   $0x0
  pushl $180
c010321e:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103223:	e9 e9 f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103228 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103228:	6a 00                	push   $0x0
  pushl $181
c010322a:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010322f:	e9 dd f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103234 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103234:	6a 00                	push   $0x0
  pushl $182
c0103236:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010323b:	e9 d1 f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103240 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103240:	6a 00                	push   $0x0
  pushl $183
c0103242:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103247:	e9 c5 f8 ff ff       	jmp    c0102b11 <__alltraps>

c010324c <vector184>:
.globl vector184
vector184:
  pushl $0
c010324c:	6a 00                	push   $0x0
  pushl $184
c010324e:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103253:	e9 b9 f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103258 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103258:	6a 00                	push   $0x0
  pushl $185
c010325a:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010325f:	e9 ad f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103264 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103264:	6a 00                	push   $0x0
  pushl $186
c0103266:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c010326b:	e9 a1 f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103270 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103270:	6a 00                	push   $0x0
  pushl $187
c0103272:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103277:	e9 95 f8 ff ff       	jmp    c0102b11 <__alltraps>

c010327c <vector188>:
.globl vector188
vector188:
  pushl $0
c010327c:	6a 00                	push   $0x0
  pushl $188
c010327e:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103283:	e9 89 f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103288 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103288:	6a 00                	push   $0x0
  pushl $189
c010328a:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010328f:	e9 7d f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103294 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103294:	6a 00                	push   $0x0
  pushl $190
c0103296:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c010329b:	e9 71 f8 ff ff       	jmp    c0102b11 <__alltraps>

c01032a0 <vector191>:
.globl vector191
vector191:
  pushl $0
c01032a0:	6a 00                	push   $0x0
  pushl $191
c01032a2:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032a7:	e9 65 f8 ff ff       	jmp    c0102b11 <__alltraps>

c01032ac <vector192>:
.globl vector192
vector192:
  pushl $0
c01032ac:	6a 00                	push   $0x0
  pushl $192
c01032ae:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032b3:	e9 59 f8 ff ff       	jmp    c0102b11 <__alltraps>

c01032b8 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032b8:	6a 00                	push   $0x0
  pushl $193
c01032ba:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032bf:	e9 4d f8 ff ff       	jmp    c0102b11 <__alltraps>

c01032c4 <vector194>:
.globl vector194
vector194:
  pushl $0
c01032c4:	6a 00                	push   $0x0
  pushl $194
c01032c6:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032cb:	e9 41 f8 ff ff       	jmp    c0102b11 <__alltraps>

c01032d0 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032d0:	6a 00                	push   $0x0
  pushl $195
c01032d2:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032d7:	e9 35 f8 ff ff       	jmp    c0102b11 <__alltraps>

c01032dc <vector196>:
.globl vector196
vector196:
  pushl $0
c01032dc:	6a 00                	push   $0x0
  pushl $196
c01032de:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032e3:	e9 29 f8 ff ff       	jmp    c0102b11 <__alltraps>

c01032e8 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032e8:	6a 00                	push   $0x0
  pushl $197
c01032ea:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032ef:	e9 1d f8 ff ff       	jmp    c0102b11 <__alltraps>

c01032f4 <vector198>:
.globl vector198
vector198:
  pushl $0
c01032f4:	6a 00                	push   $0x0
  pushl $198
c01032f6:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032fb:	e9 11 f8 ff ff       	jmp    c0102b11 <__alltraps>

c0103300 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103300:	6a 00                	push   $0x0
  pushl $199
c0103302:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103307:	e9 05 f8 ff ff       	jmp    c0102b11 <__alltraps>

c010330c <vector200>:
.globl vector200
vector200:
  pushl $0
c010330c:	6a 00                	push   $0x0
  pushl $200
c010330e:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103313:	e9 f9 f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103318 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103318:	6a 00                	push   $0x0
  pushl $201
c010331a:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010331f:	e9 ed f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103324 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103324:	6a 00                	push   $0x0
  pushl $202
c0103326:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010332b:	e9 e1 f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103330 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103330:	6a 00                	push   $0x0
  pushl $203
c0103332:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103337:	e9 d5 f7 ff ff       	jmp    c0102b11 <__alltraps>

c010333c <vector204>:
.globl vector204
vector204:
  pushl $0
c010333c:	6a 00                	push   $0x0
  pushl $204
c010333e:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103343:	e9 c9 f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103348 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103348:	6a 00                	push   $0x0
  pushl $205
c010334a:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010334f:	e9 bd f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103354 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103354:	6a 00                	push   $0x0
  pushl $206
c0103356:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010335b:	e9 b1 f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103360 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103360:	6a 00                	push   $0x0
  pushl $207
c0103362:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103367:	e9 a5 f7 ff ff       	jmp    c0102b11 <__alltraps>

c010336c <vector208>:
.globl vector208
vector208:
  pushl $0
c010336c:	6a 00                	push   $0x0
  pushl $208
c010336e:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103373:	e9 99 f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103378 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103378:	6a 00                	push   $0x0
  pushl $209
c010337a:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010337f:	e9 8d f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103384 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103384:	6a 00                	push   $0x0
  pushl $210
c0103386:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c010338b:	e9 81 f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103390 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103390:	6a 00                	push   $0x0
  pushl $211
c0103392:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103397:	e9 75 f7 ff ff       	jmp    c0102b11 <__alltraps>

c010339c <vector212>:
.globl vector212
vector212:
  pushl $0
c010339c:	6a 00                	push   $0x0
  pushl $212
c010339e:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033a3:	e9 69 f7 ff ff       	jmp    c0102b11 <__alltraps>

c01033a8 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033a8:	6a 00                	push   $0x0
  pushl $213
c01033aa:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033af:	e9 5d f7 ff ff       	jmp    c0102b11 <__alltraps>

c01033b4 <vector214>:
.globl vector214
vector214:
  pushl $0
c01033b4:	6a 00                	push   $0x0
  pushl $214
c01033b6:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033bb:	e9 51 f7 ff ff       	jmp    c0102b11 <__alltraps>

c01033c0 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033c0:	6a 00                	push   $0x0
  pushl $215
c01033c2:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033c7:	e9 45 f7 ff ff       	jmp    c0102b11 <__alltraps>

c01033cc <vector216>:
.globl vector216
vector216:
  pushl $0
c01033cc:	6a 00                	push   $0x0
  pushl $216
c01033ce:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033d3:	e9 39 f7 ff ff       	jmp    c0102b11 <__alltraps>

c01033d8 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033d8:	6a 00                	push   $0x0
  pushl $217
c01033da:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033df:	e9 2d f7 ff ff       	jmp    c0102b11 <__alltraps>

c01033e4 <vector218>:
.globl vector218
vector218:
  pushl $0
c01033e4:	6a 00                	push   $0x0
  pushl $218
c01033e6:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033eb:	e9 21 f7 ff ff       	jmp    c0102b11 <__alltraps>

c01033f0 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033f0:	6a 00                	push   $0x0
  pushl $219
c01033f2:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033f7:	e9 15 f7 ff ff       	jmp    c0102b11 <__alltraps>

c01033fc <vector220>:
.globl vector220
vector220:
  pushl $0
c01033fc:	6a 00                	push   $0x0
  pushl $220
c01033fe:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103403:	e9 09 f7 ff ff       	jmp    c0102b11 <__alltraps>

c0103408 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103408:	6a 00                	push   $0x0
  pushl $221
c010340a:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c010340f:	e9 fd f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103414 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103414:	6a 00                	push   $0x0
  pushl $222
c0103416:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010341b:	e9 f1 f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103420 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103420:	6a 00                	push   $0x0
  pushl $223
c0103422:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103427:	e9 e5 f6 ff ff       	jmp    c0102b11 <__alltraps>

c010342c <vector224>:
.globl vector224
vector224:
  pushl $0
c010342c:	6a 00                	push   $0x0
  pushl $224
c010342e:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103433:	e9 d9 f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103438 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103438:	6a 00                	push   $0x0
  pushl $225
c010343a:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010343f:	e9 cd f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103444 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103444:	6a 00                	push   $0x0
  pushl $226
c0103446:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010344b:	e9 c1 f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103450 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103450:	6a 00                	push   $0x0
  pushl $227
c0103452:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103457:	e9 b5 f6 ff ff       	jmp    c0102b11 <__alltraps>

c010345c <vector228>:
.globl vector228
vector228:
  pushl $0
c010345c:	6a 00                	push   $0x0
  pushl $228
c010345e:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103463:	e9 a9 f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103468 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103468:	6a 00                	push   $0x0
  pushl $229
c010346a:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010346f:	e9 9d f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103474 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103474:	6a 00                	push   $0x0
  pushl $230
c0103476:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c010347b:	e9 91 f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103480 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103480:	6a 00                	push   $0x0
  pushl $231
c0103482:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103487:	e9 85 f6 ff ff       	jmp    c0102b11 <__alltraps>

c010348c <vector232>:
.globl vector232
vector232:
  pushl $0
c010348c:	6a 00                	push   $0x0
  pushl $232
c010348e:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103493:	e9 79 f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103498 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103498:	6a 00                	push   $0x0
  pushl $233
c010349a:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010349f:	e9 6d f6 ff ff       	jmp    c0102b11 <__alltraps>

c01034a4 <vector234>:
.globl vector234
vector234:
  pushl $0
c01034a4:	6a 00                	push   $0x0
  pushl $234
c01034a6:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034ab:	e9 61 f6 ff ff       	jmp    c0102b11 <__alltraps>

c01034b0 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034b0:	6a 00                	push   $0x0
  pushl $235
c01034b2:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034b7:	e9 55 f6 ff ff       	jmp    c0102b11 <__alltraps>

c01034bc <vector236>:
.globl vector236
vector236:
  pushl $0
c01034bc:	6a 00                	push   $0x0
  pushl $236
c01034be:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034c3:	e9 49 f6 ff ff       	jmp    c0102b11 <__alltraps>

c01034c8 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034c8:	6a 00                	push   $0x0
  pushl $237
c01034ca:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034cf:	e9 3d f6 ff ff       	jmp    c0102b11 <__alltraps>

c01034d4 <vector238>:
.globl vector238
vector238:
  pushl $0
c01034d4:	6a 00                	push   $0x0
  pushl $238
c01034d6:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034db:	e9 31 f6 ff ff       	jmp    c0102b11 <__alltraps>

c01034e0 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034e0:	6a 00                	push   $0x0
  pushl $239
c01034e2:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034e7:	e9 25 f6 ff ff       	jmp    c0102b11 <__alltraps>

c01034ec <vector240>:
.globl vector240
vector240:
  pushl $0
c01034ec:	6a 00                	push   $0x0
  pushl $240
c01034ee:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034f3:	e9 19 f6 ff ff       	jmp    c0102b11 <__alltraps>

c01034f8 <vector241>:
.globl vector241
vector241:
  pushl $0
c01034f8:	6a 00                	push   $0x0
  pushl $241
c01034fa:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034ff:	e9 0d f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103504 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103504:	6a 00                	push   $0x0
  pushl $242
c0103506:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c010350b:	e9 01 f6 ff ff       	jmp    c0102b11 <__alltraps>

c0103510 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103510:	6a 00                	push   $0x0
  pushl $243
c0103512:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103517:	e9 f5 f5 ff ff       	jmp    c0102b11 <__alltraps>

c010351c <vector244>:
.globl vector244
vector244:
  pushl $0
c010351c:	6a 00                	push   $0x0
  pushl $244
c010351e:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103523:	e9 e9 f5 ff ff       	jmp    c0102b11 <__alltraps>

c0103528 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103528:	6a 00                	push   $0x0
  pushl $245
c010352a:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010352f:	e9 dd f5 ff ff       	jmp    c0102b11 <__alltraps>

c0103534 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103534:	6a 00                	push   $0x0
  pushl $246
c0103536:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010353b:	e9 d1 f5 ff ff       	jmp    c0102b11 <__alltraps>

c0103540 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103540:	6a 00                	push   $0x0
  pushl $247
c0103542:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103547:	e9 c5 f5 ff ff       	jmp    c0102b11 <__alltraps>

c010354c <vector248>:
.globl vector248
vector248:
  pushl $0
c010354c:	6a 00                	push   $0x0
  pushl $248
c010354e:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103553:	e9 b9 f5 ff ff       	jmp    c0102b11 <__alltraps>

c0103558 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103558:	6a 00                	push   $0x0
  pushl $249
c010355a:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010355f:	e9 ad f5 ff ff       	jmp    c0102b11 <__alltraps>

c0103564 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103564:	6a 00                	push   $0x0
  pushl $250
c0103566:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010356b:	e9 a1 f5 ff ff       	jmp    c0102b11 <__alltraps>

c0103570 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103570:	6a 00                	push   $0x0
  pushl $251
c0103572:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103577:	e9 95 f5 ff ff       	jmp    c0102b11 <__alltraps>

c010357c <vector252>:
.globl vector252
vector252:
  pushl $0
c010357c:	6a 00                	push   $0x0
  pushl $252
c010357e:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103583:	e9 89 f5 ff ff       	jmp    c0102b11 <__alltraps>

c0103588 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103588:	6a 00                	push   $0x0
  pushl $253
c010358a:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010358f:	e9 7d f5 ff ff       	jmp    c0102b11 <__alltraps>

c0103594 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103594:	6a 00                	push   $0x0
  pushl $254
c0103596:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c010359b:	e9 71 f5 ff ff       	jmp    c0102b11 <__alltraps>

c01035a0 <vector255>:
.globl vector255
vector255:
  pushl $0
c01035a0:	6a 00                	push   $0x0
  pushl $255
c01035a2:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035a7:	e9 65 f5 ff ff       	jmp    c0102b11 <__alltraps>

c01035ac <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01035ac:	55                   	push   %ebp
c01035ad:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01035af:	8b 55 08             	mov    0x8(%ebp),%edx
c01035b2:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01035b7:	29 c2                	sub    %eax,%edx
c01035b9:	89 d0                	mov    %edx,%eax
c01035bb:	c1 f8 05             	sar    $0x5,%eax
}
c01035be:	5d                   	pop    %ebp
c01035bf:	c3                   	ret    

c01035c0 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035c0:	55                   	push   %ebp
c01035c1:	89 e5                	mov    %esp,%ebp
c01035c3:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01035c9:	89 04 24             	mov    %eax,(%esp)
c01035cc:	e8 db ff ff ff       	call   c01035ac <page2ppn>
c01035d1:	c1 e0 0c             	shl    $0xc,%eax
}
c01035d4:	c9                   	leave  
c01035d5:	c3                   	ret    

c01035d6 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035d6:	55                   	push   %ebp
c01035d7:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01035dc:	8b 00                	mov    (%eax),%eax
}
c01035de:	5d                   	pop    %ebp
c01035df:	c3                   	ret    

c01035e0 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035e0:	55                   	push   %ebp
c01035e1:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01035e6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035e9:	89 10                	mov    %edx,(%eax)
}
c01035eb:	5d                   	pop    %ebp
c01035ec:	c3                   	ret    

c01035ed <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01035ed:	55                   	push   %ebp
c01035ee:	89 e5                	mov    %esp,%ebp
c01035f0:	83 ec 10             	sub    $0x10,%esp
c01035f3:	c7 45 fc 14 30 15 c0 	movl   $0xc0153014,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035fd:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103600:	89 50 04             	mov    %edx,0x4(%eax)
c0103603:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103606:	8b 50 04             	mov    0x4(%eax),%edx
c0103609:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010360c:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c010360e:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0103615:	00 00 00 
}
c0103618:	c9                   	leave  
c0103619:	c3                   	ret    

c010361a <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010361a:	55                   	push   %ebp
c010361b:	89 e5                	mov    %esp,%ebp
c010361d:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103620:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103624:	75 24                	jne    c010364a <default_init_memmap+0x30>
c0103626:	c7 44 24 0c f0 5e 11 	movl   $0xc0115ef0,0xc(%esp)
c010362d:	c0 
c010362e:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103635:	c0 
c0103636:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010363d:	00 
c010363e:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103645:	e8 6a d8 ff ff       	call   c0100eb4 <__panic>
    struct Page *p = base;
c010364a:	8b 45 08             	mov    0x8(%ebp),%eax
c010364d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103650:	e9 dc 00 00 00       	jmp    c0103731 <default_init_memmap+0x117>
        assert(PageReserved(p));
c0103655:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103658:	83 c0 04             	add    $0x4,%eax
c010365b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103662:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103665:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103668:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010366b:	0f a3 10             	bt     %edx,(%eax)
c010366e:	19 c0                	sbb    %eax,%eax
c0103670:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103673:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103677:	0f 95 c0             	setne  %al
c010367a:	0f b6 c0             	movzbl %al,%eax
c010367d:	85 c0                	test   %eax,%eax
c010367f:	75 24                	jne    c01036a5 <default_init_memmap+0x8b>
c0103681:	c7 44 24 0c 21 5f 11 	movl   $0xc0115f21,0xc(%esp)
c0103688:	c0 
c0103689:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103690:	c0 
c0103691:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0103698:	00 
c0103699:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01036a0:	e8 0f d8 ff ff       	call   c0100eb4 <__panic>
        p->flags = 0;
c01036a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);//表示该页为空
c01036af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036b2:	83 c0 04             	add    $0x4,%eax
c01036b5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036c5:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c01036c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036cb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c01036d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036d9:	00 
c01036da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036dd:	89 04 24             	mov    %eax,(%esp)
c01036e0:	e8 fb fe ff ff       	call   c01035e0 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));//将遍历得到的空闲页加入空闲页表
c01036e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036e8:	83 c0 0c             	add    $0xc,%eax
c01036eb:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
c01036f2:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01036f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036f8:	8b 00                	mov    (%eax),%eax
c01036fa:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01036fd:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103700:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103703:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103706:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103709:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010370c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010370f:	89 10                	mov    %edx,(%eax)
c0103711:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103714:	8b 10                	mov    (%eax),%edx
c0103716:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103719:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010371c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010371f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103722:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103725:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103728:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010372b:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010372d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103731:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103734:	c1 e0 05             	shl    $0x5,%eax
c0103737:	89 c2                	mov    %eax,%edx
c0103739:	8b 45 08             	mov    0x8(%ebp),%eax
c010373c:	01 d0                	add    %edx,%eax
c010373e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103741:	0f 85 0e ff ff ff    	jne    c0103655 <default_init_memmap+0x3b>
        SetPageProperty(p);//表示该页为空
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));//将遍历得到的空闲页加入空闲页表
    }
    nr_free += n;
c0103747:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c010374d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103750:	01 d0                	add    %edx,%eax
c0103752:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
    //first block
    base->property = n;
c0103757:	8b 45 08             	mov    0x8(%ebp),%eax
c010375a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010375d:	89 50 08             	mov    %edx,0x8(%eax)
}
c0103760:	c9                   	leave  
c0103761:	c3                   	ret    

c0103762 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0103762:	55                   	push   %ebp
c0103763:	89 e5                	mov    %esp,%ebp
c0103765:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103768:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010376c:	75 24                	jne    c0103792 <default_alloc_pages+0x30>
c010376e:	c7 44 24 0c f0 5e 11 	movl   $0xc0115ef0,0xc(%esp)
c0103775:	c0 
c0103776:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c010377d:	c0 
c010377e:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0103785:	00 
c0103786:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c010378d:	e8 22 d7 ff ff       	call   c0100eb4 <__panic>
    if (n > nr_free) {
c0103792:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103797:	3b 45 08             	cmp    0x8(%ebp),%eax
c010379a:	73 0a                	jae    c01037a6 <default_alloc_pages+0x44>
        return NULL;
c010379c:	b8 00 00 00 00       	mov    $0x0,%eax
c01037a1:	e9 37 01 00 00       	jmp    c01038dd <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len; //设置空闲页表
    le = &free_list;
c01037a6:	c7 45 f4 14 30 15 c0 	movl   $0xc0153014,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c01037ad:	e9 0a 01 00 00       	jmp    c01038bc <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c01037b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037b5:	83 e8 0c             	sub    $0xc,%eax
c01037b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c01037bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037be:	8b 40 08             	mov    0x8(%eax),%eax
c01037c1:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037c4:	0f 82 f2 00 00 00    	jb     c01038bc <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){ //遍历空闲页表
c01037ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01037d1:	eb 7c                	jmp    c010384f <default_alloc_pages+0xed>
c01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037dc:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c01037df:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c01037e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037e5:	83 e8 0c             	sub    $0xc,%eax
c01037e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c01037eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037ee:	83 c0 04             	add    $0x4,%eax
c01037f1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01037f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01037fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037fe:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103801:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0103804:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103807:	83 c0 04             	add    $0x4,%eax
c010380a:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103811:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103814:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103817:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010381a:	0f b3 10             	btr    %edx,(%eax)
c010381d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103820:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103823:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103826:	8b 40 04             	mov    0x4(%eax),%eax
c0103829:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010382c:	8b 12                	mov    (%edx),%edx
c010382e:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103831:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103834:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103837:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010383a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010383d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103840:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103843:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;//找到空闲块，将其从空闲页表删去并取出
c0103845:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103848:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){ //遍历空闲页表
c010384b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010384f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103852:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103855:	0f 82 78 ff ff ff    	jb     c01037d3 <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;//找到空闲块，将其从空闲页表删去并取出
        }
        if(p->property>n){
c010385b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010385e:	8b 40 08             	mov    0x8(%eax),%eax
c0103861:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103864:	76 12                	jbe    c0103878 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;//如果页块大小大于所需大小，分割页块
c0103866:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103869:	8d 50 f4             	lea    -0xc(%eax),%edx
c010386c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010386f:	8b 40 08             	mov    0x8(%eax),%eax
c0103872:	2b 45 08             	sub    0x8(%ebp),%eax
c0103875:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0103878:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010387b:	83 c0 04             	add    $0x4,%eax
c010387e:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103885:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0103888:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010388b:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010388e:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c0103891:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103894:	83 c0 04             	add    $0x4,%eax
c0103897:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c010389e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01038a1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01038a4:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01038a7:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;//减去已分配页块重新计算新的空闲页表
c01038aa:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01038af:	2b 45 08             	sub    0x8(%ebp),%eax
c01038b2:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
        return p;
c01038b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038ba:	eb 21                	jmp    c01038dd <default_alloc_pages+0x17b>
c01038bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038bf:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038c2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01038c5:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len; //设置空闲页表
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c01038c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038cb:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c01038d2:	0f 85 da fe ff ff    	jne    c01037b2 <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;//减去已分配页块重新计算新的空闲页表
        return p;
      }
    }
    return NULL;
c01038d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01038dd:	c9                   	leave  
c01038de:	c3                   	ret    

c01038df <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038df:	55                   	push   %ebp
c01038e0:	89 e5                	mov    %esp,%ebp
c01038e2:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01038e5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01038e9:	75 24                	jne    c010390f <default_free_pages+0x30>
c01038eb:	c7 44 24 0c f0 5e 11 	movl   $0xc0115ef0,0xc(%esp)
c01038f2:	c0 
c01038f3:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c01038fa:	c0 
c01038fb:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0103902:	00 
c0103903:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c010390a:	e8 a5 d5 ff ff       	call   c0100eb4 <__panic>
    assert(PageReserved(base));//检查待释放的页块是否已经被分配
c010390f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103912:	83 c0 04             	add    $0x4,%eax
c0103915:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010391c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010391f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103922:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103925:	0f a3 10             	bt     %edx,(%eax)
c0103928:	19 c0                	sbb    %eax,%eax
c010392a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c010392d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103931:	0f 95 c0             	setne  %al
c0103934:	0f b6 c0             	movzbl %al,%eax
c0103937:	85 c0                	test   %eax,%eax
c0103939:	75 24                	jne    c010395f <default_free_pages+0x80>
c010393b:	c7 44 24 0c 31 5f 11 	movl   $0xc0115f31,0xc(%esp)
c0103942:	c0 
c0103943:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c010394a:	c0 
c010394b:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0103952:	00 
c0103953:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c010395a:	e8 55 d5 ff ff       	call   c0100eb4 <__panic>
    list_entry_t *le = &free_list;
c010395f:	c7 45 f4 14 30 15 c0 	movl   $0xc0153014,-0xc(%ebp)
    struct Page * p;
    //找到对应的位置
    while((le=list_next(le)) != &free_list) {
c0103966:	eb 13                	jmp    c010397b <default_free_pages+0x9c>
      p = le2page(le, page_link);//获取对应的页表位置
c0103968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010396b:	83 e8 0c             	sub    $0xc,%eax
c010396e:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c0103971:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103974:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103977:	76 02                	jbe    c010397b <default_free_pages+0x9c>
        break;
c0103979:	eb 18                	jmp    c0103993 <default_free_pages+0xb4>
c010397b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010397e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103981:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103984:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));//检查待释放的页块是否已经被分配
    list_entry_t *le = &free_list;
    struct Page * p;
    //找到对应的位置
    while((le=list_next(le)) != &free_list) {
c0103987:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010398a:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c0103991:	75 d5                	jne    c0103968 <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0103993:	8b 45 08             	mov    0x8(%ebp),%eax
c0103996:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103999:	eb 4b                	jmp    c01039e6 <default_free_pages+0x107>
      //将空闲块对应的页表插入空闲页表中
      list_add_before(le, &(p->page_link));
c010399b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010399e:	8d 50 0c             	lea    0xc(%eax),%edx
c01039a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01039a7:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01039aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039ad:	8b 00                	mov    (%eax),%eax
c01039af:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01039b2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01039b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039be:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01039c4:	89 10                	mov    %edx,(%eax)
c01039c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039c9:	8b 10                	mov    (%eax),%edx
c01039cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039ce:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039d4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039d7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039dd:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01039e0:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039e2:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
c01039e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039e9:	c1 e0 05             	shl    $0x5,%eax
c01039ec:	89 c2                	mov    %eax,%edx
c01039ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01039f1:	01 d0                	add    %edx,%eax
c01039f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01039f6:	77 a3                	ja     c010399b <default_free_pages+0xbc>
      //将空闲块对应的页表插入空闲页表中
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;//修改标志位
c01039f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01039fb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0103a02:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a09:	00 
c0103a0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0d:	89 04 24             	mov    %eax,(%esp)
c0103a10:	e8 cb fb ff ff       	call   c01035e0 <set_page_ref>
    ClearPageProperty(base);
c0103a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a18:	83 c0 04             	add    $0x4,%eax
c0103a1b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103a22:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a25:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a28:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a2b:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0103a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a31:	83 c0 04             	add    $0x4,%eax
c0103a34:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103a3b:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a3e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a41:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103a44:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0103a47:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a4a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a4d:	89 50 08             	mov    %edx,0x8(%eax)
    //设置连续大小为n，如果是高位则向高地址合并
    p = le2page(le,page_link) ;
c0103a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a53:	83 e8 0c             	sub    $0xc,%eax
c0103a56:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0103a59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a5c:	c1 e0 05             	shl    $0x5,%eax
c0103a5f:	89 c2                	mov    %eax,%edx
c0103a61:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a64:	01 d0                	add    %edx,%eax
c0103a66:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a69:	75 1e                	jne    c0103a89 <default_free_pages+0x1aa>
      base->property += p->property;
c0103a6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a6e:	8b 50 08             	mov    0x8(%eax),%edx
c0103a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a74:	8b 40 08             	mov    0x8(%eax),%eax
c0103a77:	01 c2                	add    %eax,%edx
c0103a79:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a7c:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0103a7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a82:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    //如果是低位，着向低地址合并
    le = list_prev(&(base->page_link));
c0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a8c:	83 c0 0c             	add    $0xc,%eax
c0103a8f:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103a92:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103a95:	8b 00                	mov    (%eax),%eax
c0103a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0103a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a9d:	83 e8 0c             	sub    $0xc,%eax
c0103aa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0103aa3:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c0103aaa:	74 57                	je     c0103b03 <default_free_pages+0x224>
c0103aac:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aaf:	83 e8 20             	sub    $0x20,%eax
c0103ab2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ab5:	75 4c                	jne    c0103b03 <default_free_pages+0x224>
    //没有被分配的块进行合并
      while(le!=&free_list){
c0103ab7:	eb 41                	jmp    c0103afa <default_free_pages+0x21b>
        if(p->property){
c0103ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103abc:	8b 40 08             	mov    0x8(%eax),%eax
c0103abf:	85 c0                	test   %eax,%eax
c0103ac1:	74 20                	je     c0103ae3 <default_free_pages+0x204>
          p->property += base->property;
c0103ac3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ac6:	8b 50 08             	mov    0x8(%eax),%edx
c0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
c0103acc:	8b 40 08             	mov    0x8(%eax),%eax
c0103acf:	01 c2                	add    %eax,%edx
c0103ad1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ad4:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103ad7:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ada:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103ae1:	eb 20                	jmp    c0103b03 <default_free_pages+0x224>
c0103ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ae6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103ae9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103aec:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103aee:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103af4:	83 e8 0c             	sub    $0xc,%eax
c0103af7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //如果是低位，着向低地址合并
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
    //没有被分配的块进行合并
      while(le!=&free_list){
c0103afa:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c0103b01:	75 b6                	jne    c0103ab9 <default_free_pages+0x1da>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0103b03:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c0103b09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b0c:	01 d0                	add    %edx,%eax
c0103b0e:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
    return ;
c0103b13:	90                   	nop
}
c0103b14:	c9                   	leave  
c0103b15:	c3                   	ret    

c0103b16 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103b16:	55                   	push   %ebp
c0103b17:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103b19:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
}
c0103b1e:	5d                   	pop    %ebp
c0103b1f:	c3                   	ret    

c0103b20 <basic_check>:

static void
basic_check(void) {
c0103b20:	55                   	push   %ebp
c0103b21:	89 e5                	mov    %esp,%ebp
c0103b23:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b30:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b36:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b39:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b40:	e8 dc 15 00 00       	call   c0105121 <alloc_pages>
c0103b45:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b48:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b4c:	75 24                	jne    c0103b72 <basic_check+0x52>
c0103b4e:	c7 44 24 0c 44 5f 11 	movl   $0xc0115f44,0xc(%esp)
c0103b55:	c0 
c0103b56:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103b5d:	c0 
c0103b5e:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0103b65:	00 
c0103b66:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103b6d:	e8 42 d3 ff ff       	call   c0100eb4 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b72:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b79:	e8 a3 15 00 00       	call   c0105121 <alloc_pages>
c0103b7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b85:	75 24                	jne    c0103bab <basic_check+0x8b>
c0103b87:	c7 44 24 0c 60 5f 11 	movl   $0xc0115f60,0xc(%esp)
c0103b8e:	c0 
c0103b8f:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103b96:	c0 
c0103b97:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103b9e:	00 
c0103b9f:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103ba6:	e8 09 d3 ff ff       	call   c0100eb4 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103bab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bb2:	e8 6a 15 00 00       	call   c0105121 <alloc_pages>
c0103bb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103bbe:	75 24                	jne    c0103be4 <basic_check+0xc4>
c0103bc0:	c7 44 24 0c 7c 5f 11 	movl   $0xc0115f7c,0xc(%esp)
c0103bc7:	c0 
c0103bc8:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103bcf:	c0 
c0103bd0:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103bd7:	00 
c0103bd8:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103bdf:	e8 d0 d2 ff ff       	call   c0100eb4 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103be4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103be7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bea:	74 10                	je     c0103bfc <basic_check+0xdc>
c0103bec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103bf2:	74 08                	je     c0103bfc <basic_check+0xdc>
c0103bf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bf7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103bfa:	75 24                	jne    c0103c20 <basic_check+0x100>
c0103bfc:	c7 44 24 0c 98 5f 11 	movl   $0xc0115f98,0xc(%esp)
c0103c03:	c0 
c0103c04:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103c0b:	c0 
c0103c0c:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103c13:	00 
c0103c14:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103c1b:	e8 94 d2 ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103c20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c23:	89 04 24             	mov    %eax,(%esp)
c0103c26:	e8 ab f9 ff ff       	call   c01035d6 <page_ref>
c0103c2b:	85 c0                	test   %eax,%eax
c0103c2d:	75 1e                	jne    c0103c4d <basic_check+0x12d>
c0103c2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c32:	89 04 24             	mov    %eax,(%esp)
c0103c35:	e8 9c f9 ff ff       	call   c01035d6 <page_ref>
c0103c3a:	85 c0                	test   %eax,%eax
c0103c3c:	75 0f                	jne    c0103c4d <basic_check+0x12d>
c0103c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c41:	89 04 24             	mov    %eax,(%esp)
c0103c44:	e8 8d f9 ff ff       	call   c01035d6 <page_ref>
c0103c49:	85 c0                	test   %eax,%eax
c0103c4b:	74 24                	je     c0103c71 <basic_check+0x151>
c0103c4d:	c7 44 24 0c bc 5f 11 	movl   $0xc0115fbc,0xc(%esp)
c0103c54:	c0 
c0103c55:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103c5c:	c0 
c0103c5d:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103c64:	00 
c0103c65:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103c6c:	e8 43 d2 ff ff       	call   c0100eb4 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c74:	89 04 24             	mov    %eax,(%esp)
c0103c77:	e8 44 f9 ff ff       	call   c01035c0 <page2pa>
c0103c7c:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103c82:	c1 e2 0c             	shl    $0xc,%edx
c0103c85:	39 d0                	cmp    %edx,%eax
c0103c87:	72 24                	jb     c0103cad <basic_check+0x18d>
c0103c89:	c7 44 24 0c f8 5f 11 	movl   $0xc0115ff8,0xc(%esp)
c0103c90:	c0 
c0103c91:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103c98:	c0 
c0103c99:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0103ca0:	00 
c0103ca1:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103ca8:	e8 07 d2 ff ff       	call   c0100eb4 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103cad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cb0:	89 04 24             	mov    %eax,(%esp)
c0103cb3:	e8 08 f9 ff ff       	call   c01035c0 <page2pa>
c0103cb8:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103cbe:	c1 e2 0c             	shl    $0xc,%edx
c0103cc1:	39 d0                	cmp    %edx,%eax
c0103cc3:	72 24                	jb     c0103ce9 <basic_check+0x1c9>
c0103cc5:	c7 44 24 0c 15 60 11 	movl   $0xc0116015,0xc(%esp)
c0103ccc:	c0 
c0103ccd:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103cd4:	c0 
c0103cd5:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0103cdc:	00 
c0103cdd:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103ce4:	e8 cb d1 ff ff       	call   c0100eb4 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103ce9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cec:	89 04 24             	mov    %eax,(%esp)
c0103cef:	e8 cc f8 ff ff       	call   c01035c0 <page2pa>
c0103cf4:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103cfa:	c1 e2 0c             	shl    $0xc,%edx
c0103cfd:	39 d0                	cmp    %edx,%eax
c0103cff:	72 24                	jb     c0103d25 <basic_check+0x205>
c0103d01:	c7 44 24 0c 32 60 11 	movl   $0xc0116032,0xc(%esp)
c0103d08:	c0 
c0103d09:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103d10:	c0 
c0103d11:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
c0103d18:	00 
c0103d19:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103d20:	e8 8f d1 ff ff       	call   c0100eb4 <__panic>

    list_entry_t free_list_store = free_list;
c0103d25:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c0103d2a:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0103d30:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d33:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d36:	c7 45 e0 14 30 15 c0 	movl   $0xc0153014,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d40:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d43:	89 50 04             	mov    %edx,0x4(%eax)
c0103d46:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d49:	8b 50 04             	mov    0x4(%eax),%edx
c0103d4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d4f:	89 10                	mov    %edx,(%eax)
c0103d51:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d58:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d5b:	8b 40 04             	mov    0x4(%eax),%eax
c0103d5e:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d61:	0f 94 c0             	sete   %al
c0103d64:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d67:	85 c0                	test   %eax,%eax
c0103d69:	75 24                	jne    c0103d8f <basic_check+0x26f>
c0103d6b:	c7 44 24 0c 4f 60 11 	movl   $0xc011604f,0xc(%esp)
c0103d72:	c0 
c0103d73:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103d7a:	c0 
c0103d7b:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0103d82:	00 
c0103d83:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103d8a:	e8 25 d1 ff ff       	call   c0100eb4 <__panic>

    unsigned int nr_free_store = nr_free;
c0103d8f:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103d94:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103d97:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0103d9e:	00 00 00 

    assert(alloc_page() == NULL);
c0103da1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103da8:	e8 74 13 00 00       	call   c0105121 <alloc_pages>
c0103dad:	85 c0                	test   %eax,%eax
c0103daf:	74 24                	je     c0103dd5 <basic_check+0x2b5>
c0103db1:	c7 44 24 0c 66 60 11 	movl   $0xc0116066,0xc(%esp)
c0103db8:	c0 
c0103db9:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103dc0:	c0 
c0103dc1:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
c0103dc8:	00 
c0103dc9:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103dd0:	e8 df d0 ff ff       	call   c0100eb4 <__panic>

    free_page(p0);
c0103dd5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ddc:	00 
c0103ddd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103de0:	89 04 24             	mov    %eax,(%esp)
c0103de3:	e8 a4 13 00 00       	call   c010518c <free_pages>
    free_page(p1);
c0103de8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103def:	00 
c0103df0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103df3:	89 04 24             	mov    %eax,(%esp)
c0103df6:	e8 91 13 00 00       	call   c010518c <free_pages>
    free_page(p2);
c0103dfb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e02:	00 
c0103e03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e06:	89 04 24             	mov    %eax,(%esp)
c0103e09:	e8 7e 13 00 00       	call   c010518c <free_pages>
    assert(nr_free == 3);
c0103e0e:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103e13:	83 f8 03             	cmp    $0x3,%eax
c0103e16:	74 24                	je     c0103e3c <basic_check+0x31c>
c0103e18:	c7 44 24 0c 7b 60 11 	movl   $0xc011607b,0xc(%esp)
c0103e1f:	c0 
c0103e20:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103e27:	c0 
c0103e28:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103e2f:	00 
c0103e30:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103e37:	e8 78 d0 ff ff       	call   c0100eb4 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e3c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e43:	e8 d9 12 00 00       	call   c0105121 <alloc_pages>
c0103e48:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e4b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e4f:	75 24                	jne    c0103e75 <basic_check+0x355>
c0103e51:	c7 44 24 0c 44 5f 11 	movl   $0xc0115f44,0xc(%esp)
c0103e58:	c0 
c0103e59:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103e60:	c0 
c0103e61:	c7 44 24 04 c9 00 00 	movl   $0xc9,0x4(%esp)
c0103e68:	00 
c0103e69:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103e70:	e8 3f d0 ff ff       	call   c0100eb4 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e75:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e7c:	e8 a0 12 00 00       	call   c0105121 <alloc_pages>
c0103e81:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e84:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e88:	75 24                	jne    c0103eae <basic_check+0x38e>
c0103e8a:	c7 44 24 0c 60 5f 11 	movl   $0xc0115f60,0xc(%esp)
c0103e91:	c0 
c0103e92:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103e99:	c0 
c0103e9a:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103ea1:	00 
c0103ea2:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103ea9:	e8 06 d0 ff ff       	call   c0100eb4 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103eae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103eb5:	e8 67 12 00 00       	call   c0105121 <alloc_pages>
c0103eba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ebd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ec1:	75 24                	jne    c0103ee7 <basic_check+0x3c7>
c0103ec3:	c7 44 24 0c 7c 5f 11 	movl   $0xc0115f7c,0xc(%esp)
c0103eca:	c0 
c0103ecb:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103ed2:	c0 
c0103ed3:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0103eda:	00 
c0103edb:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103ee2:	e8 cd cf ff ff       	call   c0100eb4 <__panic>

    assert(alloc_page() == NULL);
c0103ee7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103eee:	e8 2e 12 00 00       	call   c0105121 <alloc_pages>
c0103ef3:	85 c0                	test   %eax,%eax
c0103ef5:	74 24                	je     c0103f1b <basic_check+0x3fb>
c0103ef7:	c7 44 24 0c 66 60 11 	movl   $0xc0116066,0xc(%esp)
c0103efe:	c0 
c0103eff:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103f06:	c0 
c0103f07:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103f0e:	00 
c0103f0f:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103f16:	e8 99 cf ff ff       	call   c0100eb4 <__panic>

    free_page(p0);
c0103f1b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f22:	00 
c0103f23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f26:	89 04 24             	mov    %eax,(%esp)
c0103f29:	e8 5e 12 00 00       	call   c010518c <free_pages>
c0103f2e:	c7 45 d8 14 30 15 c0 	movl   $0xc0153014,-0x28(%ebp)
c0103f35:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f38:	8b 40 04             	mov    0x4(%eax),%eax
c0103f3b:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f3e:	0f 94 c0             	sete   %al
c0103f41:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f44:	85 c0                	test   %eax,%eax
c0103f46:	74 24                	je     c0103f6c <basic_check+0x44c>
c0103f48:	c7 44 24 0c 88 60 11 	movl   $0xc0116088,0xc(%esp)
c0103f4f:	c0 
c0103f50:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103f57:	c0 
c0103f58:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103f5f:	00 
c0103f60:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103f67:	e8 48 cf ff ff       	call   c0100eb4 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f6c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f73:	e8 a9 11 00 00       	call   c0105121 <alloc_pages>
c0103f78:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103f7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f7e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f81:	74 24                	je     c0103fa7 <basic_check+0x487>
c0103f83:	c7 44 24 0c a0 60 11 	movl   $0xc01160a0,0xc(%esp)
c0103f8a:	c0 
c0103f8b:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103f92:	c0 
c0103f93:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0103f9a:	00 
c0103f9b:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103fa2:	e8 0d cf ff ff       	call   c0100eb4 <__panic>
    assert(alloc_page() == NULL);
c0103fa7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fae:	e8 6e 11 00 00       	call   c0105121 <alloc_pages>
c0103fb3:	85 c0                	test   %eax,%eax
c0103fb5:	74 24                	je     c0103fdb <basic_check+0x4bb>
c0103fb7:	c7 44 24 0c 66 60 11 	movl   $0xc0116066,0xc(%esp)
c0103fbe:	c0 
c0103fbf:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103fc6:	c0 
c0103fc7:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
c0103fce:	00 
c0103fcf:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0103fd6:	e8 d9 ce ff ff       	call   c0100eb4 <__panic>

    assert(nr_free == 0);
c0103fdb:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103fe0:	85 c0                	test   %eax,%eax
c0103fe2:	74 24                	je     c0104008 <basic_check+0x4e8>
c0103fe4:	c7 44 24 0c b9 60 11 	movl   $0xc01160b9,0xc(%esp)
c0103feb:	c0 
c0103fec:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0103ff3:	c0 
c0103ff4:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0103ffb:	00 
c0103ffc:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0104003:	e8 ac ce ff ff       	call   c0100eb4 <__panic>
    free_list = free_list_store;
c0104008:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010400b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010400e:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c0104013:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    nr_free = nr_free_store;
c0104019:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010401c:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_page(p);
c0104021:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104028:	00 
c0104029:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010402c:	89 04 24             	mov    %eax,(%esp)
c010402f:	e8 58 11 00 00       	call   c010518c <free_pages>
    free_page(p1);
c0104034:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010403b:	00 
c010403c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010403f:	89 04 24             	mov    %eax,(%esp)
c0104042:	e8 45 11 00 00       	call   c010518c <free_pages>
    free_page(p2);
c0104047:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010404e:	00 
c010404f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104052:	89 04 24             	mov    %eax,(%esp)
c0104055:	e8 32 11 00 00       	call   c010518c <free_pages>
}
c010405a:	c9                   	leave  
c010405b:	c3                   	ret    

c010405c <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c010405c:	55                   	push   %ebp
c010405d:	89 e5                	mov    %esp,%ebp
c010405f:	53                   	push   %ebx
c0104060:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104066:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010406d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104074:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010407b:	eb 6b                	jmp    c01040e8 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c010407d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104080:	83 e8 0c             	sub    $0xc,%eax
c0104083:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104086:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104089:	83 c0 04             	add    $0x4,%eax
c010408c:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0104093:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104096:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104099:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010409c:	0f a3 10             	bt     %edx,(%eax)
c010409f:	19 c0                	sbb    %eax,%eax
c01040a1:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01040a4:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01040a8:	0f 95 c0             	setne  %al
c01040ab:	0f b6 c0             	movzbl %al,%eax
c01040ae:	85 c0                	test   %eax,%eax
c01040b0:	75 24                	jne    c01040d6 <default_check+0x7a>
c01040b2:	c7 44 24 0c c6 60 11 	movl   $0xc01160c6,0xc(%esp)
c01040b9:	c0 
c01040ba:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c01040c1:	c0 
c01040c2:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c01040c9:	00 
c01040ca:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01040d1:	e8 de cd ff ff       	call   c0100eb4 <__panic>
        count ++, total += p->property;
c01040d6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01040da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040dd:	8b 50 08             	mov    0x8(%eax),%edx
c01040e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040e3:	01 d0                	add    %edx,%eax
c01040e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01040e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040eb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01040ee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01040f1:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01040f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01040f7:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c01040fe:	0f 85 79 ff ff ff    	jne    c010407d <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0104104:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0104107:	e8 b2 10 00 00       	call   c01051be <nr_free_pages>
c010410c:	39 c3                	cmp    %eax,%ebx
c010410e:	74 24                	je     c0104134 <default_check+0xd8>
c0104110:	c7 44 24 0c d6 60 11 	movl   $0xc01160d6,0xc(%esp)
c0104117:	c0 
c0104118:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c010411f:	c0 
c0104120:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0104127:	00 
c0104128:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c010412f:	e8 80 cd ff ff       	call   c0100eb4 <__panic>

    basic_check();
c0104134:	e8 e7 f9 ff ff       	call   c0103b20 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104139:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104140:	e8 dc 0f 00 00       	call   c0105121 <alloc_pages>
c0104145:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104148:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010414c:	75 24                	jne    c0104172 <default_check+0x116>
c010414e:	c7 44 24 0c ef 60 11 	movl   $0xc01160ef,0xc(%esp)
c0104155:	c0 
c0104156:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c010415d:	c0 
c010415e:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c0104165:	00 
c0104166:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c010416d:	e8 42 cd ff ff       	call   c0100eb4 <__panic>
    assert(!PageProperty(p0));
c0104172:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104175:	83 c0 04             	add    $0x4,%eax
c0104178:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010417f:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104182:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104185:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104188:	0f a3 10             	bt     %edx,(%eax)
c010418b:	19 c0                	sbb    %eax,%eax
c010418d:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0104190:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104194:	0f 95 c0             	setne  %al
c0104197:	0f b6 c0             	movzbl %al,%eax
c010419a:	85 c0                	test   %eax,%eax
c010419c:	74 24                	je     c01041c2 <default_check+0x166>
c010419e:	c7 44 24 0c fa 60 11 	movl   $0xc01160fa,0xc(%esp)
c01041a5:	c0 
c01041a6:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c01041ad:	c0 
c01041ae:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c01041b5:	00 
c01041b6:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01041bd:	e8 f2 cc ff ff       	call   c0100eb4 <__panic>

    list_entry_t free_list_store = free_list;
c01041c2:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c01041c7:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c01041cd:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041d0:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041d3:	c7 45 b4 14 30 15 c0 	movl   $0xc0153014,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01041da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041dd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01041e0:	89 50 04             	mov    %edx,0x4(%eax)
c01041e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041e6:	8b 50 04             	mov    0x4(%eax),%edx
c01041e9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041ec:	89 10                	mov    %edx,(%eax)
c01041ee:	c7 45 b0 14 30 15 c0 	movl   $0xc0153014,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01041f5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01041f8:	8b 40 04             	mov    0x4(%eax),%eax
c01041fb:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01041fe:	0f 94 c0             	sete   %al
c0104201:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104204:	85 c0                	test   %eax,%eax
c0104206:	75 24                	jne    c010422c <default_check+0x1d0>
c0104208:	c7 44 24 0c 4f 60 11 	movl   $0xc011604f,0xc(%esp)
c010420f:	c0 
c0104210:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0104217:	c0 
c0104218:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
c010421f:	00 
c0104220:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0104227:	e8 88 cc ff ff       	call   c0100eb4 <__panic>
    assert(alloc_page() == NULL);
c010422c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104233:	e8 e9 0e 00 00       	call   c0105121 <alloc_pages>
c0104238:	85 c0                	test   %eax,%eax
c010423a:	74 24                	je     c0104260 <default_check+0x204>
c010423c:	c7 44 24 0c 66 60 11 	movl   $0xc0116066,0xc(%esp)
c0104243:	c0 
c0104244:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c010424b:	c0 
c010424c:	c7 44 24 04 f5 00 00 	movl   $0xf5,0x4(%esp)
c0104253:	00 
c0104254:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c010425b:	e8 54 cc ff ff       	call   c0100eb4 <__panic>

    unsigned int nr_free_store = nr_free;
c0104260:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0104265:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104268:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c010426f:	00 00 00 

    free_pages(p0 + 2, 3);
c0104272:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104275:	83 c0 40             	add    $0x40,%eax
c0104278:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010427f:	00 
c0104280:	89 04 24             	mov    %eax,(%esp)
c0104283:	e8 04 0f 00 00       	call   c010518c <free_pages>
    assert(alloc_pages(4) == NULL);
c0104288:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010428f:	e8 8d 0e 00 00       	call   c0105121 <alloc_pages>
c0104294:	85 c0                	test   %eax,%eax
c0104296:	74 24                	je     c01042bc <default_check+0x260>
c0104298:	c7 44 24 0c 0c 61 11 	movl   $0xc011610c,0xc(%esp)
c010429f:	c0 
c01042a0:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c01042a7:	c0 
c01042a8:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01042af:	00 
c01042b0:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01042b7:	e8 f8 cb ff ff       	call   c0100eb4 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01042bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042bf:	83 c0 40             	add    $0x40,%eax
c01042c2:	83 c0 04             	add    $0x4,%eax
c01042c5:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042cc:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042cf:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042d2:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042d5:	0f a3 10             	bt     %edx,(%eax)
c01042d8:	19 c0                	sbb    %eax,%eax
c01042da:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01042dd:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01042e1:	0f 95 c0             	setne  %al
c01042e4:	0f b6 c0             	movzbl %al,%eax
c01042e7:	85 c0                	test   %eax,%eax
c01042e9:	74 0e                	je     c01042f9 <default_check+0x29d>
c01042eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042ee:	83 c0 40             	add    $0x40,%eax
c01042f1:	8b 40 08             	mov    0x8(%eax),%eax
c01042f4:	83 f8 03             	cmp    $0x3,%eax
c01042f7:	74 24                	je     c010431d <default_check+0x2c1>
c01042f9:	c7 44 24 0c 24 61 11 	movl   $0xc0116124,0xc(%esp)
c0104300:	c0 
c0104301:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0104308:	c0 
c0104309:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0104310:	00 
c0104311:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0104318:	e8 97 cb ff ff       	call   c0100eb4 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c010431d:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0104324:	e8 f8 0d 00 00       	call   c0105121 <alloc_pages>
c0104329:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010432c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104330:	75 24                	jne    c0104356 <default_check+0x2fa>
c0104332:	c7 44 24 0c 50 61 11 	movl   $0xc0116150,0xc(%esp)
c0104339:	c0 
c010433a:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0104341:	c0 
c0104342:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
c0104349:	00 
c010434a:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0104351:	e8 5e cb ff ff       	call   c0100eb4 <__panic>
    assert(alloc_page() == NULL);
c0104356:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010435d:	e8 bf 0d 00 00       	call   c0105121 <alloc_pages>
c0104362:	85 c0                	test   %eax,%eax
c0104364:	74 24                	je     c010438a <default_check+0x32e>
c0104366:	c7 44 24 0c 66 60 11 	movl   $0xc0116066,0xc(%esp)
c010436d:	c0 
c010436e:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0104375:	c0 
c0104376:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c010437d:	00 
c010437e:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0104385:	e8 2a cb ff ff       	call   c0100eb4 <__panic>
    assert(p0 + 2 == p1);
c010438a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010438d:	83 c0 40             	add    $0x40,%eax
c0104390:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104393:	74 24                	je     c01043b9 <default_check+0x35d>
c0104395:	c7 44 24 0c 6e 61 11 	movl   $0xc011616e,0xc(%esp)
c010439c:	c0 
c010439d:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c01043a4:	c0 
c01043a5:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c01043ac:	00 
c01043ad:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01043b4:	e8 fb ca ff ff       	call   c0100eb4 <__panic>

    p2 = p0 + 1;
c01043b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043bc:	83 c0 20             	add    $0x20,%eax
c01043bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01043c2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043c9:	00 
c01043ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043cd:	89 04 24             	mov    %eax,(%esp)
c01043d0:	e8 b7 0d 00 00       	call   c010518c <free_pages>
    free_pages(p1, 3);
c01043d5:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01043dc:	00 
c01043dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043e0:	89 04 24             	mov    %eax,(%esp)
c01043e3:	e8 a4 0d 00 00       	call   c010518c <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01043e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043eb:	83 c0 04             	add    $0x4,%eax
c01043ee:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01043f5:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043f8:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01043fb:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01043fe:	0f a3 10             	bt     %edx,(%eax)
c0104401:	19 c0                	sbb    %eax,%eax
c0104403:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0104406:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c010440a:	0f 95 c0             	setne  %al
c010440d:	0f b6 c0             	movzbl %al,%eax
c0104410:	85 c0                	test   %eax,%eax
c0104412:	74 0b                	je     c010441f <default_check+0x3c3>
c0104414:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104417:	8b 40 08             	mov    0x8(%eax),%eax
c010441a:	83 f8 01             	cmp    $0x1,%eax
c010441d:	74 24                	je     c0104443 <default_check+0x3e7>
c010441f:	c7 44 24 0c 7c 61 11 	movl   $0xc011617c,0xc(%esp)
c0104426:	c0 
c0104427:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c010442e:	c0 
c010442f:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0104436:	00 
c0104437:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c010443e:	e8 71 ca ff ff       	call   c0100eb4 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104443:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104446:	83 c0 04             	add    $0x4,%eax
c0104449:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104450:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104453:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104456:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104459:	0f a3 10             	bt     %edx,(%eax)
c010445c:	19 c0                	sbb    %eax,%eax
c010445e:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0104461:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104465:	0f 95 c0             	setne  %al
c0104468:	0f b6 c0             	movzbl %al,%eax
c010446b:	85 c0                	test   %eax,%eax
c010446d:	74 0b                	je     c010447a <default_check+0x41e>
c010446f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104472:	8b 40 08             	mov    0x8(%eax),%eax
c0104475:	83 f8 03             	cmp    $0x3,%eax
c0104478:	74 24                	je     c010449e <default_check+0x442>
c010447a:	c7 44 24 0c a4 61 11 	movl   $0xc01161a4,0xc(%esp)
c0104481:	c0 
c0104482:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0104489:	c0 
c010448a:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0104491:	00 
c0104492:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0104499:	e8 16 ca ff ff       	call   c0100eb4 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c010449e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044a5:	e8 77 0c 00 00       	call   c0105121 <alloc_pages>
c01044aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044b0:	83 e8 20             	sub    $0x20,%eax
c01044b3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044b6:	74 24                	je     c01044dc <default_check+0x480>
c01044b8:	c7 44 24 0c ca 61 11 	movl   $0xc01161ca,0xc(%esp)
c01044bf:	c0 
c01044c0:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c01044c7:	c0 
c01044c8:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
c01044cf:	00 
c01044d0:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01044d7:	e8 d8 c9 ff ff       	call   c0100eb4 <__panic>
    free_page(p0);
c01044dc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044e3:	00 
c01044e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044e7:	89 04 24             	mov    %eax,(%esp)
c01044ea:	e8 9d 0c 00 00       	call   c010518c <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01044ef:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01044f6:	e8 26 0c 00 00       	call   c0105121 <alloc_pages>
c01044fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104501:	83 c0 20             	add    $0x20,%eax
c0104504:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104507:	74 24                	je     c010452d <default_check+0x4d1>
c0104509:	c7 44 24 0c e8 61 11 	movl   $0xc01161e8,0xc(%esp)
c0104510:	c0 
c0104511:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0104518:	c0 
c0104519:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c0104520:	00 
c0104521:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0104528:	e8 87 c9 ff ff       	call   c0100eb4 <__panic>

    free_pages(p0, 2);
c010452d:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0104534:	00 
c0104535:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104538:	89 04 24             	mov    %eax,(%esp)
c010453b:	e8 4c 0c 00 00       	call   c010518c <free_pages>
    free_page(p2);
c0104540:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104547:	00 
c0104548:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010454b:	89 04 24             	mov    %eax,(%esp)
c010454e:	e8 39 0c 00 00       	call   c010518c <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104553:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010455a:	e8 c2 0b 00 00       	call   c0105121 <alloc_pages>
c010455f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104562:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104566:	75 24                	jne    c010458c <default_check+0x530>
c0104568:	c7 44 24 0c 08 62 11 	movl   $0xc0116208,0xc(%esp)
c010456f:	c0 
c0104570:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0104577:	c0 
c0104578:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010457f:	00 
c0104580:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c0104587:	e8 28 c9 ff ff       	call   c0100eb4 <__panic>
    assert(alloc_page() == NULL);
c010458c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104593:	e8 89 0b 00 00       	call   c0105121 <alloc_pages>
c0104598:	85 c0                	test   %eax,%eax
c010459a:	74 24                	je     c01045c0 <default_check+0x564>
c010459c:	c7 44 24 0c 66 60 11 	movl   $0xc0116066,0xc(%esp)
c01045a3:	c0 
c01045a4:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c01045ab:	c0 
c01045ac:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
c01045b3:	00 
c01045b4:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01045bb:	e8 f4 c8 ff ff       	call   c0100eb4 <__panic>

    assert(nr_free == 0);
c01045c0:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01045c5:	85 c0                	test   %eax,%eax
c01045c7:	74 24                	je     c01045ed <default_check+0x591>
c01045c9:	c7 44 24 0c b9 60 11 	movl   $0xc01160b9,0xc(%esp)
c01045d0:	c0 
c01045d1:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c01045d8:	c0 
c01045d9:	c7 44 24 04 11 01 00 	movl   $0x111,0x4(%esp)
c01045e0:	00 
c01045e1:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01045e8:	e8 c7 c8 ff ff       	call   c0100eb4 <__panic>
    nr_free = nr_free_store;
c01045ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01045f0:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_list = free_list_store;
c01045f5:	8b 45 80             	mov    -0x80(%ebp),%eax
c01045f8:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01045fb:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c0104600:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    free_pages(p0, 5);
c0104606:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010460d:	00 
c010460e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104611:	89 04 24             	mov    %eax,(%esp)
c0104614:	e8 73 0b 00 00       	call   c010518c <free_pages>

    le = &free_list;
c0104619:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104620:	eb 1d                	jmp    c010463f <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0104622:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104625:	83 e8 0c             	sub    $0xc,%eax
c0104628:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c010462b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010462f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104632:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104635:	8b 40 08             	mov    0x8(%eax),%eax
c0104638:	29 c2                	sub    %eax,%edx
c010463a:	89 d0                	mov    %edx,%eax
c010463c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010463f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104642:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104645:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104648:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010464b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010464e:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c0104655:	75 cb                	jne    c0104622 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104657:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010465b:	74 24                	je     c0104681 <default_check+0x625>
c010465d:	c7 44 24 0c 26 62 11 	movl   $0xc0116226,0xc(%esp)
c0104664:	c0 
c0104665:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c010466c:	c0 
c010466d:	c7 44 24 04 1c 01 00 	movl   $0x11c,0x4(%esp)
c0104674:	00 
c0104675:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c010467c:	e8 33 c8 ff ff       	call   c0100eb4 <__panic>
    assert(total == 0);
c0104681:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104685:	74 24                	je     c01046ab <default_check+0x64f>
c0104687:	c7 44 24 0c 31 62 11 	movl   $0xc0116231,0xc(%esp)
c010468e:	c0 
c010468f:	c7 44 24 08 f6 5e 11 	movl   $0xc0115ef6,0x8(%esp)
c0104696:	c0 
c0104697:	c7 44 24 04 1d 01 00 	movl   $0x11d,0x4(%esp)
c010469e:	00 
c010469f:	c7 04 24 0b 5f 11 c0 	movl   $0xc0115f0b,(%esp)
c01046a6:	e8 09 c8 ff ff       	call   c0100eb4 <__panic>
}
c01046ab:	81 c4 94 00 00 00    	add    $0x94,%esp
c01046b1:	5b                   	pop    %ebx
c01046b2:	5d                   	pop    %ebp
c01046b3:	c3                   	ret    

c01046b4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01046b4:	55                   	push   %ebp
c01046b5:	89 e5                	mov    %esp,%ebp
c01046b7:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01046ba:	9c                   	pushf  
c01046bb:	58                   	pop    %eax
c01046bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01046bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01046c2:	25 00 02 00 00       	and    $0x200,%eax
c01046c7:	85 c0                	test   %eax,%eax
c01046c9:	74 0c                	je     c01046d7 <__intr_save+0x23>
        intr_disable();
c01046cb:	e8 46 da ff ff       	call   c0102116 <intr_disable>
        return 1;
c01046d0:	b8 01 00 00 00       	mov    $0x1,%eax
c01046d5:	eb 05                	jmp    c01046dc <__intr_save+0x28>
    }
    return 0;
c01046d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046dc:	c9                   	leave  
c01046dd:	c3                   	ret    

c01046de <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01046de:	55                   	push   %ebp
c01046df:	89 e5                	mov    %esp,%ebp
c01046e1:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01046e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01046e8:	74 05                	je     c01046ef <__intr_restore+0x11>
        intr_enable();
c01046ea:	e8 21 da ff ff       	call   c0102110 <intr_enable>
    }
}
c01046ef:	c9                   	leave  
c01046f0:	c3                   	ret    

c01046f1 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01046f1:	55                   	push   %ebp
c01046f2:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01046f4:	8b 55 08             	mov    0x8(%ebp),%edx
c01046f7:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01046fc:	29 c2                	sub    %eax,%edx
c01046fe:	89 d0                	mov    %edx,%eax
c0104700:	c1 f8 05             	sar    $0x5,%eax
}
c0104703:	5d                   	pop    %ebp
c0104704:	c3                   	ret    

c0104705 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104705:	55                   	push   %ebp
c0104706:	89 e5                	mov    %esp,%ebp
c0104708:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010470b:	8b 45 08             	mov    0x8(%ebp),%eax
c010470e:	89 04 24             	mov    %eax,(%esp)
c0104711:	e8 db ff ff ff       	call   c01046f1 <page2ppn>
c0104716:	c1 e0 0c             	shl    $0xc,%eax
}
c0104719:	c9                   	leave  
c010471a:	c3                   	ret    

c010471b <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010471b:	55                   	push   %ebp
c010471c:	89 e5                	mov    %esp,%ebp
c010471e:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104721:	8b 45 08             	mov    0x8(%ebp),%eax
c0104724:	c1 e8 0c             	shr    $0xc,%eax
c0104727:	89 c2                	mov    %eax,%edx
c0104729:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010472e:	39 c2                	cmp    %eax,%edx
c0104730:	72 1c                	jb     c010474e <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104732:	c7 44 24 08 6c 62 11 	movl   $0xc011626c,0x8(%esp)
c0104739:	c0 
c010473a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104741:	00 
c0104742:	c7 04 24 8b 62 11 c0 	movl   $0xc011628b,(%esp)
c0104749:	e8 66 c7 ff ff       	call   c0100eb4 <__panic>
    }
    return &pages[PPN(pa)];
c010474e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104753:	8b 55 08             	mov    0x8(%ebp),%edx
c0104756:	c1 ea 0c             	shr    $0xc,%edx
c0104759:	c1 e2 05             	shl    $0x5,%edx
c010475c:	01 d0                	add    %edx,%eax
}
c010475e:	c9                   	leave  
c010475f:	c3                   	ret    

c0104760 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104760:	55                   	push   %ebp
c0104761:	89 e5                	mov    %esp,%ebp
c0104763:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104766:	8b 45 08             	mov    0x8(%ebp),%eax
c0104769:	89 04 24             	mov    %eax,(%esp)
c010476c:	e8 94 ff ff ff       	call   c0104705 <page2pa>
c0104771:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104777:	c1 e8 0c             	shr    $0xc,%eax
c010477a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010477d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104782:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104785:	72 23                	jb     c01047aa <page2kva+0x4a>
c0104787:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010478a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010478e:	c7 44 24 08 9c 62 11 	movl   $0xc011629c,0x8(%esp)
c0104795:	c0 
c0104796:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010479d:	00 
c010479e:	c7 04 24 8b 62 11 c0 	movl   $0xc011628b,(%esp)
c01047a5:	e8 0a c7 ff ff       	call   c0100eb4 <__panic>
c01047aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047ad:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01047b2:	c9                   	leave  
c01047b3:	c3                   	ret    

c01047b4 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01047b4:	55                   	push   %ebp
c01047b5:	89 e5                	mov    %esp,%ebp
c01047b7:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01047ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01047bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047c0:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047c7:	77 23                	ja     c01047ec <kva2page+0x38>
c01047c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047cc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047d0:	c7 44 24 08 c0 62 11 	movl   $0xc01162c0,0x8(%esp)
c01047d7:	c0 
c01047d8:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01047df:	00 
c01047e0:	c7 04 24 8b 62 11 c0 	movl   $0xc011628b,(%esp)
c01047e7:	e8 c8 c6 ff ff       	call   c0100eb4 <__panic>
c01047ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047ef:	05 00 00 00 40       	add    $0x40000000,%eax
c01047f4:	89 04 24             	mov    %eax,(%esp)
c01047f7:	e8 1f ff ff ff       	call   c010471b <pa2page>
}
c01047fc:	c9                   	leave  
c01047fd:	c3                   	ret    

c01047fe <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01047fe:	55                   	push   %ebp
c01047ff:	89 e5                	mov    %esp,%ebp
c0104801:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0104804:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104807:	ba 01 00 00 00       	mov    $0x1,%edx
c010480c:	89 c1                	mov    %eax,%ecx
c010480e:	d3 e2                	shl    %cl,%edx
c0104810:	89 d0                	mov    %edx,%eax
c0104812:	89 04 24             	mov    %eax,(%esp)
c0104815:	e8 07 09 00 00       	call   c0105121 <alloc_pages>
c010481a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c010481d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104821:	75 07                	jne    c010482a <__slob_get_free_pages+0x2c>
    return NULL;
c0104823:	b8 00 00 00 00       	mov    $0x0,%eax
c0104828:	eb 0b                	jmp    c0104835 <__slob_get_free_pages+0x37>
  return page2kva(page);
c010482a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010482d:	89 04 24             	mov    %eax,(%esp)
c0104830:	e8 2b ff ff ff       	call   c0104760 <page2kva>
}
c0104835:	c9                   	leave  
c0104836:	c3                   	ret    

c0104837 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104837:	55                   	push   %ebp
c0104838:	89 e5                	mov    %esp,%ebp
c010483a:	53                   	push   %ebx
c010483b:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c010483e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104841:	ba 01 00 00 00       	mov    $0x1,%edx
c0104846:	89 c1                	mov    %eax,%ecx
c0104848:	d3 e2                	shl    %cl,%edx
c010484a:	89 d0                	mov    %edx,%eax
c010484c:	89 c3                	mov    %eax,%ebx
c010484e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104851:	89 04 24             	mov    %eax,(%esp)
c0104854:	e8 5b ff ff ff       	call   c01047b4 <kva2page>
c0104859:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010485d:	89 04 24             	mov    %eax,(%esp)
c0104860:	e8 27 09 00 00       	call   c010518c <free_pages>
}
c0104865:	83 c4 14             	add    $0x14,%esp
c0104868:	5b                   	pop    %ebx
c0104869:	5d                   	pop    %ebp
c010486a:	c3                   	ret    

c010486b <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c010486b:	55                   	push   %ebp
c010486c:	89 e5                	mov    %esp,%ebp
c010486e:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104871:	8b 45 08             	mov    0x8(%ebp),%eax
c0104874:	83 c0 08             	add    $0x8,%eax
c0104877:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010487c:	76 24                	jbe    c01048a2 <slob_alloc+0x37>
c010487e:	c7 44 24 0c e4 62 11 	movl   $0xc01162e4,0xc(%esp)
c0104885:	c0 
c0104886:	c7 44 24 08 03 63 11 	movl   $0xc0116303,0x8(%esp)
c010488d:	c0 
c010488e:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104895:	00 
c0104896:	c7 04 24 18 63 11 c0 	movl   $0xc0116318,(%esp)
c010489d:	e8 12 c6 ff ff       	call   c0100eb4 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01048a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01048a9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01048b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01048b3:	83 c0 07             	add    $0x7,%eax
c01048b6:	c1 e8 03             	shr    $0x3,%eax
c01048b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01048bc:	e8 f3 fd ff ff       	call   c01046b4 <__intr_save>
c01048c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01048c4:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01048c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01048cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048cf:	8b 40 04             	mov    0x4(%eax),%eax
c01048d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01048d5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01048d9:	74 25                	je     c0104900 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01048db:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048de:	8b 45 10             	mov    0x10(%ebp),%eax
c01048e1:	01 d0                	add    %edx,%eax
c01048e3:	8d 50 ff             	lea    -0x1(%eax),%edx
c01048e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01048e9:	f7 d8                	neg    %eax
c01048eb:	21 d0                	and    %edx,%eax
c01048ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01048f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01048f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048f6:	29 c2                	sub    %eax,%edx
c01048f8:	89 d0                	mov    %edx,%eax
c01048fa:	c1 f8 03             	sar    $0x3,%eax
c01048fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104900:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104903:	8b 00                	mov    (%eax),%eax
c0104905:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104908:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010490b:	01 ca                	add    %ecx,%edx
c010490d:	39 d0                	cmp    %edx,%eax
c010490f:	0f 8c aa 00 00 00    	jl     c01049bf <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0104915:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104919:	74 38                	je     c0104953 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c010491b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010491e:	8b 00                	mov    (%eax),%eax
c0104920:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104923:	89 c2                	mov    %eax,%edx
c0104925:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104928:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c010492a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010492d:	8b 50 04             	mov    0x4(%eax),%edx
c0104930:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104933:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104936:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104939:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010493c:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c010493f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104942:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104945:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104947:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010494a:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c010494d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104950:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104953:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104956:	8b 00                	mov    (%eax),%eax
c0104958:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010495b:	75 0e                	jne    c010496b <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c010495d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104960:	8b 50 04             	mov    0x4(%eax),%edx
c0104963:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104966:	89 50 04             	mov    %edx,0x4(%eax)
c0104969:	eb 3c                	jmp    c01049a7 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c010496b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010496e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104975:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104978:	01 c2                	add    %eax,%edx
c010497a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010497d:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104980:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104983:	8b 40 04             	mov    0x4(%eax),%eax
c0104986:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104989:	8b 12                	mov    (%edx),%edx
c010498b:	2b 55 e0             	sub    -0x20(%ebp),%edx
c010498e:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104990:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104993:	8b 40 04             	mov    0x4(%eax),%eax
c0104996:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104999:	8b 52 04             	mov    0x4(%edx),%edx
c010499c:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c010499f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049a2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01049a5:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01049a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049aa:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08
			spin_unlock_irqrestore(&slob_lock, flags);
c01049af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049b2:	89 04 24             	mov    %eax,(%esp)
c01049b5:	e8 24 fd ff ff       	call   c01046de <__intr_restore>
			return cur;
c01049ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049bd:	eb 7f                	jmp    c0104a3e <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01049bf:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01049c4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049c7:	75 61                	jne    c0104a2a <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c01049c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049cc:	89 04 24             	mov    %eax,(%esp)
c01049cf:	e8 0a fd ff ff       	call   c01046de <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01049d4:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01049db:	75 07                	jne    c01049e4 <slob_alloc+0x179>
				return 0;
c01049dd:	b8 00 00 00 00       	mov    $0x0,%eax
c01049e2:	eb 5a                	jmp    c0104a3e <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01049e4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01049eb:	00 
c01049ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049ef:	89 04 24             	mov    %eax,(%esp)
c01049f2:	e8 07 fe ff ff       	call   c01047fe <__slob_get_free_pages>
c01049f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01049fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01049fe:	75 07                	jne    c0104a07 <slob_alloc+0x19c>
				return 0;
c0104a00:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a05:	eb 37                	jmp    c0104a3e <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104a07:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104a0e:	00 
c0104a0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a12:	89 04 24             	mov    %eax,(%esp)
c0104a15:	e8 26 00 00 00       	call   c0104a40 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104a1a:	e8 95 fc ff ff       	call   c01046b4 <__intr_save>
c0104a1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104a22:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104a27:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a33:	8b 40 04             	mov    0x4(%eax),%eax
c0104a36:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a39:	e9 97 fe ff ff       	jmp    c01048d5 <slob_alloc+0x6a>
}
c0104a3e:	c9                   	leave  
c0104a3f:	c3                   	ret    

c0104a40 <slob_free>:

static void slob_free(void *block, int size)
{
c0104a40:	55                   	push   %ebp
c0104a41:	89 e5                	mov    %esp,%ebp
c0104a43:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a49:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a50:	75 05                	jne    c0104a57 <slob_free+0x17>
		return;
c0104a52:	e9 ff 00 00 00       	jmp    c0104b56 <slob_free+0x116>

	if (size)
c0104a57:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a5b:	74 10                	je     c0104a6d <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a60:	83 c0 07             	add    $0x7,%eax
c0104a63:	c1 e8 03             	shr    $0x3,%eax
c0104a66:	89 c2                	mov    %eax,%edx
c0104a68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a6b:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a6d:	e8 42 fc ff ff       	call   c01046b4 <__intr_save>
c0104a72:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a75:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104a7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a7d:	eb 27                	jmp    c0104aa6 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104a7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a82:	8b 40 04             	mov    0x4(%eax),%eax
c0104a85:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a88:	77 13                	ja     c0104a9d <slob_free+0x5d>
c0104a8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a8d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a90:	77 27                	ja     c0104ab9 <slob_free+0x79>
c0104a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a95:	8b 40 04             	mov    0x4(%eax),%eax
c0104a98:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a9b:	77 1c                	ja     c0104ab9 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aa0:	8b 40 04             	mov    0x4(%eax),%eax
c0104aa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104aa6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104aac:	76 d1                	jbe    c0104a7f <slob_free+0x3f>
c0104aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab1:	8b 40 04             	mov    0x4(%eax),%eax
c0104ab4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ab7:	76 c6                	jbe    c0104a7f <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104abc:	8b 00                	mov    (%eax),%eax
c0104abe:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ac8:	01 c2                	add    %eax,%edx
c0104aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104acd:	8b 40 04             	mov    0x4(%eax),%eax
c0104ad0:	39 c2                	cmp    %eax,%edx
c0104ad2:	75 25                	jne    c0104af9 <slob_free+0xb9>
		b->units += cur->next->units;
c0104ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ad7:	8b 10                	mov    (%eax),%edx
c0104ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104adc:	8b 40 04             	mov    0x4(%eax),%eax
c0104adf:	8b 00                	mov    (%eax),%eax
c0104ae1:	01 c2                	add    %eax,%edx
c0104ae3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae6:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aeb:	8b 40 04             	mov    0x4(%eax),%eax
c0104aee:	8b 50 04             	mov    0x4(%eax),%edx
c0104af1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104af4:	89 50 04             	mov    %edx,0x4(%eax)
c0104af7:	eb 0c                	jmp    c0104b05 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104afc:	8b 50 04             	mov    0x4(%eax),%edx
c0104aff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b02:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b08:	8b 00                	mov    (%eax),%eax
c0104b0a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b14:	01 d0                	add    %edx,%eax
c0104b16:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b19:	75 1f                	jne    c0104b3a <slob_free+0xfa>
		cur->units += b->units;
c0104b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b1e:	8b 10                	mov    (%eax),%edx
c0104b20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b23:	8b 00                	mov    (%eax),%eax
c0104b25:	01 c2                	add    %eax,%edx
c0104b27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b2a:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b2f:	8b 50 04             	mov    0x4(%eax),%edx
c0104b32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b35:	89 50 04             	mov    %edx,0x4(%eax)
c0104b38:	eb 09                	jmp    c0104b43 <slob_free+0x103>
	} else
		cur->next = b;
c0104b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b40:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b46:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b4e:	89 04 24             	mov    %eax,(%esp)
c0104b51:	e8 88 fb ff ff       	call   c01046de <__intr_restore>
}
c0104b56:	c9                   	leave  
c0104b57:	c3                   	ret    

c0104b58 <slob_init>:



void
slob_init(void) {
c0104b58:	55                   	push   %ebp
c0104b59:	89 e5                	mov    %esp,%ebp
c0104b5b:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104b5e:	c7 04 24 2a 63 11 c0 	movl   $0xc011632a,(%esp)
c0104b65:	e8 fb b7 ff ff       	call   c0100365 <cprintf>
}
c0104b6a:	c9                   	leave  
c0104b6b:	c3                   	ret    

c0104b6c <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104b6c:	55                   	push   %ebp
c0104b6d:	89 e5                	mov    %esp,%ebp
c0104b6f:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104b72:	e8 e1 ff ff ff       	call   c0104b58 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104b77:	c7 04 24 3e 63 11 c0 	movl   $0xc011633e,(%esp)
c0104b7e:	e8 e2 b7 ff ff       	call   c0100365 <cprintf>
}
c0104b83:	c9                   	leave  
c0104b84:	c3                   	ret    

c0104b85 <slob_allocated>:

size_t
slob_allocated(void) {
c0104b85:	55                   	push   %ebp
c0104b86:	89 e5                	mov    %esp,%ebp
  return 0;
c0104b88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b8d:	5d                   	pop    %ebp
c0104b8e:	c3                   	ret    

c0104b8f <kallocated>:

size_t
kallocated(void) {
c0104b8f:	55                   	push   %ebp
c0104b90:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104b92:	e8 ee ff ff ff       	call   c0104b85 <slob_allocated>
}
c0104b97:	5d                   	pop    %ebp
c0104b98:	c3                   	ret    

c0104b99 <find_order>:

static int find_order(int size)
{
c0104b99:	55                   	push   %ebp
c0104b9a:	89 e5                	mov    %esp,%ebp
c0104b9c:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104b9f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104ba6:	eb 07                	jmp    c0104baf <find_order+0x16>
		order++;
c0104ba8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104bac:	d1 7d 08             	sarl   0x8(%ebp)
c0104baf:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104bb6:	7f f0                	jg     c0104ba8 <find_order+0xf>
		order++;
	return order;
c0104bb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104bbb:	c9                   	leave  
c0104bbc:	c3                   	ret    

c0104bbd <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104bbd:	55                   	push   %ebp
c0104bbe:	89 e5                	mov    %esp,%ebp
c0104bc0:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104bc3:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104bca:	77 38                	ja     c0104c04 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104bcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bcf:	8d 50 08             	lea    0x8(%eax),%edx
c0104bd2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104bd9:	00 
c0104bda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104bdd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104be1:	89 14 24             	mov    %edx,(%esp)
c0104be4:	e8 82 fc ff ff       	call   c010486b <slob_alloc>
c0104be9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104bec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104bf0:	74 08                	je     c0104bfa <__kmalloc+0x3d>
c0104bf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bf5:	83 c0 08             	add    $0x8,%eax
c0104bf8:	eb 05                	jmp    c0104bff <__kmalloc+0x42>
c0104bfa:	b8 00 00 00 00       	mov    $0x0,%eax
c0104bff:	e9 a6 00 00 00       	jmp    c0104caa <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104c04:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c0b:	00 
c0104c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c0f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c13:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104c1a:	e8 4c fc ff ff       	call   c010486b <slob_alloc>
c0104c1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104c22:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c26:	75 07                	jne    c0104c2f <__kmalloc+0x72>
		return 0;
c0104c28:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c2d:	eb 7b                	jmp    c0104caa <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c32:	89 04 24             	mov    %eax,(%esp)
c0104c35:	e8 5f ff ff ff       	call   c0104b99 <find_order>
c0104c3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c3d:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c42:	8b 00                	mov    (%eax),%eax
c0104c44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c4b:	89 04 24             	mov    %eax,(%esp)
c0104c4e:	e8 ab fb ff ff       	call   c01047fe <__slob_get_free_pages>
c0104c53:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c56:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104c59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c5c:	8b 40 04             	mov    0x4(%eax),%eax
c0104c5f:	85 c0                	test   %eax,%eax
c0104c61:	74 2f                	je     c0104c92 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104c63:	e8 4c fa ff ff       	call   c01046b4 <__intr_save>
c0104c68:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104c6b:	8b 15 64 fe 14 c0    	mov    0xc014fe64,%edx
c0104c71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c74:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104c77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c7a:	a3 64 fe 14 c0       	mov    %eax,0xc014fe64
		spin_unlock_irqrestore(&block_lock, flags);
c0104c7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c82:	89 04 24             	mov    %eax,(%esp)
c0104c85:	e8 54 fa ff ff       	call   c01046de <__intr_restore>
		return bb->pages;
c0104c8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c8d:	8b 40 04             	mov    0x4(%eax),%eax
c0104c90:	eb 18                	jmp    c0104caa <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104c92:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104c99:	00 
c0104c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c9d:	89 04 24             	mov    %eax,(%esp)
c0104ca0:	e8 9b fd ff ff       	call   c0104a40 <slob_free>
	return 0;
c0104ca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104caa:	c9                   	leave  
c0104cab:	c3                   	ret    

c0104cac <kmalloc>:

void *
kmalloc(size_t size)
{
c0104cac:	55                   	push   %ebp
c0104cad:	89 e5                	mov    %esp,%ebp
c0104caf:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104cb2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104cb9:	00 
c0104cba:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cbd:	89 04 24             	mov    %eax,(%esp)
c0104cc0:	e8 f8 fe ff ff       	call   c0104bbd <__kmalloc>
}
c0104cc5:	c9                   	leave  
c0104cc6:	c3                   	ret    

c0104cc7 <kfree>:


void kfree(void *block)
{
c0104cc7:	55                   	push   %ebp
c0104cc8:	89 e5                	mov    %esp,%ebp
c0104cca:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104ccd:	c7 45 f0 64 fe 14 c0 	movl   $0xc014fe64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104cd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104cd8:	75 05                	jne    c0104cdf <kfree+0x18>
		return;
c0104cda:	e9 a2 00 00 00       	jmp    c0104d81 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104cdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ce2:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104ce7:	85 c0                	test   %eax,%eax
c0104ce9:	75 7f                	jne    c0104d6a <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104ceb:	e8 c4 f9 ff ff       	call   c01046b4 <__intr_save>
c0104cf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104cf3:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104cf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104cfb:	eb 5c                	jmp    c0104d59 <kfree+0x92>
			if (bb->pages == block) {
c0104cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d00:	8b 40 04             	mov    0x4(%eax),%eax
c0104d03:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d06:	75 3f                	jne    c0104d47 <kfree+0x80>
				*last = bb->next;
c0104d08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d0b:	8b 50 08             	mov    0x8(%eax),%edx
c0104d0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d11:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104d13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d16:	89 04 24             	mov    %eax,(%esp)
c0104d19:	e8 c0 f9 ff ff       	call   c01046de <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d21:	8b 10                	mov    (%eax),%edx
c0104d23:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d26:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d2a:	89 04 24             	mov    %eax,(%esp)
c0104d2d:	e8 05 fb ff ff       	call   c0104837 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d32:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d39:	00 
c0104d3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d3d:	89 04 24             	mov    %eax,(%esp)
c0104d40:	e8 fb fc ff ff       	call   c0104a40 <slob_free>
				return;
c0104d45:	eb 3a                	jmp    c0104d81 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d4a:	83 c0 08             	add    $0x8,%eax
c0104d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d53:	8b 40 08             	mov    0x8(%eax),%eax
c0104d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d5d:	75 9e                	jne    c0104cfd <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d62:	89 04 24             	mov    %eax,(%esp)
c0104d65:	e8 74 f9 ff ff       	call   c01046de <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104d6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d6d:	83 e8 08             	sub    $0x8,%eax
c0104d70:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d77:	00 
c0104d78:	89 04 24             	mov    %eax,(%esp)
c0104d7b:	e8 c0 fc ff ff       	call   c0104a40 <slob_free>
	return;
c0104d80:	90                   	nop
}
c0104d81:	c9                   	leave  
c0104d82:	c3                   	ret    

c0104d83 <ksize>:


unsigned int ksize(const void *block)
{
c0104d83:	55                   	push   %ebp
c0104d84:	89 e5                	mov    %esp,%ebp
c0104d86:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104d89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d8d:	75 07                	jne    c0104d96 <ksize+0x13>
		return 0;
c0104d8f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d94:	eb 6b                	jmp    c0104e01 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104d96:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d99:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104d9e:	85 c0                	test   %eax,%eax
c0104da0:	75 54                	jne    c0104df6 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104da2:	e8 0d f9 ff ff       	call   c01046b4 <__intr_save>
c0104da7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104daa:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104daf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104db2:	eb 31                	jmp    c0104de5 <ksize+0x62>
			if (bb->pages == block) {
c0104db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104db7:	8b 40 04             	mov    0x4(%eax),%eax
c0104dba:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104dbd:	75 1d                	jne    c0104ddc <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104dbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dc2:	89 04 24             	mov    %eax,(%esp)
c0104dc5:	e8 14 f9 ff ff       	call   c01046de <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dcd:	8b 00                	mov    (%eax),%eax
c0104dcf:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104dd4:	89 c1                	mov    %eax,%ecx
c0104dd6:	d3 e2                	shl    %cl,%edx
c0104dd8:	89 d0                	mov    %edx,%eax
c0104dda:	eb 25                	jmp    c0104e01 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104ddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ddf:	8b 40 08             	mov    0x8(%eax),%eax
c0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104de5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104de9:	75 c9                	jne    c0104db4 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104deb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dee:	89 04 24             	mov    %eax,(%esp)
c0104df1:	e8 e8 f8 ff ff       	call   c01046de <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104df6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104df9:	83 e8 08             	sub    $0x8,%eax
c0104dfc:	8b 00                	mov    (%eax),%eax
c0104dfe:	c1 e0 03             	shl    $0x3,%eax
}
c0104e01:	c9                   	leave  
c0104e02:	c3                   	ret    

c0104e03 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104e03:	55                   	push   %ebp
c0104e04:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104e06:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e09:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104e0e:	29 c2                	sub    %eax,%edx
c0104e10:	89 d0                	mov    %edx,%eax
c0104e12:	c1 f8 05             	sar    $0x5,%eax
}
c0104e15:	5d                   	pop    %ebp
c0104e16:	c3                   	ret    

c0104e17 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104e17:	55                   	push   %ebp
c0104e18:	89 e5                	mov    %esp,%ebp
c0104e1a:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e20:	89 04 24             	mov    %eax,(%esp)
c0104e23:	e8 db ff ff ff       	call   c0104e03 <page2ppn>
c0104e28:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e2b:	c9                   	leave  
c0104e2c:	c3                   	ret    

c0104e2d <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e2d:	55                   	push   %ebp
c0104e2e:	89 e5                	mov    %esp,%ebp
c0104e30:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e33:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e36:	c1 e8 0c             	shr    $0xc,%eax
c0104e39:	89 c2                	mov    %eax,%edx
c0104e3b:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104e40:	39 c2                	cmp    %eax,%edx
c0104e42:	72 1c                	jb     c0104e60 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e44:	c7 44 24 08 5c 63 11 	movl   $0xc011635c,0x8(%esp)
c0104e4b:	c0 
c0104e4c:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104e53:	00 
c0104e54:	c7 04 24 7b 63 11 c0 	movl   $0xc011637b,(%esp)
c0104e5b:	e8 54 c0 ff ff       	call   c0100eb4 <__panic>
    }
    return &pages[PPN(pa)];
c0104e60:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104e65:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e68:	c1 ea 0c             	shr    $0xc,%edx
c0104e6b:	c1 e2 05             	shl    $0x5,%edx
c0104e6e:	01 d0                	add    %edx,%eax
}
c0104e70:	c9                   	leave  
c0104e71:	c3                   	ret    

c0104e72 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104e72:	55                   	push   %ebp
c0104e73:	89 e5                	mov    %esp,%ebp
c0104e75:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104e78:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e7b:	89 04 24             	mov    %eax,(%esp)
c0104e7e:	e8 94 ff ff ff       	call   c0104e17 <page2pa>
c0104e83:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e89:	c1 e8 0c             	shr    $0xc,%eax
c0104e8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104e8f:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104e94:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104e97:	72 23                	jb     c0104ebc <page2kva+0x4a>
c0104e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e9c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104ea0:	c7 44 24 08 8c 63 11 	movl   $0xc011638c,0x8(%esp)
c0104ea7:	c0 
c0104ea8:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104eaf:	00 
c0104eb0:	c7 04 24 7b 63 11 c0 	movl   $0xc011637b,(%esp)
c0104eb7:	e8 f8 bf ff ff       	call   c0100eb4 <__panic>
c0104ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ebf:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104ec4:	c9                   	leave  
c0104ec5:	c3                   	ret    

c0104ec6 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104ec6:	55                   	push   %ebp
c0104ec7:	89 e5                	mov    %esp,%ebp
c0104ec9:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104ecc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ecf:	83 e0 01             	and    $0x1,%eax
c0104ed2:	85 c0                	test   %eax,%eax
c0104ed4:	75 1c                	jne    c0104ef2 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104ed6:	c7 44 24 08 b0 63 11 	movl   $0xc01163b0,0x8(%esp)
c0104edd:	c0 
c0104ede:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104ee5:	00 
c0104ee6:	c7 04 24 7b 63 11 c0 	movl   $0xc011637b,(%esp)
c0104eed:	e8 c2 bf ff ff       	call   c0100eb4 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104ef2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104efa:	89 04 24             	mov    %eax,(%esp)
c0104efd:	e8 2b ff ff ff       	call   c0104e2d <pa2page>
}
c0104f02:	c9                   	leave  
c0104f03:	c3                   	ret    

c0104f04 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104f04:	55                   	push   %ebp
c0104f05:	89 e5                	mov    %esp,%ebp
c0104f07:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f12:	89 04 24             	mov    %eax,(%esp)
c0104f15:	e8 13 ff ff ff       	call   c0104e2d <pa2page>
}
c0104f1a:	c9                   	leave  
c0104f1b:	c3                   	ret    

c0104f1c <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104f1c:	55                   	push   %ebp
c0104f1d:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f22:	8b 00                	mov    (%eax),%eax
}
c0104f24:	5d                   	pop    %ebp
c0104f25:	c3                   	ret    

c0104f26 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f26:	55                   	push   %ebp
c0104f27:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f29:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f2c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f2f:	89 10                	mov    %edx,(%eax)
}
c0104f31:	5d                   	pop    %ebp
c0104f32:	c3                   	ret    

c0104f33 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f33:	55                   	push   %ebp
c0104f34:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f36:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f39:	8b 00                	mov    (%eax),%eax
c0104f3b:	8d 50 01             	lea    0x1(%eax),%edx
c0104f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f41:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f43:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f46:	8b 00                	mov    (%eax),%eax
}
c0104f48:	5d                   	pop    %ebp
c0104f49:	c3                   	ret    

c0104f4a <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104f4a:	55                   	push   %ebp
c0104f4b:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104f4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f50:	8b 00                	mov    (%eax),%eax
c0104f52:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f55:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f58:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f5d:	8b 00                	mov    (%eax),%eax
}
c0104f5f:	5d                   	pop    %ebp
c0104f60:	c3                   	ret    

c0104f61 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104f61:	55                   	push   %ebp
c0104f62:	89 e5                	mov    %esp,%ebp
c0104f64:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104f67:	9c                   	pushf  
c0104f68:	58                   	pop    %eax
c0104f69:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104f6f:	25 00 02 00 00       	and    $0x200,%eax
c0104f74:	85 c0                	test   %eax,%eax
c0104f76:	74 0c                	je     c0104f84 <__intr_save+0x23>
        intr_disable();
c0104f78:	e8 99 d1 ff ff       	call   c0102116 <intr_disable>
        return 1;
c0104f7d:	b8 01 00 00 00       	mov    $0x1,%eax
c0104f82:	eb 05                	jmp    c0104f89 <__intr_save+0x28>
    }
    return 0;
c0104f84:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104f89:	c9                   	leave  
c0104f8a:	c3                   	ret    

c0104f8b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104f8b:	55                   	push   %ebp
c0104f8c:	89 e5                	mov    %esp,%ebp
c0104f8e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104f91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104f95:	74 05                	je     c0104f9c <__intr_restore+0x11>
        intr_enable();
c0104f97:	e8 74 d1 ff ff       	call   c0102110 <intr_enable>
    }
}
c0104f9c:	c9                   	leave  
c0104f9d:	c3                   	ret    

c0104f9e <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104f9e:	55                   	push   %ebp
c0104f9f:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104fa1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa4:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104fa7:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fac:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104fae:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fb3:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104fb5:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fba:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104fbc:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fc1:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104fc3:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fc8:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104fca:	ea d1 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104fd1
}
c0104fd1:	5d                   	pop    %ebp
c0104fd2:	c3                   	ret    

c0104fd3 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104fd3:	55                   	push   %ebp
c0104fd4:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104fd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fd9:	a3 a4 fe 14 c0       	mov    %eax,0xc014fea4
}
c0104fde:	5d                   	pop    %ebp
c0104fdf:	c3                   	ret    

c0104fe0 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104fe0:	55                   	push   %ebp
c0104fe1:	89 e5                	mov    %esp,%ebp
c0104fe3:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104fe6:	b8 00 e0 14 c0       	mov    $0xc014e000,%eax
c0104feb:	89 04 24             	mov    %eax,(%esp)
c0104fee:	e8 e0 ff ff ff       	call   c0104fd3 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0104ff3:	66 c7 05 a8 fe 14 c0 	movw   $0x10,0xc014fea8
c0104ffa:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104ffc:	66 c7 05 48 ea 14 c0 	movw   $0x68,0xc014ea48
c0105003:	68 00 
c0105005:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c010500a:	66 a3 4a ea 14 c0    	mov    %ax,0xc014ea4a
c0105010:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c0105015:	c1 e8 10             	shr    $0x10,%eax
c0105018:	a2 4c ea 14 c0       	mov    %al,0xc014ea4c
c010501d:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105024:	83 e0 f0             	and    $0xfffffff0,%eax
c0105027:	83 c8 09             	or     $0x9,%eax
c010502a:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c010502f:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105036:	83 e0 ef             	and    $0xffffffef,%eax
c0105039:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c010503e:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105045:	83 e0 9f             	and    $0xffffff9f,%eax
c0105048:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c010504d:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105054:	83 c8 80             	or     $0xffffff80,%eax
c0105057:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c010505c:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105063:	83 e0 f0             	and    $0xfffffff0,%eax
c0105066:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c010506b:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105072:	83 e0 ef             	and    $0xffffffef,%eax
c0105075:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c010507a:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105081:	83 e0 df             	and    $0xffffffdf,%eax
c0105084:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0105089:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105090:	83 c8 40             	or     $0x40,%eax
c0105093:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0105098:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c010509f:	83 e0 7f             	and    $0x7f,%eax
c01050a2:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c01050a7:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c01050ac:	c1 e8 18             	shr    $0x18,%eax
c01050af:	a2 4f ea 14 c0       	mov    %al,0xc014ea4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01050b4:	c7 04 24 50 ea 14 c0 	movl   $0xc014ea50,(%esp)
c01050bb:	e8 de fe ff ff       	call   c0104f9e <lgdt>
c01050c0:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01050c6:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01050ca:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01050cd:	c9                   	leave  
c01050ce:	c3                   	ret    

c01050cf <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01050cf:	55                   	push   %ebp
c01050d0:	89 e5                	mov    %esp,%ebp
c01050d2:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01050d5:	c7 05 20 30 15 c0 50 	movl   $0xc0116250,0xc0153020
c01050dc:	62 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01050df:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01050e4:	8b 00                	mov    (%eax),%eax
c01050e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01050ea:	c7 04 24 dc 63 11 c0 	movl   $0xc01163dc,(%esp)
c01050f1:	e8 6f b2 ff ff       	call   c0100365 <cprintf>
    pmm_manager->init();
c01050f6:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01050fb:	8b 40 04             	mov    0x4(%eax),%eax
c01050fe:	ff d0                	call   *%eax
}
c0105100:	c9                   	leave  
c0105101:	c3                   	ret    

c0105102 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0105102:	55                   	push   %ebp
c0105103:	89 e5                	mov    %esp,%ebp
c0105105:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105108:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010510d:	8b 40 08             	mov    0x8(%eax),%eax
c0105110:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105113:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105117:	8b 55 08             	mov    0x8(%ebp),%edx
c010511a:	89 14 24             	mov    %edx,(%esp)
c010511d:	ff d0                	call   *%eax
}
c010511f:	c9                   	leave  
c0105120:	c3                   	ret    

c0105121 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0105121:	55                   	push   %ebp
c0105122:	89 e5                	mov    %esp,%ebp
c0105124:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105127:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010512e:	e8 2e fe ff ff       	call   c0104f61 <__intr_save>
c0105133:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105136:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010513b:	8b 40 0c             	mov    0xc(%eax),%eax
c010513e:	8b 55 08             	mov    0x8(%ebp),%edx
c0105141:	89 14 24             	mov    %edx,(%esp)
c0105144:	ff d0                	call   *%eax
c0105146:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105149:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010514c:	89 04 24             	mov    %eax,(%esp)
c010514f:	e8 37 fe ff ff       	call   c0104f8b <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105154:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105158:	75 2d                	jne    c0105187 <alloc_pages+0x66>
c010515a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010515e:	77 27                	ja     c0105187 <alloc_pages+0x66>
c0105160:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0105165:	85 c0                	test   %eax,%eax
c0105167:	74 1e                	je     c0105187 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105169:	8b 55 08             	mov    0x8(%ebp),%edx
c010516c:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0105171:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105178:	00 
c0105179:	89 54 24 04          	mov    %edx,0x4(%esp)
c010517d:	89 04 24             	mov    %eax,(%esp)
c0105180:	e8 89 1d 00 00       	call   c0106f0e <swap_out>
    }
c0105185:	eb a7                	jmp    c010512e <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0105187:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010518a:	c9                   	leave  
c010518b:	c3                   	ret    

c010518c <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c010518c:	55                   	push   %ebp
c010518d:	89 e5                	mov    %esp,%ebp
c010518f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0105192:	e8 ca fd ff ff       	call   c0104f61 <__intr_save>
c0105197:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c010519a:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010519f:	8b 40 10             	mov    0x10(%eax),%eax
c01051a2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01051a5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051a9:	8b 55 08             	mov    0x8(%ebp),%edx
c01051ac:	89 14 24             	mov    %edx,(%esp)
c01051af:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01051b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051b4:	89 04 24             	mov    %eax,(%esp)
c01051b7:	e8 cf fd ff ff       	call   c0104f8b <__intr_restore>
}
c01051bc:	c9                   	leave  
c01051bd:	c3                   	ret    

c01051be <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01051be:	55                   	push   %ebp
c01051bf:	89 e5                	mov    %esp,%ebp
c01051c1:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01051c4:	e8 98 fd ff ff       	call   c0104f61 <__intr_save>
c01051c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01051cc:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01051d1:	8b 40 14             	mov    0x14(%eax),%eax
c01051d4:	ff d0                	call   *%eax
c01051d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01051d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051dc:	89 04 24             	mov    %eax,(%esp)
c01051df:	e8 a7 fd ff ff       	call   c0104f8b <__intr_restore>
    return ret;
c01051e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01051e7:	c9                   	leave  
c01051e8:	c3                   	ret    

c01051e9 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01051e9:	55                   	push   %ebp
c01051ea:	89 e5                	mov    %esp,%ebp
c01051ec:	57                   	push   %edi
c01051ed:	56                   	push   %esi
c01051ee:	53                   	push   %ebx
c01051ef:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01051f5:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01051fc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105203:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010520a:	c7 04 24 f3 63 11 c0 	movl   $0xc01163f3,(%esp)
c0105211:	e8 4f b1 ff ff       	call   c0100365 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105216:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010521d:	e9 15 01 00 00       	jmp    c0105337 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105222:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105225:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105228:	89 d0                	mov    %edx,%eax
c010522a:	c1 e0 02             	shl    $0x2,%eax
c010522d:	01 d0                	add    %edx,%eax
c010522f:	c1 e0 02             	shl    $0x2,%eax
c0105232:	01 c8                	add    %ecx,%eax
c0105234:	8b 50 08             	mov    0x8(%eax),%edx
c0105237:	8b 40 04             	mov    0x4(%eax),%eax
c010523a:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010523d:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0105240:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105243:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105246:	89 d0                	mov    %edx,%eax
c0105248:	c1 e0 02             	shl    $0x2,%eax
c010524b:	01 d0                	add    %edx,%eax
c010524d:	c1 e0 02             	shl    $0x2,%eax
c0105250:	01 c8                	add    %ecx,%eax
c0105252:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105255:	8b 58 10             	mov    0x10(%eax),%ebx
c0105258:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010525b:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010525e:	01 c8                	add    %ecx,%eax
c0105260:	11 da                	adc    %ebx,%edx
c0105262:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105265:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105268:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010526b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010526e:	89 d0                	mov    %edx,%eax
c0105270:	c1 e0 02             	shl    $0x2,%eax
c0105273:	01 d0                	add    %edx,%eax
c0105275:	c1 e0 02             	shl    $0x2,%eax
c0105278:	01 c8                	add    %ecx,%eax
c010527a:	83 c0 14             	add    $0x14,%eax
c010527d:	8b 00                	mov    (%eax),%eax
c010527f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0105285:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105288:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010528b:	83 c0 ff             	add    $0xffffffff,%eax
c010528e:	83 d2 ff             	adc    $0xffffffff,%edx
c0105291:	89 c6                	mov    %eax,%esi
c0105293:	89 d7                	mov    %edx,%edi
c0105295:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105298:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010529b:	89 d0                	mov    %edx,%eax
c010529d:	c1 e0 02             	shl    $0x2,%eax
c01052a0:	01 d0                	add    %edx,%eax
c01052a2:	c1 e0 02             	shl    $0x2,%eax
c01052a5:	01 c8                	add    %ecx,%eax
c01052a7:	8b 48 0c             	mov    0xc(%eax),%ecx
c01052aa:	8b 58 10             	mov    0x10(%eax),%ebx
c01052ad:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01052b3:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01052b7:	89 74 24 14          	mov    %esi,0x14(%esp)
c01052bb:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01052bf:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01052c2:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052c5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01052c9:	89 54 24 10          	mov    %edx,0x10(%esp)
c01052cd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01052d1:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01052d5:	c7 04 24 00 64 11 c0 	movl   $0xc0116400,(%esp)
c01052dc:	e8 84 b0 ff ff       	call   c0100365 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01052e1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052e4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052e7:	89 d0                	mov    %edx,%eax
c01052e9:	c1 e0 02             	shl    $0x2,%eax
c01052ec:	01 d0                	add    %edx,%eax
c01052ee:	c1 e0 02             	shl    $0x2,%eax
c01052f1:	01 c8                	add    %ecx,%eax
c01052f3:	83 c0 14             	add    $0x14,%eax
c01052f6:	8b 00                	mov    (%eax),%eax
c01052f8:	83 f8 01             	cmp    $0x1,%eax
c01052fb:	75 36                	jne    c0105333 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01052fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105300:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105303:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105306:	77 2b                	ja     c0105333 <page_init+0x14a>
c0105308:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010530b:	72 05                	jb     c0105312 <page_init+0x129>
c010530d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105310:	73 21                	jae    c0105333 <page_init+0x14a>
c0105312:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105316:	77 1b                	ja     c0105333 <page_init+0x14a>
c0105318:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010531c:	72 09                	jb     c0105327 <page_init+0x13e>
c010531e:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105325:	77 0c                	ja     c0105333 <page_init+0x14a>
                maxpa = end;
c0105327:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010532a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010532d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105330:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105333:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105337:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010533a:	8b 00                	mov    (%eax),%eax
c010533c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010533f:	0f 8f dd fe ff ff    	jg     c0105222 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105345:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105349:	72 1d                	jb     c0105368 <page_init+0x17f>
c010534b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010534f:	77 09                	ja     c010535a <page_init+0x171>
c0105351:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0105358:	76 0e                	jbe    c0105368 <page_init+0x17f>
        maxpa = KMEMSIZE;
c010535a:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105361:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0105368:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010536b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010536e:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105372:	c1 ea 0c             	shr    $0xc,%edx
c0105375:	a3 80 fe 14 c0       	mov    %eax,0xc014fe80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010537a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0105381:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c0105386:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105389:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010538c:	01 d0                	add    %edx,%eax
c010538e:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0105391:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105394:	ba 00 00 00 00       	mov    $0x0,%edx
c0105399:	f7 75 ac             	divl   -0x54(%ebp)
c010539c:	89 d0                	mov    %edx,%eax
c010539e:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01053a1:	29 c2                	sub    %eax,%edx
c01053a3:	89 d0                	mov    %edx,%eax
c01053a5:	a3 28 30 15 c0       	mov    %eax,0xc0153028

    for (i = 0; i < npage; i ++) {
c01053aa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01053b1:	eb 27                	jmp    c01053da <page_init+0x1f1>
        SetPageReserved(pages + i);
c01053b3:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01053b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053bb:	c1 e2 05             	shl    $0x5,%edx
c01053be:	01 d0                	add    %edx,%eax
c01053c0:	83 c0 04             	add    $0x4,%eax
c01053c3:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01053ca:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01053cd:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01053d0:	8b 55 90             	mov    -0x70(%ebp),%edx
c01053d3:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01053d6:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01053da:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053dd:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01053e2:	39 c2                	cmp    %eax,%edx
c01053e4:	72 cd                	jb     c01053b3 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01053e6:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01053eb:	c1 e0 05             	shl    $0x5,%eax
c01053ee:	89 c2                	mov    %eax,%edx
c01053f0:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01053f5:	01 d0                	add    %edx,%eax
c01053f7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01053fa:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0105401:	77 23                	ja     c0105426 <page_init+0x23d>
c0105403:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105406:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010540a:	c7 44 24 08 30 64 11 	movl   $0xc0116430,0x8(%esp)
c0105411:	c0 
c0105412:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105419:	00 
c010541a:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105421:	e8 8e ba ff ff       	call   c0100eb4 <__panic>
c0105426:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105429:	05 00 00 00 40       	add    $0x40000000,%eax
c010542e:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105431:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105438:	e9 74 01 00 00       	jmp    c01055b1 <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010543d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105440:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105443:	89 d0                	mov    %edx,%eax
c0105445:	c1 e0 02             	shl    $0x2,%eax
c0105448:	01 d0                	add    %edx,%eax
c010544a:	c1 e0 02             	shl    $0x2,%eax
c010544d:	01 c8                	add    %ecx,%eax
c010544f:	8b 50 08             	mov    0x8(%eax),%edx
c0105452:	8b 40 04             	mov    0x4(%eax),%eax
c0105455:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105458:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010545b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010545e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105461:	89 d0                	mov    %edx,%eax
c0105463:	c1 e0 02             	shl    $0x2,%eax
c0105466:	01 d0                	add    %edx,%eax
c0105468:	c1 e0 02             	shl    $0x2,%eax
c010546b:	01 c8                	add    %ecx,%eax
c010546d:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105470:	8b 58 10             	mov    0x10(%eax),%ebx
c0105473:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105476:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105479:	01 c8                	add    %ecx,%eax
c010547b:	11 da                	adc    %ebx,%edx
c010547d:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105480:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105483:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105486:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105489:	89 d0                	mov    %edx,%eax
c010548b:	c1 e0 02             	shl    $0x2,%eax
c010548e:	01 d0                	add    %edx,%eax
c0105490:	c1 e0 02             	shl    $0x2,%eax
c0105493:	01 c8                	add    %ecx,%eax
c0105495:	83 c0 14             	add    $0x14,%eax
c0105498:	8b 00                	mov    (%eax),%eax
c010549a:	83 f8 01             	cmp    $0x1,%eax
c010549d:	0f 85 0a 01 00 00    	jne    c01055ad <page_init+0x3c4>
            if (begin < freemem) {
c01054a3:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054a6:	ba 00 00 00 00       	mov    $0x0,%edx
c01054ab:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054ae:	72 17                	jb     c01054c7 <page_init+0x2de>
c01054b0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054b3:	77 05                	ja     c01054ba <page_init+0x2d1>
c01054b5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01054b8:	76 0d                	jbe    c01054c7 <page_init+0x2de>
                begin = freemem;
c01054ba:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054c0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01054c7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054cb:	72 1d                	jb     c01054ea <page_init+0x301>
c01054cd:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054d1:	77 09                	ja     c01054dc <page_init+0x2f3>
c01054d3:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01054da:	76 0e                	jbe    c01054ea <page_init+0x301>
                end = KMEMSIZE;
c01054dc:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01054e3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01054ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054ed:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054f0:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054f3:	0f 87 b4 00 00 00    	ja     c01055ad <page_init+0x3c4>
c01054f9:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054fc:	72 09                	jb     c0105507 <page_init+0x31e>
c01054fe:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105501:	0f 83 a6 00 00 00    	jae    c01055ad <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c0105507:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010550e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105511:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105514:	01 d0                	add    %edx,%eax
c0105516:	83 e8 01             	sub    $0x1,%eax
c0105519:	89 45 98             	mov    %eax,-0x68(%ebp)
c010551c:	8b 45 98             	mov    -0x68(%ebp),%eax
c010551f:	ba 00 00 00 00       	mov    $0x0,%edx
c0105524:	f7 75 9c             	divl   -0x64(%ebp)
c0105527:	89 d0                	mov    %edx,%eax
c0105529:	8b 55 98             	mov    -0x68(%ebp),%edx
c010552c:	29 c2                	sub    %eax,%edx
c010552e:	89 d0                	mov    %edx,%eax
c0105530:	ba 00 00 00 00       	mov    $0x0,%edx
c0105535:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105538:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c010553b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010553e:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0105541:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105544:	ba 00 00 00 00       	mov    $0x0,%edx
c0105549:	89 c7                	mov    %eax,%edi
c010554b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0105551:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105554:	89 d0                	mov    %edx,%eax
c0105556:	83 e0 00             	and    $0x0,%eax
c0105559:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010555c:	8b 45 80             	mov    -0x80(%ebp),%eax
c010555f:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105562:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105565:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105568:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010556b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010556e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105571:	77 3a                	ja     c01055ad <page_init+0x3c4>
c0105573:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105576:	72 05                	jb     c010557d <page_init+0x394>
c0105578:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010557b:	73 30                	jae    c01055ad <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010557d:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105580:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105583:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105586:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105589:	29 c8                	sub    %ecx,%eax
c010558b:	19 da                	sbb    %ebx,%edx
c010558d:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105591:	c1 ea 0c             	shr    $0xc,%edx
c0105594:	89 c3                	mov    %eax,%ebx
c0105596:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105599:	89 04 24             	mov    %eax,(%esp)
c010559c:	e8 8c f8 ff ff       	call   c0104e2d <pa2page>
c01055a1:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01055a5:	89 04 24             	mov    %eax,(%esp)
c01055a8:	e8 55 fb ff ff       	call   c0105102 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01055ad:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01055b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01055b4:	8b 00                	mov    (%eax),%eax
c01055b6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01055b9:	0f 8f 7e fe ff ff    	jg     c010543d <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01055bf:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01055c5:	5b                   	pop    %ebx
c01055c6:	5e                   	pop    %esi
c01055c7:	5f                   	pop    %edi
c01055c8:	5d                   	pop    %ebp
c01055c9:	c3                   	ret    

c01055ca <enable_paging>:

static void
enable_paging(void) {
c01055ca:	55                   	push   %ebp
c01055cb:	89 e5                	mov    %esp,%ebp
c01055cd:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01055d0:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c01055d5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01055d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01055db:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01055de:	0f 20 c0             	mov    %cr0,%eax
c01055e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c01055e4:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01055e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01055ea:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01055f1:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c01055f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01055f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01055fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055fe:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0105601:	c9                   	leave  
c0105602:	c3                   	ret    

c0105603 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0105603:	55                   	push   %ebp
c0105604:	89 e5                	mov    %esp,%ebp
c0105606:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105609:	8b 45 14             	mov    0x14(%ebp),%eax
c010560c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010560f:	31 d0                	xor    %edx,%eax
c0105611:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105616:	85 c0                	test   %eax,%eax
c0105618:	74 24                	je     c010563e <boot_map_segment+0x3b>
c010561a:	c7 44 24 0c 62 64 11 	movl   $0xc0116462,0xc(%esp)
c0105621:	c0 
c0105622:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105629:	c0 
c010562a:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0105631:	00 
c0105632:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105639:	e8 76 b8 ff ff       	call   c0100eb4 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010563e:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105645:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105648:	25 ff 0f 00 00       	and    $0xfff,%eax
c010564d:	89 c2                	mov    %eax,%edx
c010564f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105652:	01 c2                	add    %eax,%edx
c0105654:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105657:	01 d0                	add    %edx,%eax
c0105659:	83 e8 01             	sub    $0x1,%eax
c010565c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010565f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105662:	ba 00 00 00 00       	mov    $0x0,%edx
c0105667:	f7 75 f0             	divl   -0x10(%ebp)
c010566a:	89 d0                	mov    %edx,%eax
c010566c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010566f:	29 c2                	sub    %eax,%edx
c0105671:	89 d0                	mov    %edx,%eax
c0105673:	c1 e8 0c             	shr    $0xc,%eax
c0105676:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105679:	8b 45 0c             	mov    0xc(%ebp),%eax
c010567c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010567f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105682:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105687:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010568a:	8b 45 14             	mov    0x14(%ebp),%eax
c010568d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105693:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105698:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010569b:	eb 6b                	jmp    c0105708 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010569d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01056a4:	00 
c01056a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01056ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01056af:	89 04 24             	mov    %eax,(%esp)
c01056b2:	e8 d1 01 00 00       	call   c0105888 <get_pte>
c01056b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01056ba:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01056be:	75 24                	jne    c01056e4 <boot_map_segment+0xe1>
c01056c0:	c7 44 24 0c 8e 64 11 	movl   $0xc011648e,0xc(%esp)
c01056c7:	c0 
c01056c8:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01056cf:	c0 
c01056d0:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01056d7:	00 
c01056d8:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01056df:	e8 d0 b7 ff ff       	call   c0100eb4 <__panic>
        *ptep = pa | PTE_P | perm;
c01056e4:	8b 45 18             	mov    0x18(%ebp),%eax
c01056e7:	8b 55 14             	mov    0x14(%ebp),%edx
c01056ea:	09 d0                	or     %edx,%eax
c01056ec:	83 c8 01             	or     $0x1,%eax
c01056ef:	89 c2                	mov    %eax,%edx
c01056f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01056f4:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01056f6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01056fa:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0105701:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105708:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010570c:	75 8f                	jne    c010569d <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c010570e:	c9                   	leave  
c010570f:	c3                   	ret    

c0105710 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0105710:	55                   	push   %ebp
c0105711:	89 e5                	mov    %esp,%ebp
c0105713:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105716:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010571d:	e8 ff f9 ff ff       	call   c0105121 <alloc_pages>
c0105722:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105725:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105729:	75 1c                	jne    c0105747 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c010572b:	c7 44 24 08 9b 64 11 	movl   $0xc011649b,0x8(%esp)
c0105732:	c0 
c0105733:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010573a:	00 
c010573b:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105742:	e8 6d b7 ff ff       	call   c0100eb4 <__panic>
    }
    return page2kva(p);
c0105747:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010574a:	89 04 24             	mov    %eax,(%esp)
c010574d:	e8 20 f7 ff ff       	call   c0104e72 <page2kva>
}
c0105752:	c9                   	leave  
c0105753:	c3                   	ret    

c0105754 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105754:	55                   	push   %ebp
c0105755:	89 e5                	mov    %esp,%ebp
c0105757:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c010575a:	e8 70 f9 ff ff       	call   c01050cf <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010575f:	e8 85 fa ff ff       	call   c01051e9 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105764:	e8 5d 09 00 00       	call   c01060c6 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105769:	e8 a2 ff ff ff       	call   c0105710 <boot_alloc_page>
c010576e:	a3 84 fe 14 c0       	mov    %eax,0xc014fe84
    memset(boot_pgdir, 0, PGSIZE);
c0105773:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105778:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010577f:	00 
c0105780:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105787:	00 
c0105788:	89 04 24             	mov    %eax,(%esp)
c010578b:	e8 68 fc 00 00       	call   c01153f8 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c0105790:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105795:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105798:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010579f:	77 23                	ja     c01057c4 <pmm_init+0x70>
c01057a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057a8:	c7 44 24 08 30 64 11 	movl   $0xc0116430,0x8(%esp)
c01057af:	c0 
c01057b0:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01057b7:	00 
c01057b8:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01057bf:	e8 f0 b6 ff ff       	call   c0100eb4 <__panic>
c01057c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057c7:	05 00 00 00 40       	add    $0x40000000,%eax
c01057cc:	a3 24 30 15 c0       	mov    %eax,0xc0153024

    check_pgdir();
c01057d1:	e8 0e 09 00 00       	call   c01060e4 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01057d6:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01057db:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01057e1:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01057e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01057e9:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01057f0:	77 23                	ja     c0105815 <pmm_init+0xc1>
c01057f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057f9:	c7 44 24 08 30 64 11 	movl   $0xc0116430,0x8(%esp)
c0105800:	c0 
c0105801:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105808:	00 
c0105809:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105810:	e8 9f b6 ff ff       	call   c0100eb4 <__panic>
c0105815:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105818:	05 00 00 00 40       	add    $0x40000000,%eax
c010581d:	83 c8 03             	or     $0x3,%eax
c0105820:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105822:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105827:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010582e:	00 
c010582f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105836:	00 
c0105837:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c010583e:	38 
c010583f:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105846:	c0 
c0105847:	89 04 24             	mov    %eax,(%esp)
c010584a:	e8 b4 fd ff ff       	call   c0105603 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c010584f:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105854:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c010585a:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0105860:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105862:	e8 63 fd ff ff       	call   c01055ca <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105867:	e8 74 f7 ff ff       	call   c0104fe0 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c010586c:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105871:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105877:	e8 03 0f 00 00       	call   c010677f <check_boot_pgdir>

    print_pgdir();
c010587c:	e8 90 13 00 00       	call   c0106c11 <print_pgdir>
    
    kmalloc_init();
c0105881:	e8 e6 f2 ff ff       	call   c0104b6c <kmalloc_init>

}
c0105886:	c9                   	leave  
c0105887:	c3                   	ret    

c0105888 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105888:	55                   	push   %ebp
c0105889:	89 e5                	mov    %esp,%ebp
c010588b:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];//尝试获得页表
c010588e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105891:	c1 e8 16             	shr    $0x16,%eax
c0105894:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010589b:	8b 45 08             	mov    0x8(%ebp),%eax
c010589e:	01 d0                	add    %edx,%eax
c01058a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {//获取失败
c01058a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058a6:	8b 00                	mov    (%eax),%eax
c01058a8:	83 e0 01             	and    $0x1,%eax
c01058ab:	85 c0                	test   %eax,%eax
c01058ad:	0f 85 af 00 00 00    	jne    c0105962 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c01058b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01058b7:	74 15                	je     c01058ce <get_pte+0x46>
c01058b9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01058c0:	e8 5c f8 ff ff       	call   c0105121 <alloc_pages>
c01058c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01058c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01058cc:	75 0a                	jne    c01058d8 <get_pte+0x50>
            return NULL;
c01058ce:	b8 00 00 00 00       	mov    $0x0,%eax
c01058d3:	e9 e6 00 00 00       	jmp    c01059be <get_pte+0x136>
        }
        set_page_ref(page, 1);//引用次数加1
c01058d8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01058df:	00 
c01058e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058e3:	89 04 24             	mov    %eax,(%esp)
c01058e6:	e8 3b f6 ff ff       	call   c0104f26 <set_page_ref>
        uintptr_t pa = page2pa(page);//得到该页物理地址
c01058eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058ee:	89 04 24             	mov    %eax,(%esp)
c01058f1:	e8 21 f5 ff ff       	call   c0104e17 <page2pa>
c01058f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);//初始化，将物理地址转为虚拟地址
c01058f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01058ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105902:	c1 e8 0c             	shr    $0xc,%eax
c0105905:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105908:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010590d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105910:	72 23                	jb     c0105935 <get_pte+0xad>
c0105912:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105915:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105919:	c7 44 24 08 8c 63 11 	movl   $0xc011638c,0x8(%esp)
c0105920:	c0 
c0105921:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c0105928:	00 
c0105929:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105930:	e8 7f b5 ff ff       	call   c0100eb4 <__panic>
c0105935:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105938:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010593d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105944:	00 
c0105945:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010594c:	00 
c010594d:	89 04 24             	mov    %eax,(%esp)
c0105950:	e8 a3 fa 00 00       	call   c01153f8 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;//设置控制位
c0105955:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105958:	83 c8 07             	or     $0x7,%eax
c010595b:	89 c2                	mov    %eax,%edx
c010595d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105960:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];//返回虚拟地址la对应的页表项入口地址
c0105962:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105965:	8b 00                	mov    (%eax),%eax
c0105967:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010596c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010596f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105972:	c1 e8 0c             	shr    $0xc,%eax
c0105975:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105978:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010597d:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105980:	72 23                	jb     c01059a5 <get_pte+0x11d>
c0105982:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105985:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105989:	c7 44 24 08 8c 63 11 	movl   $0xc011638c,0x8(%esp)
c0105990:	c0 
c0105991:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c0105998:	00 
c0105999:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01059a0:	e8 0f b5 ff ff       	call   c0100eb4 <__panic>
c01059a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059a8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01059ad:	8b 55 0c             	mov    0xc(%ebp),%edx
c01059b0:	c1 ea 0c             	shr    $0xc,%edx
c01059b3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c01059b9:	c1 e2 02             	shl    $0x2,%edx
c01059bc:	01 d0                	add    %edx,%eax
}
c01059be:	c9                   	leave  
c01059bf:	c3                   	ret    

c01059c0 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01059c0:	55                   	push   %ebp
c01059c1:	89 e5                	mov    %esp,%ebp
c01059c3:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01059c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01059cd:	00 
c01059ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01059d8:	89 04 24             	mov    %eax,(%esp)
c01059db:	e8 a8 fe ff ff       	call   c0105888 <get_pte>
c01059e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c01059e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01059e7:	74 08                	je     c01059f1 <get_page+0x31>
        *ptep_store = ptep;
c01059e9:	8b 45 10             	mov    0x10(%ebp),%eax
c01059ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01059ef:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c01059f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01059f5:	74 1b                	je     c0105a12 <get_page+0x52>
c01059f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059fa:	8b 00                	mov    (%eax),%eax
c01059fc:	83 e0 01             	and    $0x1,%eax
c01059ff:	85 c0                	test   %eax,%eax
c0105a01:	74 0f                	je     c0105a12 <get_page+0x52>
        return pa2page(*ptep);
c0105a03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a06:	8b 00                	mov    (%eax),%eax
c0105a08:	89 04 24             	mov    %eax,(%esp)
c0105a0b:	e8 1d f4 ff ff       	call   c0104e2d <pa2page>
c0105a10:	eb 05                	jmp    c0105a17 <get_page+0x57>
    }
    return NULL;
c0105a12:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a17:	c9                   	leave  
c0105a18:	c3                   	ret    

c0105a19 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105a19:	55                   	push   %ebp
c0105a1a:	89 e5                	mov    %esp,%ebp
c0105a1c:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {//如果页表项存在
c0105a1f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a22:	8b 00                	mov    (%eax),%eax
c0105a24:	83 e0 01             	and    $0x1,%eax
c0105a27:	85 c0                	test   %eax,%eax
c0105a29:	74 4d                	je     c0105a78 <page_remove_pte+0x5f>
        //得到页表项
        struct Page *page = pte2page(*ptep);
c0105a2b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a2e:	8b 00                	mov    (%eax),%eax
c0105a30:	89 04 24             	mov    %eax,(%esp)
c0105a33:	e8 8e f4 ff ff       	call   c0104ec6 <pte2page>
c0105a38:	89 45 f4             	mov    %eax,-0xc(%ebp)
        //当只被当前进程引用时
        if (page_ref_dec(page) == 0) {
c0105a3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a3e:	89 04 24             	mov    %eax,(%esp)
c0105a41:	e8 04 f5 ff ff       	call   c0104f4a <page_ref_dec>
c0105a46:	85 c0                	test   %eax,%eax
c0105a48:	75 13                	jne    c0105a5d <page_remove_pte+0x44>
            free_page(page); //释放页
c0105a4a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105a51:	00 
c0105a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a55:	89 04 24             	mov    %eax,(%esp)
c0105a58:	e8 2f f7 ff ff       	call   c010518c <free_pages>
        }
        *ptep = 0;//该页目录清空
c0105a5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);//若修改的页表被进程正在使用，则使之无效
c0105a66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a69:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a70:	89 04 24             	mov    %eax,(%esp)
c0105a73:	e8 1d 05 00 00       	call   c0105f95 <tlb_invalidate>
    }
}
c0105a78:	c9                   	leave  
c0105a79:	c3                   	ret    

c0105a7a <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105a7a:	55                   	push   %ebp
c0105a7b:	89 e5                	mov    %esp,%ebp
c0105a7d:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105a80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a83:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a88:	85 c0                	test   %eax,%eax
c0105a8a:	75 0c                	jne    c0105a98 <unmap_range+0x1e>
c0105a8c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a8f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a94:	85 c0                	test   %eax,%eax
c0105a96:	74 24                	je     c0105abc <unmap_range+0x42>
c0105a98:	c7 44 24 0c b4 64 11 	movl   $0xc01164b4,0xc(%esp)
c0105a9f:	c0 
c0105aa0:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105aa7:	c0 
c0105aa8:	c7 44 24 04 d6 01 00 	movl   $0x1d6,0x4(%esp)
c0105aaf:	00 
c0105ab0:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105ab7:	e8 f8 b3 ff ff       	call   c0100eb4 <__panic>
    assert(USER_ACCESS(start, end));
c0105abc:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105ac3:	76 11                	jbe    c0105ad6 <unmap_range+0x5c>
c0105ac5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ac8:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105acb:	73 09                	jae    c0105ad6 <unmap_range+0x5c>
c0105acd:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105ad4:	76 24                	jbe    c0105afa <unmap_range+0x80>
c0105ad6:	c7 44 24 0c dd 64 11 	movl   $0xc01164dd,0xc(%esp)
c0105add:	c0 
c0105ade:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105ae5:	c0 
c0105ae6:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c0105aed:	00 
c0105aee:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105af5:	e8 ba b3 ff ff       	call   c0100eb4 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105afa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b01:	00 
c0105b02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b09:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b0c:	89 04 24             	mov    %eax,(%esp)
c0105b0f:	e8 74 fd ff ff       	call   c0105888 <get_pte>
c0105b14:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105b17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b1b:	75 18                	jne    c0105b35 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b20:	05 00 00 40 00       	add    $0x400000,%eax
c0105b25:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b2b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b30:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105b33:	eb 29                	jmp    c0105b5e <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105b35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b38:	8b 00                	mov    (%eax),%eax
c0105b3a:	85 c0                	test   %eax,%eax
c0105b3c:	74 19                	je     c0105b57 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105b3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b41:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b48:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b4f:	89 04 24             	mov    %eax,(%esp)
c0105b52:	e8 c2 fe ff ff       	call   c0105a19 <page_remove_pte>
        }
        start += PGSIZE;
c0105b57:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105b5e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105b62:	74 08                	je     c0105b6c <unmap_range+0xf2>
c0105b64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b67:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b6a:	72 8e                	jb     c0105afa <unmap_range+0x80>
}
c0105b6c:	c9                   	leave  
c0105b6d:	c3                   	ret    

c0105b6e <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105b6e:	55                   	push   %ebp
c0105b6f:	89 e5                	mov    %esp,%ebp
c0105b71:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b77:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b7c:	85 c0                	test   %eax,%eax
c0105b7e:	75 0c                	jne    c0105b8c <exit_range+0x1e>
c0105b80:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b83:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b88:	85 c0                	test   %eax,%eax
c0105b8a:	74 24                	je     c0105bb0 <exit_range+0x42>
c0105b8c:	c7 44 24 0c b4 64 11 	movl   $0xc01164b4,0xc(%esp)
c0105b93:	c0 
c0105b94:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105b9b:	c0 
c0105b9c:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0105ba3:	00 
c0105ba4:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105bab:	e8 04 b3 ff ff       	call   c0100eb4 <__panic>
    assert(USER_ACCESS(start, end));
c0105bb0:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105bb7:	76 11                	jbe    c0105bca <exit_range+0x5c>
c0105bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bbc:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bbf:	73 09                	jae    c0105bca <exit_range+0x5c>
c0105bc1:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105bc8:	76 24                	jbe    c0105bee <exit_range+0x80>
c0105bca:	c7 44 24 0c dd 64 11 	movl   $0xc01164dd,0xc(%esp)
c0105bd1:	c0 
c0105bd2:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105bd9:	c0 
c0105bda:	c7 44 24 04 e9 01 00 	movl   $0x1e9,0x4(%esp)
c0105be1:	00 
c0105be2:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105be9:	e8 c6 b2 ff ff       	call   c0100eb4 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105bee:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105bf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bf7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105bfc:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105bff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c02:	c1 e8 16             	shr    $0x16,%eax
c0105c05:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105c08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c12:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c15:	01 d0                	add    %edx,%eax
c0105c17:	8b 00                	mov    (%eax),%eax
c0105c19:	83 e0 01             	and    $0x1,%eax
c0105c1c:	85 c0                	test   %eax,%eax
c0105c1e:	74 3e                	je     c0105c5e <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105c20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c2d:	01 d0                	add    %edx,%eax
c0105c2f:	8b 00                	mov    (%eax),%eax
c0105c31:	89 04 24             	mov    %eax,(%esp)
c0105c34:	e8 cb f2 ff ff       	call   c0104f04 <pde2page>
c0105c39:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c40:	00 
c0105c41:	89 04 24             	mov    %eax,(%esp)
c0105c44:	e8 43 f5 ff ff       	call   c010518c <free_pages>
            pgdir[pde_idx] = 0;
c0105c49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c4c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c53:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c56:	01 d0                	add    %edx,%eax
c0105c58:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105c5e:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c69:	74 08                	je     c0105c73 <exit_range+0x105>
c0105c6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c6e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c71:	72 8c                	jb     c0105bff <exit_range+0x91>
}
c0105c73:	c9                   	leave  
c0105c74:	c3                   	ret    

c0105c75 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105c75:	55                   	push   %ebp
c0105c76:	89 e5                	mov    %esp,%ebp
c0105c78:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c7b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c7e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c83:	85 c0                	test   %eax,%eax
c0105c85:	75 0c                	jne    c0105c93 <copy_range+0x1e>
c0105c87:	8b 45 14             	mov    0x14(%ebp),%eax
c0105c8a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c8f:	85 c0                	test   %eax,%eax
c0105c91:	74 24                	je     c0105cb7 <copy_range+0x42>
c0105c93:	c7 44 24 0c b4 64 11 	movl   $0xc01164b4,0xc(%esp)
c0105c9a:	c0 
c0105c9b:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105ca2:	c0 
c0105ca3:	c7 44 24 04 fe 01 00 	movl   $0x1fe,0x4(%esp)
c0105caa:	00 
c0105cab:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105cb2:	e8 fd b1 ff ff       	call   c0100eb4 <__panic>
    assert(USER_ACCESS(start, end));
c0105cb7:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105cbe:	76 11                	jbe    c0105cd1 <copy_range+0x5c>
c0105cc0:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cc3:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105cc6:	73 09                	jae    c0105cd1 <copy_range+0x5c>
c0105cc8:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105ccf:	76 24                	jbe    c0105cf5 <copy_range+0x80>
c0105cd1:	c7 44 24 0c dd 64 11 	movl   $0xc01164dd,0xc(%esp)
c0105cd8:	c0 
c0105cd9:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105ce0:	c0 
c0105ce1:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c0105ce8:	00 
c0105ce9:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105cf0:	e8 bf b1 ff ff       	call   c0100eb4 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105cf5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105cfc:	00 
c0105cfd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d07:	89 04 24             	mov    %eax,(%esp)
c0105d0a:	e8 79 fb ff ff       	call   c0105888 <get_pte>
c0105d0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105d12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d16:	75 1b                	jne    c0105d33 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105d18:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d1b:	05 00 00 40 00       	add    $0x400000,%eax
c0105d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d26:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d2b:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d2e:	e9 4c 01 00 00       	jmp    c0105e7f <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d36:	8b 00                	mov    (%eax),%eax
c0105d38:	83 e0 01             	and    $0x1,%eax
c0105d3b:	85 c0                	test   %eax,%eax
c0105d3d:	0f 84 35 01 00 00    	je     c0105e78 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105d43:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105d4a:	00 
c0105d4b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d52:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d55:	89 04 24             	mov    %eax,(%esp)
c0105d58:	e8 2b fb ff ff       	call   c0105888 <get_pte>
c0105d5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d64:	75 0a                	jne    c0105d70 <copy_range+0xfb>
                return -E_NO_MEM;
c0105d66:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105d6b:	e9 26 01 00 00       	jmp    c0105e96 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105d70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d73:	8b 00                	mov    (%eax),%eax
c0105d75:	83 e0 07             	and    $0x7,%eax
c0105d78:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d7e:	8b 00                	mov    (%eax),%eax
c0105d80:	89 04 24             	mov    %eax,(%esp)
c0105d83:	e8 3e f1 ff ff       	call   c0104ec6 <pte2page>
c0105d88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105d8b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105d92:	e8 8a f3 ff ff       	call   c0105121 <alloc_pages>
c0105d97:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105d9a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105d9e:	75 24                	jne    c0105dc4 <copy_range+0x14f>
c0105da0:	c7 44 24 0c f5 64 11 	movl   $0xc01164f5,0xc(%esp)
c0105da7:	c0 
c0105da8:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105daf:	c0 
c0105db0:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c0105db7:	00 
c0105db8:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105dbf:	e8 f0 b0 ff ff       	call   c0100eb4 <__panic>
        assert(npage!=NULL);
c0105dc4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105dc8:	75 24                	jne    c0105dee <copy_range+0x179>
c0105dca:	c7 44 24 0c 00 65 11 	movl   $0xc0116500,0xc(%esp)
c0105dd1:	c0 
c0105dd2:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105dd9:	c0 
c0105dda:	c7 44 24 04 13 02 00 	movl   $0x213,0x4(%esp)
c0105de1:	00 
c0105de2:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105de9:	e8 c6 b0 ff ff       	call   c0100eb4 <__panic>
        int ret=0;
c0105dee:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        //返回父进程的内核虚拟页地址  
        void* kva_src = page2kva(page);
c0105df5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105df8:	89 04 24             	mov    %eax,(%esp)
c0105dfb:	e8 72 f0 ff ff       	call   c0104e72 <page2kva>
c0105e00:	89 45 d8             	mov    %eax,-0x28(%ebp)
        //返回子进程的内核虚拟页地址  
        void* kva_dst = page2kva(npage);
c0105e03:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e06:	89 04 24             	mov    %eax,(%esp)
c0105e09:	e8 64 f0 ff ff       	call   c0104e72 <page2kva>
c0105e0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
       //复制父进程到子进程  
        memcpy(kva_dst, kva_src, PGSIZE);
c0105e11:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105e18:	00 
c0105e19:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e20:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e23:	89 04 24             	mov    %eax,(%esp)
c0105e26:	e8 af f6 00 00       	call   c01154da <memcpy>
        //建立子进程页地址起始位置与物理地址的映射关系(prem是权限)  
        ret = page_insert(to, npage, start, perm);
c0105e2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e2e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e32:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e35:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e39:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e40:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e43:	89 04 24             	mov    %eax,(%esp)
c0105e46:	e8 91 00 00 00       	call   c0105edc <page_insert>
c0105e4b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105e4e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105e52:	74 24                	je     c0105e78 <copy_range+0x203>
c0105e54:	c7 44 24 0c 0c 65 11 	movl   $0xc011650c,0xc(%esp)
c0105e5b:	c0 
c0105e5c:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0105e63:	c0 
c0105e64:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0105e6b:	00 
c0105e6c:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105e73:	e8 3c b0 ff ff       	call   c0100eb4 <__panic>
        }
        start += PGSIZE;
c0105e78:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105e7f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105e83:	74 0c                	je     c0105e91 <copy_range+0x21c>
c0105e85:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e88:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105e8b:	0f 82 64 fe ff ff    	jb     c0105cf5 <copy_range+0x80>
    return 0;
c0105e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e96:	c9                   	leave  
c0105e97:	c3                   	ret    

c0105e98 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105e98:	55                   	push   %ebp
c0105e99:	89 e5                	mov    %esp,%ebp
c0105e9b:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105e9e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ea5:	00 
c0105ea6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ea9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eb0:	89 04 24             	mov    %eax,(%esp)
c0105eb3:	e8 d0 f9 ff ff       	call   c0105888 <get_pte>
c0105eb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105ebb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ebf:	74 19                	je     c0105eda <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ec4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ecb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ecf:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ed2:	89 04 24             	mov    %eax,(%esp)
c0105ed5:	e8 3f fb ff ff       	call   c0105a19 <page_remove_pte>
    }
}
c0105eda:	c9                   	leave  
c0105edb:	c3                   	ret    

c0105edc <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105edc:	55                   	push   %ebp
c0105edd:	89 e5                	mov    %esp,%ebp
c0105edf:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105ee2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105ee9:	00 
c0105eea:	8b 45 10             	mov    0x10(%ebp),%eax
c0105eed:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ef1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ef4:	89 04 24             	mov    %eax,(%esp)
c0105ef7:	e8 8c f9 ff ff       	call   c0105888 <get_pte>
c0105efc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105eff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f03:	75 0a                	jne    c0105f0f <page_insert+0x33>
        return -E_NO_MEM;
c0105f05:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f0a:	e9 84 00 00 00       	jmp    c0105f93 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105f0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f12:	89 04 24             	mov    %eax,(%esp)
c0105f15:	e8 19 f0 ff ff       	call   c0104f33 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f1d:	8b 00                	mov    (%eax),%eax
c0105f1f:	83 e0 01             	and    $0x1,%eax
c0105f22:	85 c0                	test   %eax,%eax
c0105f24:	74 3e                	je     c0105f64 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f29:	8b 00                	mov    (%eax),%eax
c0105f2b:	89 04 24             	mov    %eax,(%esp)
c0105f2e:	e8 93 ef ff ff       	call   c0104ec6 <pte2page>
c0105f33:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105f36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f39:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105f3c:	75 0d                	jne    c0105f4b <page_insert+0x6f>
            page_ref_dec(page);
c0105f3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f41:	89 04 24             	mov    %eax,(%esp)
c0105f44:	e8 01 f0 ff ff       	call   c0104f4a <page_ref_dec>
c0105f49:	eb 19                	jmp    c0105f64 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f4e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f52:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f55:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f59:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f5c:	89 04 24             	mov    %eax,(%esp)
c0105f5f:	e8 b5 fa ff ff       	call   c0105a19 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105f64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f67:	89 04 24             	mov    %eax,(%esp)
c0105f6a:	e8 a8 ee ff ff       	call   c0104e17 <page2pa>
c0105f6f:	0b 45 14             	or     0x14(%ebp),%eax
c0105f72:	83 c8 01             	or     $0x1,%eax
c0105f75:	89 c2                	mov    %eax,%edx
c0105f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f7a:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105f7c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f83:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f86:	89 04 24             	mov    %eax,(%esp)
c0105f89:	e8 07 00 00 00       	call   c0105f95 <tlb_invalidate>
    return 0;
c0105f8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f93:	c9                   	leave  
c0105f94:	c3                   	ret    

c0105f95 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105f95:	55                   	push   %ebp
c0105f96:	89 e5                	mov    %esp,%ebp
c0105f98:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105f9b:	0f 20 d8             	mov    %cr3,%eax
c0105f9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105fa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105fa4:	89 c2                	mov    %eax,%edx
c0105fa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105fac:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105fb3:	77 23                	ja     c0105fd8 <tlb_invalidate+0x43>
c0105fb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fb8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105fbc:	c7 44 24 08 30 64 11 	movl   $0xc0116430,0x8(%esp)
c0105fc3:	c0 
c0105fc4:	c7 44 24 04 5c 02 00 	movl   $0x25c,0x4(%esp)
c0105fcb:	00 
c0105fcc:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0105fd3:	e8 dc ae ff ff       	call   c0100eb4 <__panic>
c0105fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fdb:	05 00 00 00 40       	add    $0x40000000,%eax
c0105fe0:	39 c2                	cmp    %eax,%edx
c0105fe2:	75 0c                	jne    c0105ff0 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fe7:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105fea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105fed:	0f 01 38             	invlpg (%eax)
    }
}
c0105ff0:	c9                   	leave  
c0105ff1:	c3                   	ret    

c0105ff2 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105ff2:	55                   	push   %ebp
c0105ff3:	89 e5                	mov    %esp,%ebp
c0105ff5:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105ff8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105fff:	e8 1d f1 ff ff       	call   c0105121 <alloc_pages>
c0106004:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106007:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010600b:	0f 84 b0 00 00 00    	je     c01060c1 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106011:	8b 45 10             	mov    0x10(%ebp),%eax
c0106014:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106018:	8b 45 0c             	mov    0xc(%ebp),%eax
c010601b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010601f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106022:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106026:	8b 45 08             	mov    0x8(%ebp),%eax
c0106029:	89 04 24             	mov    %eax,(%esp)
c010602c:	e8 ab fe ff ff       	call   c0105edc <page_insert>
c0106031:	85 c0                	test   %eax,%eax
c0106033:	74 1a                	je     c010604f <pgdir_alloc_page+0x5d>
            free_page(page);
c0106035:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010603c:	00 
c010603d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106040:	89 04 24             	mov    %eax,(%esp)
c0106043:	e8 44 f1 ff ff       	call   c010518c <free_pages>
            return NULL;
c0106048:	b8 00 00 00 00       	mov    $0x0,%eax
c010604d:	eb 75                	jmp    c01060c4 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c010604f:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0106054:	85 c0                	test   %eax,%eax
c0106056:	74 69                	je     c01060c1 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0106058:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c010605d:	85 c0                	test   %eax,%eax
c010605f:	74 60                	je     c01060c1 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106061:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0106066:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010606d:	00 
c010606e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106071:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106075:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106078:	89 54 24 04          	mov    %edx,0x4(%esp)
c010607c:	89 04 24             	mov    %eax,(%esp)
c010607f:	e8 3e 0e 00 00       	call   c0106ec2 <swap_map_swappable>
                page->pra_vaddr=la;
c0106084:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106087:	8b 55 0c             	mov    0xc(%ebp),%edx
c010608a:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c010608d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106090:	89 04 24             	mov    %eax,(%esp)
c0106093:	e8 84 ee ff ff       	call   c0104f1c <page_ref>
c0106098:	83 f8 01             	cmp    $0x1,%eax
c010609b:	74 24                	je     c01060c1 <pgdir_alloc_page+0xcf>
c010609d:	c7 44 24 0c 15 65 11 	movl   $0xc0116515,0xc(%esp)
c01060a4:	c0 
c01060a5:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01060ac:	c0 
c01060ad:	c7 44 24 04 70 02 00 	movl   $0x270,0x4(%esp)
c01060b4:	00 
c01060b5:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01060bc:	e8 f3 ad ff ff       	call   c0100eb4 <__panic>
            }
        }

    }

    return page;
c01060c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01060c4:	c9                   	leave  
c01060c5:	c3                   	ret    

c01060c6 <check_alloc_page>:

static void
check_alloc_page(void) {
c01060c6:	55                   	push   %ebp
c01060c7:	89 e5                	mov    %esp,%ebp
c01060c9:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01060cc:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01060d1:	8b 40 18             	mov    0x18(%eax),%eax
c01060d4:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01060d6:	c7 04 24 2c 65 11 c0 	movl   $0xc011652c,(%esp)
c01060dd:	e8 83 a2 ff ff       	call   c0100365 <cprintf>
}
c01060e2:	c9                   	leave  
c01060e3:	c3                   	ret    

c01060e4 <check_pgdir>:

static void
check_pgdir(void) {
c01060e4:	55                   	push   %ebp
c01060e5:	89 e5                	mov    %esp,%ebp
c01060e7:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01060ea:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01060ef:	3d 00 80 03 00       	cmp    $0x38000,%eax
c01060f4:	76 24                	jbe    c010611a <check_pgdir+0x36>
c01060f6:	c7 44 24 0c 4b 65 11 	movl   $0xc011654b,0xc(%esp)
c01060fd:	c0 
c01060fe:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106105:	c0 
c0106106:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c010610d:	00 
c010610e:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106115:	e8 9a ad ff ff       	call   c0100eb4 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010611a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010611f:	85 c0                	test   %eax,%eax
c0106121:	74 0e                	je     c0106131 <check_pgdir+0x4d>
c0106123:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106128:	25 ff 0f 00 00       	and    $0xfff,%eax
c010612d:	85 c0                	test   %eax,%eax
c010612f:	74 24                	je     c0106155 <check_pgdir+0x71>
c0106131:	c7 44 24 0c 68 65 11 	movl   $0xc0116568,0xc(%esp)
c0106138:	c0 
c0106139:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106140:	c0 
c0106141:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0106148:	00 
c0106149:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106150:	e8 5f ad ff ff       	call   c0100eb4 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106155:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010615a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106161:	00 
c0106162:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106169:	00 
c010616a:	89 04 24             	mov    %eax,(%esp)
c010616d:	e8 4e f8 ff ff       	call   c01059c0 <get_page>
c0106172:	85 c0                	test   %eax,%eax
c0106174:	74 24                	je     c010619a <check_pgdir+0xb6>
c0106176:	c7 44 24 0c a0 65 11 	movl   $0xc01165a0,0xc(%esp)
c010617d:	c0 
c010617e:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106185:	c0 
c0106186:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c010618d:	00 
c010618e:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106195:	e8 1a ad ff ff       	call   c0100eb4 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010619a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01061a1:	e8 7b ef ff ff       	call   c0105121 <alloc_pages>
c01061a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01061a9:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01061ae:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01061b5:	00 
c01061b6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061bd:	00 
c01061be:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01061c1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01061c5:	89 04 24             	mov    %eax,(%esp)
c01061c8:	e8 0f fd ff ff       	call   c0105edc <page_insert>
c01061cd:	85 c0                	test   %eax,%eax
c01061cf:	74 24                	je     c01061f5 <check_pgdir+0x111>
c01061d1:	c7 44 24 0c c8 65 11 	movl   $0xc01165c8,0xc(%esp)
c01061d8:	c0 
c01061d9:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01061e0:	c0 
c01061e1:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c01061e8:	00 
c01061e9:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01061f0:	e8 bf ac ff ff       	call   c0100eb4 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01061f5:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01061fa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106201:	00 
c0106202:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106209:	00 
c010620a:	89 04 24             	mov    %eax,(%esp)
c010620d:	e8 76 f6 ff ff       	call   c0105888 <get_pte>
c0106212:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106215:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106219:	75 24                	jne    c010623f <check_pgdir+0x15b>
c010621b:	c7 44 24 0c f4 65 11 	movl   $0xc01165f4,0xc(%esp)
c0106222:	c0 
c0106223:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c010622a:	c0 
c010622b:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106232:	00 
c0106233:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c010623a:	e8 75 ac ff ff       	call   c0100eb4 <__panic>
    assert(pa2page(*ptep) == p1);
c010623f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106242:	8b 00                	mov    (%eax),%eax
c0106244:	89 04 24             	mov    %eax,(%esp)
c0106247:	e8 e1 eb ff ff       	call   c0104e2d <pa2page>
c010624c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010624f:	74 24                	je     c0106275 <check_pgdir+0x191>
c0106251:	c7 44 24 0c 21 66 11 	movl   $0xc0116621,0xc(%esp)
c0106258:	c0 
c0106259:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106260:	c0 
c0106261:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0106268:	00 
c0106269:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106270:	e8 3f ac ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p1) == 1);
c0106275:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106278:	89 04 24             	mov    %eax,(%esp)
c010627b:	e8 9c ec ff ff       	call   c0104f1c <page_ref>
c0106280:	83 f8 01             	cmp    $0x1,%eax
c0106283:	74 24                	je     c01062a9 <check_pgdir+0x1c5>
c0106285:	c7 44 24 0c 36 66 11 	movl   $0xc0116636,0xc(%esp)
c010628c:	c0 
c010628d:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106294:	c0 
c0106295:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c010629c:	00 
c010629d:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01062a4:	e8 0b ac ff ff       	call   c0100eb4 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01062a9:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01062ae:	8b 00                	mov    (%eax),%eax
c01062b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01062b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01062b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062bb:	c1 e8 0c             	shr    $0xc,%eax
c01062be:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01062c1:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01062c6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01062c9:	72 23                	jb     c01062ee <check_pgdir+0x20a>
c01062cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062d2:	c7 44 24 08 8c 63 11 	movl   $0xc011638c,0x8(%esp)
c01062d9:	c0 
c01062da:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01062e1:	00 
c01062e2:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01062e9:	e8 c6 ab ff ff       	call   c0100eb4 <__panic>
c01062ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062f1:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01062f6:	83 c0 04             	add    $0x4,%eax
c01062f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01062fc:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106301:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106308:	00 
c0106309:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106310:	00 
c0106311:	89 04 24             	mov    %eax,(%esp)
c0106314:	e8 6f f5 ff ff       	call   c0105888 <get_pte>
c0106319:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010631c:	74 24                	je     c0106342 <check_pgdir+0x25e>
c010631e:	c7 44 24 0c 48 66 11 	movl   $0xc0116648,0xc(%esp)
c0106325:	c0 
c0106326:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c010632d:	c0 
c010632e:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c0106335:	00 
c0106336:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c010633d:	e8 72 ab ff ff       	call   c0100eb4 <__panic>

    p2 = alloc_page();
c0106342:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106349:	e8 d3 ed ff ff       	call   c0105121 <alloc_pages>
c010634e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106351:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106356:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010635d:	00 
c010635e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106365:	00 
c0106366:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106369:	89 54 24 04          	mov    %edx,0x4(%esp)
c010636d:	89 04 24             	mov    %eax,(%esp)
c0106370:	e8 67 fb ff ff       	call   c0105edc <page_insert>
c0106375:	85 c0                	test   %eax,%eax
c0106377:	74 24                	je     c010639d <check_pgdir+0x2b9>
c0106379:	c7 44 24 0c 70 66 11 	movl   $0xc0116670,0xc(%esp)
c0106380:	c0 
c0106381:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106388:	c0 
c0106389:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c0106390:	00 
c0106391:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106398:	e8 17 ab ff ff       	call   c0100eb4 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010639d:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01063a2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01063a9:	00 
c01063aa:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01063b1:	00 
c01063b2:	89 04 24             	mov    %eax,(%esp)
c01063b5:	e8 ce f4 ff ff       	call   c0105888 <get_pte>
c01063ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01063c1:	75 24                	jne    c01063e7 <check_pgdir+0x303>
c01063c3:	c7 44 24 0c a8 66 11 	movl   $0xc01166a8,0xc(%esp)
c01063ca:	c0 
c01063cb:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01063d2:	c0 
c01063d3:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c01063da:	00 
c01063db:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01063e2:	e8 cd aa ff ff       	call   c0100eb4 <__panic>
    assert(*ptep & PTE_U);
c01063e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063ea:	8b 00                	mov    (%eax),%eax
c01063ec:	83 e0 04             	and    $0x4,%eax
c01063ef:	85 c0                	test   %eax,%eax
c01063f1:	75 24                	jne    c0106417 <check_pgdir+0x333>
c01063f3:	c7 44 24 0c d8 66 11 	movl   $0xc01166d8,0xc(%esp)
c01063fa:	c0 
c01063fb:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106402:	c0 
c0106403:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c010640a:	00 
c010640b:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106412:	e8 9d aa ff ff       	call   c0100eb4 <__panic>
    assert(*ptep & PTE_W);
c0106417:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010641a:	8b 00                	mov    (%eax),%eax
c010641c:	83 e0 02             	and    $0x2,%eax
c010641f:	85 c0                	test   %eax,%eax
c0106421:	75 24                	jne    c0106447 <check_pgdir+0x363>
c0106423:	c7 44 24 0c e6 66 11 	movl   $0xc01166e6,0xc(%esp)
c010642a:	c0 
c010642b:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106432:	c0 
c0106433:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010643a:	00 
c010643b:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106442:	e8 6d aa ff ff       	call   c0100eb4 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106447:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010644c:	8b 00                	mov    (%eax),%eax
c010644e:	83 e0 04             	and    $0x4,%eax
c0106451:	85 c0                	test   %eax,%eax
c0106453:	75 24                	jne    c0106479 <check_pgdir+0x395>
c0106455:	c7 44 24 0c f4 66 11 	movl   $0xc01166f4,0xc(%esp)
c010645c:	c0 
c010645d:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106464:	c0 
c0106465:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c010646c:	00 
c010646d:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106474:	e8 3b aa ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p2) == 1);
c0106479:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010647c:	89 04 24             	mov    %eax,(%esp)
c010647f:	e8 98 ea ff ff       	call   c0104f1c <page_ref>
c0106484:	83 f8 01             	cmp    $0x1,%eax
c0106487:	74 24                	je     c01064ad <check_pgdir+0x3c9>
c0106489:	c7 44 24 0c 0a 67 11 	movl   $0xc011670a,0xc(%esp)
c0106490:	c0 
c0106491:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106498:	c0 
c0106499:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c01064a0:	00 
c01064a1:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01064a8:	e8 07 aa ff ff       	call   c0100eb4 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01064ad:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01064b2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01064b9:	00 
c01064ba:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01064c1:	00 
c01064c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01064c5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064c9:	89 04 24             	mov    %eax,(%esp)
c01064cc:	e8 0b fa ff ff       	call   c0105edc <page_insert>
c01064d1:	85 c0                	test   %eax,%eax
c01064d3:	74 24                	je     c01064f9 <check_pgdir+0x415>
c01064d5:	c7 44 24 0c 1c 67 11 	movl   $0xc011671c,0xc(%esp)
c01064dc:	c0 
c01064dd:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01064e4:	c0 
c01064e5:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c01064ec:	00 
c01064ed:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01064f4:	e8 bb a9 ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p1) == 2);
c01064f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01064fc:	89 04 24             	mov    %eax,(%esp)
c01064ff:	e8 18 ea ff ff       	call   c0104f1c <page_ref>
c0106504:	83 f8 02             	cmp    $0x2,%eax
c0106507:	74 24                	je     c010652d <check_pgdir+0x449>
c0106509:	c7 44 24 0c 48 67 11 	movl   $0xc0116748,0xc(%esp)
c0106510:	c0 
c0106511:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106518:	c0 
c0106519:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0106520:	00 
c0106521:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106528:	e8 87 a9 ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p2) == 0);
c010652d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106530:	89 04 24             	mov    %eax,(%esp)
c0106533:	e8 e4 e9 ff ff       	call   c0104f1c <page_ref>
c0106538:	85 c0                	test   %eax,%eax
c010653a:	74 24                	je     c0106560 <check_pgdir+0x47c>
c010653c:	c7 44 24 0c 5a 67 11 	movl   $0xc011675a,0xc(%esp)
c0106543:	c0 
c0106544:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c010654b:	c0 
c010654c:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0106553:	00 
c0106554:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c010655b:	e8 54 a9 ff ff       	call   c0100eb4 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106560:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106565:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010656c:	00 
c010656d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106574:	00 
c0106575:	89 04 24             	mov    %eax,(%esp)
c0106578:	e8 0b f3 ff ff       	call   c0105888 <get_pte>
c010657d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106580:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106584:	75 24                	jne    c01065aa <check_pgdir+0x4c6>
c0106586:	c7 44 24 0c a8 66 11 	movl   $0xc01166a8,0xc(%esp)
c010658d:	c0 
c010658e:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106595:	c0 
c0106596:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c010659d:	00 
c010659e:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01065a5:	e8 0a a9 ff ff       	call   c0100eb4 <__panic>
    assert(pa2page(*ptep) == p1);
c01065aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065ad:	8b 00                	mov    (%eax),%eax
c01065af:	89 04 24             	mov    %eax,(%esp)
c01065b2:	e8 76 e8 ff ff       	call   c0104e2d <pa2page>
c01065b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01065ba:	74 24                	je     c01065e0 <check_pgdir+0x4fc>
c01065bc:	c7 44 24 0c 21 66 11 	movl   $0xc0116621,0xc(%esp)
c01065c3:	c0 
c01065c4:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01065cb:	c0 
c01065cc:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c01065d3:	00 
c01065d4:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01065db:	e8 d4 a8 ff ff       	call   c0100eb4 <__panic>
    assert((*ptep & PTE_U) == 0);
c01065e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065e3:	8b 00                	mov    (%eax),%eax
c01065e5:	83 e0 04             	and    $0x4,%eax
c01065e8:	85 c0                	test   %eax,%eax
c01065ea:	74 24                	je     c0106610 <check_pgdir+0x52c>
c01065ec:	c7 44 24 0c 6c 67 11 	movl   $0xc011676c,0xc(%esp)
c01065f3:	c0 
c01065f4:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01065fb:	c0 
c01065fc:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c0106603:	00 
c0106604:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c010660b:	e8 a4 a8 ff ff       	call   c0100eb4 <__panic>

    page_remove(boot_pgdir, 0x0);
c0106610:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106615:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010661c:	00 
c010661d:	89 04 24             	mov    %eax,(%esp)
c0106620:	e8 73 f8 ff ff       	call   c0105e98 <page_remove>
    assert(page_ref(p1) == 1);
c0106625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106628:	89 04 24             	mov    %eax,(%esp)
c010662b:	e8 ec e8 ff ff       	call   c0104f1c <page_ref>
c0106630:	83 f8 01             	cmp    $0x1,%eax
c0106633:	74 24                	je     c0106659 <check_pgdir+0x575>
c0106635:	c7 44 24 0c 36 66 11 	movl   $0xc0116636,0xc(%esp)
c010663c:	c0 
c010663d:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106644:	c0 
c0106645:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c010664c:	00 
c010664d:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106654:	e8 5b a8 ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p2) == 0);
c0106659:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010665c:	89 04 24             	mov    %eax,(%esp)
c010665f:	e8 b8 e8 ff ff       	call   c0104f1c <page_ref>
c0106664:	85 c0                	test   %eax,%eax
c0106666:	74 24                	je     c010668c <check_pgdir+0x5a8>
c0106668:	c7 44 24 0c 5a 67 11 	movl   $0xc011675a,0xc(%esp)
c010666f:	c0 
c0106670:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106677:	c0 
c0106678:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c010667f:	00 
c0106680:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106687:	e8 28 a8 ff ff       	call   c0100eb4 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010668c:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106691:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106698:	00 
c0106699:	89 04 24             	mov    %eax,(%esp)
c010669c:	e8 f7 f7 ff ff       	call   c0105e98 <page_remove>
    assert(page_ref(p1) == 0);
c01066a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066a4:	89 04 24             	mov    %eax,(%esp)
c01066a7:	e8 70 e8 ff ff       	call   c0104f1c <page_ref>
c01066ac:	85 c0                	test   %eax,%eax
c01066ae:	74 24                	je     c01066d4 <check_pgdir+0x5f0>
c01066b0:	c7 44 24 0c 81 67 11 	movl   $0xc0116781,0xc(%esp)
c01066b7:	c0 
c01066b8:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01066bf:	c0 
c01066c0:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
c01066c7:	00 
c01066c8:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01066cf:	e8 e0 a7 ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p2) == 0);
c01066d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066d7:	89 04 24             	mov    %eax,(%esp)
c01066da:	e8 3d e8 ff ff       	call   c0104f1c <page_ref>
c01066df:	85 c0                	test   %eax,%eax
c01066e1:	74 24                	je     c0106707 <check_pgdir+0x623>
c01066e3:	c7 44 24 0c 5a 67 11 	movl   $0xc011675a,0xc(%esp)
c01066ea:	c0 
c01066eb:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01066f2:	c0 
c01066f3:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c01066fa:	00 
c01066fb:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106702:	e8 ad a7 ff ff       	call   c0100eb4 <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c0106707:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010670c:	8b 00                	mov    (%eax),%eax
c010670e:	89 04 24             	mov    %eax,(%esp)
c0106711:	e8 17 e7 ff ff       	call   c0104e2d <pa2page>
c0106716:	89 04 24             	mov    %eax,(%esp)
c0106719:	e8 fe e7 ff ff       	call   c0104f1c <page_ref>
c010671e:	83 f8 01             	cmp    $0x1,%eax
c0106721:	74 24                	je     c0106747 <check_pgdir+0x663>
c0106723:	c7 44 24 0c 94 67 11 	movl   $0xc0116794,0xc(%esp)
c010672a:	c0 
c010672b:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106732:	c0 
c0106733:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
c010673a:	00 
c010673b:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106742:	e8 6d a7 ff ff       	call   c0100eb4 <__panic>
    free_page(pa2page(boot_pgdir[0]));
c0106747:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010674c:	8b 00                	mov    (%eax),%eax
c010674e:	89 04 24             	mov    %eax,(%esp)
c0106751:	e8 d7 e6 ff ff       	call   c0104e2d <pa2page>
c0106756:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010675d:	00 
c010675e:	89 04 24             	mov    %eax,(%esp)
c0106761:	e8 26 ea ff ff       	call   c010518c <free_pages>
    boot_pgdir[0] = 0;
c0106766:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010676b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106771:	c7 04 24 ba 67 11 c0 	movl   $0xc01167ba,(%esp)
c0106778:	e8 e8 9b ff ff       	call   c0100365 <cprintf>
}
c010677d:	c9                   	leave  
c010677e:	c3                   	ret    

c010677f <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010677f:	55                   	push   %ebp
c0106780:	89 e5                	mov    %esp,%ebp
c0106782:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106785:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010678c:	e9 ca 00 00 00       	jmp    c010685b <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106791:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106794:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106797:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010679a:	c1 e8 0c             	shr    $0xc,%eax
c010679d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01067a0:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01067a5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01067a8:	72 23                	jb     c01067cd <check_boot_pgdir+0x4e>
c01067aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067ad:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01067b1:	c7 44 24 08 8c 63 11 	movl   $0xc011638c,0x8(%esp)
c01067b8:	c0 
c01067b9:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c01067c0:	00 
c01067c1:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01067c8:	e8 e7 a6 ff ff       	call   c0100eb4 <__panic>
c01067cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067d0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01067d5:	89 c2                	mov    %eax,%edx
c01067d7:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01067dc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01067e3:	00 
c01067e4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01067e8:	89 04 24             	mov    %eax,(%esp)
c01067eb:	e8 98 f0 ff ff       	call   c0105888 <get_pte>
c01067f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01067f3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01067f7:	75 24                	jne    c010681d <check_boot_pgdir+0x9e>
c01067f9:	c7 44 24 0c d4 67 11 	movl   $0xc01167d4,0xc(%esp)
c0106800:	c0 
c0106801:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106808:	c0 
c0106809:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106810:	00 
c0106811:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106818:	e8 97 a6 ff ff       	call   c0100eb4 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010681d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106820:	8b 00                	mov    (%eax),%eax
c0106822:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106827:	89 c2                	mov    %eax,%edx
c0106829:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010682c:	39 c2                	cmp    %eax,%edx
c010682e:	74 24                	je     c0106854 <check_boot_pgdir+0xd5>
c0106830:	c7 44 24 0c 11 68 11 	movl   $0xc0116811,0xc(%esp)
c0106837:	c0 
c0106838:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c010683f:	c0 
c0106840:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
c0106847:	00 
c0106848:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c010684f:	e8 60 a6 ff ff       	call   c0100eb4 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106854:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010685b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010685e:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106863:	39 c2                	cmp    %eax,%edx
c0106865:	0f 82 26 ff ff ff    	jb     c0106791 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010686b:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106870:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106875:	8b 00                	mov    (%eax),%eax
c0106877:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010687c:	89 c2                	mov    %eax,%edx
c010687e:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106883:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106886:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c010688d:	77 23                	ja     c01068b2 <check_boot_pgdir+0x133>
c010688f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106892:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106896:	c7 44 24 08 30 64 11 	movl   $0xc0116430,0x8(%esp)
c010689d:	c0 
c010689e:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
c01068a5:	00 
c01068a6:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01068ad:	e8 02 a6 ff ff       	call   c0100eb4 <__panic>
c01068b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068b5:	05 00 00 00 40       	add    $0x40000000,%eax
c01068ba:	39 c2                	cmp    %eax,%edx
c01068bc:	74 24                	je     c01068e2 <check_boot_pgdir+0x163>
c01068be:	c7 44 24 0c 28 68 11 	movl   $0xc0116828,0xc(%esp)
c01068c5:	c0 
c01068c6:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01068cd:	c0 
c01068ce:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
c01068d5:	00 
c01068d6:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01068dd:	e8 d2 a5 ff ff       	call   c0100eb4 <__panic>

    assert(boot_pgdir[0] == 0);
c01068e2:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01068e7:	8b 00                	mov    (%eax),%eax
c01068e9:	85 c0                	test   %eax,%eax
c01068eb:	74 24                	je     c0106911 <check_boot_pgdir+0x192>
c01068ed:	c7 44 24 0c 5c 68 11 	movl   $0xc011685c,0xc(%esp)
c01068f4:	c0 
c01068f5:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01068fc:	c0 
c01068fd:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c0106904:	00 
c0106905:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c010690c:	e8 a3 a5 ff ff       	call   c0100eb4 <__panic>

    struct Page *p;
    p = alloc_page();
c0106911:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106918:	e8 04 e8 ff ff       	call   c0105121 <alloc_pages>
c010691d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106920:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106925:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010692c:	00 
c010692d:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106934:	00 
c0106935:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106938:	89 54 24 04          	mov    %edx,0x4(%esp)
c010693c:	89 04 24             	mov    %eax,(%esp)
c010693f:	e8 98 f5 ff ff       	call   c0105edc <page_insert>
c0106944:	85 c0                	test   %eax,%eax
c0106946:	74 24                	je     c010696c <check_boot_pgdir+0x1ed>
c0106948:	c7 44 24 0c 70 68 11 	movl   $0xc0116870,0xc(%esp)
c010694f:	c0 
c0106950:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106957:	c0 
c0106958:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
c010695f:	00 
c0106960:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106967:	e8 48 a5 ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p) == 1);
c010696c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010696f:	89 04 24             	mov    %eax,(%esp)
c0106972:	e8 a5 e5 ff ff       	call   c0104f1c <page_ref>
c0106977:	83 f8 01             	cmp    $0x1,%eax
c010697a:	74 24                	je     c01069a0 <check_boot_pgdir+0x221>
c010697c:	c7 44 24 0c 9e 68 11 	movl   $0xc011689e,0xc(%esp)
c0106983:	c0 
c0106984:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c010698b:	c0 
c010698c:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
c0106993:	00 
c0106994:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c010699b:	e8 14 a5 ff ff       	call   c0100eb4 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01069a0:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01069a5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01069ac:	00 
c01069ad:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c01069b4:	00 
c01069b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01069b8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069bc:	89 04 24             	mov    %eax,(%esp)
c01069bf:	e8 18 f5 ff ff       	call   c0105edc <page_insert>
c01069c4:	85 c0                	test   %eax,%eax
c01069c6:	74 24                	je     c01069ec <check_boot_pgdir+0x26d>
c01069c8:	c7 44 24 0c b0 68 11 	movl   $0xc01168b0,0xc(%esp)
c01069cf:	c0 
c01069d0:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c01069d7:	c0 
c01069d8:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c01069df:	00 
c01069e0:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01069e7:	e8 c8 a4 ff ff       	call   c0100eb4 <__panic>
    assert(page_ref(p) == 2);
c01069ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069ef:	89 04 24             	mov    %eax,(%esp)
c01069f2:	e8 25 e5 ff ff       	call   c0104f1c <page_ref>
c01069f7:	83 f8 02             	cmp    $0x2,%eax
c01069fa:	74 24                	je     c0106a20 <check_boot_pgdir+0x2a1>
c01069fc:	c7 44 24 0c e7 68 11 	movl   $0xc01168e7,0xc(%esp)
c0106a03:	c0 
c0106a04:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106a0b:	c0 
c0106a0c:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0106a13:	00 
c0106a14:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106a1b:	e8 94 a4 ff ff       	call   c0100eb4 <__panic>

    const char *str = "ucore: Hello world!!";
c0106a20:	c7 45 dc f8 68 11 c0 	movl   $0xc01168f8,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106a27:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a2e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a35:	e8 e7 e6 00 00       	call   c0115121 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106a3a:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106a41:	00 
c0106a42:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a49:	e8 4c e7 00 00       	call   c011519a <strcmp>
c0106a4e:	85 c0                	test   %eax,%eax
c0106a50:	74 24                	je     c0106a76 <check_boot_pgdir+0x2f7>
c0106a52:	c7 44 24 0c 10 69 11 	movl   $0xc0116910,0xc(%esp)
c0106a59:	c0 
c0106a5a:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106a61:	c0 
c0106a62:	c7 44 24 04 cc 02 00 	movl   $0x2cc,0x4(%esp)
c0106a69:	00 
c0106a6a:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106a71:	e8 3e a4 ff ff       	call   c0100eb4 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106a76:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a79:	89 04 24             	mov    %eax,(%esp)
c0106a7c:	e8 f1 e3 ff ff       	call   c0104e72 <page2kva>
c0106a81:	05 00 01 00 00       	add    $0x100,%eax
c0106a86:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106a89:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a90:	e8 0d e6 00 00       	call   c01150a2 <strlen>
c0106a95:	85 c0                	test   %eax,%eax
c0106a97:	74 24                	je     c0106abd <check_boot_pgdir+0x33e>
c0106a99:	c7 44 24 0c 48 69 11 	movl   $0xc0116948,0xc(%esp)
c0106aa0:	c0 
c0106aa1:	c7 44 24 08 79 64 11 	movl   $0xc0116479,0x8(%esp)
c0106aa8:	c0 
c0106aa9:	c7 44 24 04 cf 02 00 	movl   $0x2cf,0x4(%esp)
c0106ab0:	00 
c0106ab1:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c0106ab8:	e8 f7 a3 ff ff       	call   c0100eb4 <__panic>

    free_page(p);
c0106abd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106ac4:	00 
c0106ac5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106ac8:	89 04 24             	mov    %eax,(%esp)
c0106acb:	e8 bc e6 ff ff       	call   c010518c <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0106ad0:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106ad5:	8b 00                	mov    (%eax),%eax
c0106ad7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106adc:	89 04 24             	mov    %eax,(%esp)
c0106adf:	e8 49 e3 ff ff       	call   c0104e2d <pa2page>
c0106ae4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106aeb:	00 
c0106aec:	89 04 24             	mov    %eax,(%esp)
c0106aef:	e8 98 e6 ff ff       	call   c010518c <free_pages>
    boot_pgdir[0] = 0;
c0106af4:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106af9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106aff:	c7 04 24 6c 69 11 c0 	movl   $0xc011696c,(%esp)
c0106b06:	e8 5a 98 ff ff       	call   c0100365 <cprintf>
}
c0106b0b:	c9                   	leave  
c0106b0c:	c3                   	ret    

c0106b0d <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106b0d:	55                   	push   %ebp
c0106b0e:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106b10:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b13:	83 e0 04             	and    $0x4,%eax
c0106b16:	85 c0                	test   %eax,%eax
c0106b18:	74 07                	je     c0106b21 <perm2str+0x14>
c0106b1a:	b8 75 00 00 00       	mov    $0x75,%eax
c0106b1f:	eb 05                	jmp    c0106b26 <perm2str+0x19>
c0106b21:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b26:	a2 08 ff 14 c0       	mov    %al,0xc014ff08
    str[1] = 'r';
c0106b2b:	c6 05 09 ff 14 c0 72 	movb   $0x72,0xc014ff09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b32:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b35:	83 e0 02             	and    $0x2,%eax
c0106b38:	85 c0                	test   %eax,%eax
c0106b3a:	74 07                	je     c0106b43 <perm2str+0x36>
c0106b3c:	b8 77 00 00 00       	mov    $0x77,%eax
c0106b41:	eb 05                	jmp    c0106b48 <perm2str+0x3b>
c0106b43:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b48:	a2 0a ff 14 c0       	mov    %al,0xc014ff0a
    str[3] = '\0';
c0106b4d:	c6 05 0b ff 14 c0 00 	movb   $0x0,0xc014ff0b
    return str;
c0106b54:	b8 08 ff 14 c0       	mov    $0xc014ff08,%eax
}
c0106b59:	5d                   	pop    %ebp
c0106b5a:	c3                   	ret    

c0106b5b <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106b5b:	55                   	push   %ebp
c0106b5c:	89 e5                	mov    %esp,%ebp
c0106b5e:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106b61:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b64:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b67:	72 0a                	jb     c0106b73 <get_pgtable_items+0x18>
        return 0;
c0106b69:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b6e:	e9 9c 00 00 00       	jmp    c0106c0f <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b73:	eb 04                	jmp    c0106b79 <get_pgtable_items+0x1e>
        start ++;
c0106b75:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b79:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b7c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b7f:	73 18                	jae    c0106b99 <get_pgtable_items+0x3e>
c0106b81:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b8b:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b8e:	01 d0                	add    %edx,%eax
c0106b90:	8b 00                	mov    (%eax),%eax
c0106b92:	83 e0 01             	and    $0x1,%eax
c0106b95:	85 c0                	test   %eax,%eax
c0106b97:	74 dc                	je     c0106b75 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106b99:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b9c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b9f:	73 69                	jae    c0106c0a <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106ba1:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106ba5:	74 08                	je     c0106baf <get_pgtable_items+0x54>
            *left_store = start;
c0106ba7:	8b 45 18             	mov    0x18(%ebp),%eax
c0106baa:	8b 55 10             	mov    0x10(%ebp),%edx
c0106bad:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106baf:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bb2:	8d 50 01             	lea    0x1(%eax),%edx
c0106bb5:	89 55 10             	mov    %edx,0x10(%ebp)
c0106bb8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106bbf:	8b 45 14             	mov    0x14(%ebp),%eax
c0106bc2:	01 d0                	add    %edx,%eax
c0106bc4:	8b 00                	mov    (%eax),%eax
c0106bc6:	83 e0 07             	and    $0x7,%eax
c0106bc9:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106bcc:	eb 04                	jmp    c0106bd2 <get_pgtable_items+0x77>
            start ++;
c0106bce:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106bd2:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bd5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bd8:	73 1d                	jae    c0106bf7 <get_pgtable_items+0x9c>
c0106bda:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bdd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106be4:	8b 45 14             	mov    0x14(%ebp),%eax
c0106be7:	01 d0                	add    %edx,%eax
c0106be9:	8b 00                	mov    (%eax),%eax
c0106beb:	83 e0 07             	and    $0x7,%eax
c0106bee:	89 c2                	mov    %eax,%edx
c0106bf0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bf3:	39 c2                	cmp    %eax,%edx
c0106bf5:	74 d7                	je     c0106bce <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106bf7:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106bfb:	74 08                	je     c0106c05 <get_pgtable_items+0xaa>
            *right_store = start;
c0106bfd:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106c00:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c03:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106c05:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c08:	eb 05                	jmp    c0106c0f <get_pgtable_items+0xb4>
    }
    return 0;
c0106c0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106c0f:	c9                   	leave  
c0106c10:	c3                   	ret    

c0106c11 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106c11:	55                   	push   %ebp
c0106c12:	89 e5                	mov    %esp,%ebp
c0106c14:	57                   	push   %edi
c0106c15:	56                   	push   %esi
c0106c16:	53                   	push   %ebx
c0106c17:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106c1a:	c7 04 24 8c 69 11 c0 	movl   $0xc011698c,(%esp)
c0106c21:	e8 3f 97 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
c0106c26:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c2d:	e9 fa 00 00 00       	jmp    c0106d2c <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c35:	89 04 24             	mov    %eax,(%esp)
c0106c38:	e8 d0 fe ff ff       	call   c0106b0d <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106c3d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c40:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c43:	29 d1                	sub    %edx,%ecx
c0106c45:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c47:	89 d6                	mov    %edx,%esi
c0106c49:	c1 e6 16             	shl    $0x16,%esi
c0106c4c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106c4f:	89 d3                	mov    %edx,%ebx
c0106c51:	c1 e3 16             	shl    $0x16,%ebx
c0106c54:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c57:	89 d1                	mov    %edx,%ecx
c0106c59:	c1 e1 16             	shl    $0x16,%ecx
c0106c5c:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106c5f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c62:	29 d7                	sub    %edx,%edi
c0106c64:	89 fa                	mov    %edi,%edx
c0106c66:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c6a:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c6e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c72:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c76:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c7a:	c7 04 24 bd 69 11 c0 	movl   $0xc01169bd,(%esp)
c0106c81:	e8 df 96 ff ff       	call   c0100365 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106c86:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c89:	c1 e0 0a             	shl    $0xa,%eax
c0106c8c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106c8f:	eb 54                	jmp    c0106ce5 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106c91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c94:	89 04 24             	mov    %eax,(%esp)
c0106c97:	e8 71 fe ff ff       	call   c0106b0d <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106c9c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106c9f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106ca2:	29 d1                	sub    %edx,%ecx
c0106ca4:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106ca6:	89 d6                	mov    %edx,%esi
c0106ca8:	c1 e6 0c             	shl    $0xc,%esi
c0106cab:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106cae:	89 d3                	mov    %edx,%ebx
c0106cb0:	c1 e3 0c             	shl    $0xc,%ebx
c0106cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cb6:	c1 e2 0c             	shl    $0xc,%edx
c0106cb9:	89 d1                	mov    %edx,%ecx
c0106cbb:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106cbe:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cc1:	29 d7                	sub    %edx,%edi
c0106cc3:	89 fa                	mov    %edi,%edx
c0106cc5:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106cc9:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106ccd:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106cd1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106cd5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106cd9:	c7 04 24 dc 69 11 c0 	movl   $0xc01169dc,(%esp)
c0106ce0:	e8 80 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106ce5:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106cea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106ced:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106cf0:	89 ce                	mov    %ecx,%esi
c0106cf2:	c1 e6 0a             	shl    $0xa,%esi
c0106cf5:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106cf8:	89 cb                	mov    %ecx,%ebx
c0106cfa:	c1 e3 0a             	shl    $0xa,%ebx
c0106cfd:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106d00:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d04:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106d07:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d0b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d0f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d13:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106d17:	89 1c 24             	mov    %ebx,(%esp)
c0106d1a:	e8 3c fe ff ff       	call   c0106b5b <get_pgtable_items>
c0106d1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d22:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d26:	0f 85 65 ff ff ff    	jne    c0106c91 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d2c:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106d31:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d34:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106d37:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d3b:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106d3e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d42:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d46:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d4a:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106d51:	00 
c0106d52:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106d59:	e8 fd fd ff ff       	call   c0106b5b <get_pgtable_items>
c0106d5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d61:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d65:	0f 85 c7 fe ff ff    	jne    c0106c32 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106d6b:	c7 04 24 00 6a 11 c0 	movl   $0xc0116a00,(%esp)
c0106d72:	e8 ee 95 ff ff       	call   c0100365 <cprintf>
}
c0106d77:	83 c4 4c             	add    $0x4c,%esp
c0106d7a:	5b                   	pop    %ebx
c0106d7b:	5e                   	pop    %esi
c0106d7c:	5f                   	pop    %edi
c0106d7d:	5d                   	pop    %ebp
c0106d7e:	c3                   	ret    

c0106d7f <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106d7f:	55                   	push   %ebp
c0106d80:	89 e5                	mov    %esp,%ebp
c0106d82:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106d85:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d88:	c1 e8 0c             	shr    $0xc,%eax
c0106d8b:	89 c2                	mov    %eax,%edx
c0106d8d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106d92:	39 c2                	cmp    %eax,%edx
c0106d94:	72 1c                	jb     c0106db2 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106d96:	c7 44 24 08 34 6a 11 	movl   $0xc0116a34,0x8(%esp)
c0106d9d:	c0 
c0106d9e:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106da5:	00 
c0106da6:	c7 04 24 53 6a 11 c0 	movl   $0xc0116a53,(%esp)
c0106dad:	e8 02 a1 ff ff       	call   c0100eb4 <__panic>
    }
    return &pages[PPN(pa)];
c0106db2:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0106db7:	8b 55 08             	mov    0x8(%ebp),%edx
c0106dba:	c1 ea 0c             	shr    $0xc,%edx
c0106dbd:	c1 e2 05             	shl    $0x5,%edx
c0106dc0:	01 d0                	add    %edx,%eax
}
c0106dc2:	c9                   	leave  
c0106dc3:	c3                   	ret    

c0106dc4 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106dc4:	55                   	push   %ebp
c0106dc5:	89 e5                	mov    %esp,%ebp
c0106dc7:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106dca:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dcd:	83 e0 01             	and    $0x1,%eax
c0106dd0:	85 c0                	test   %eax,%eax
c0106dd2:	75 1c                	jne    c0106df0 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106dd4:	c7 44 24 08 64 6a 11 	movl   $0xc0116a64,0x8(%esp)
c0106ddb:	c0 
c0106ddc:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106de3:	00 
c0106de4:	c7 04 24 53 6a 11 c0 	movl   $0xc0116a53,(%esp)
c0106deb:	e8 c4 a0 ff ff       	call   c0100eb4 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106df0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106df3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106df8:	89 04 24             	mov    %eax,(%esp)
c0106dfb:	e8 7f ff ff ff       	call   c0106d7f <pa2page>
}
c0106e00:	c9                   	leave  
c0106e01:	c3                   	ret    

c0106e02 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106e02:	55                   	push   %ebp
c0106e03:	89 e5                	mov    %esp,%ebp
c0106e05:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106e08:	e8 6e 7f 00 00       	call   c010ed7b <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106e0d:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e12:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106e17:	76 0c                	jbe    c0106e25 <swap_init+0x23>
c0106e19:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e1e:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106e23:	76 25                	jbe    c0106e4a <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106e25:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e2a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106e2e:	c7 44 24 08 85 6a 11 	movl   $0xc0116a85,0x8(%esp)
c0106e35:	c0 
c0106e36:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106e3d:	00 
c0106e3e:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0106e45:	e8 6a a0 ff ff       	call   c0100eb4 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106e4a:	c7 05 14 ff 14 c0 60 	movl   $0xc014ea60,0xc014ff14
c0106e51:	ea 14 c0 
     int r = sm->init();
c0106e54:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e59:	8b 40 04             	mov    0x4(%eax),%eax
c0106e5c:	ff d0                	call   *%eax
c0106e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106e61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e65:	75 26                	jne    c0106e8d <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106e67:	c7 05 0c ff 14 c0 01 	movl   $0x1,0xc014ff0c
c0106e6e:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106e71:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e76:	8b 00                	mov    (%eax),%eax
c0106e78:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e7c:	c7 04 24 af 6a 11 c0 	movl   $0xc0116aaf,(%esp)
c0106e83:	e8 dd 94 ff ff       	call   c0100365 <cprintf>
          check_swap();
c0106e88:	e8 a4 04 00 00       	call   c0107331 <check_swap>
     }

     return r;
c0106e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106e90:	c9                   	leave  
c0106e91:	c3                   	ret    

c0106e92 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106e92:	55                   	push   %ebp
c0106e93:	89 e5                	mov    %esp,%ebp
c0106e95:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106e98:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e9d:	8b 40 08             	mov    0x8(%eax),%eax
c0106ea0:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ea3:	89 14 24             	mov    %edx,(%esp)
c0106ea6:	ff d0                	call   *%eax
}
c0106ea8:	c9                   	leave  
c0106ea9:	c3                   	ret    

c0106eaa <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106eaa:	55                   	push   %ebp
c0106eab:	89 e5                	mov    %esp,%ebp
c0106ead:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106eb0:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106eb5:	8b 40 0c             	mov    0xc(%eax),%eax
c0106eb8:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ebb:	89 14 24             	mov    %edx,(%esp)
c0106ebe:	ff d0                	call   *%eax
}
c0106ec0:	c9                   	leave  
c0106ec1:	c3                   	ret    

c0106ec2 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106ec2:	55                   	push   %ebp
c0106ec3:	89 e5                	mov    %esp,%ebp
c0106ec5:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106ec8:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106ecd:	8b 40 10             	mov    0x10(%eax),%eax
c0106ed0:	8b 55 14             	mov    0x14(%ebp),%edx
c0106ed3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ed7:	8b 55 10             	mov    0x10(%ebp),%edx
c0106eda:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106ede:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106ee1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ee5:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ee8:	89 14 24             	mov    %edx,(%esp)
c0106eeb:	ff d0                	call   *%eax
}
c0106eed:	c9                   	leave  
c0106eee:	c3                   	ret    

c0106eef <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106eef:	55                   	push   %ebp
c0106ef0:	89 e5                	mov    %esp,%ebp
c0106ef2:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106ef5:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106efa:	8b 40 14             	mov    0x14(%eax),%eax
c0106efd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f00:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f04:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f07:	89 14 24             	mov    %edx,(%esp)
c0106f0a:	ff d0                	call   *%eax
}
c0106f0c:	c9                   	leave  
c0106f0d:	c3                   	ret    

c0106f0e <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106f0e:	55                   	push   %ebp
c0106f0f:	89 e5                	mov    %esp,%ebp
c0106f11:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106f14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f1b:	e9 5a 01 00 00       	jmp    c010707a <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106f20:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106f25:	8b 40 18             	mov    0x18(%eax),%eax
c0106f28:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f2b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f2f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106f32:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f36:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f39:	89 14 24             	mov    %edx,(%esp)
c0106f3c:	ff d0                	call   *%eax
c0106f3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106f41:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f45:	74 18                	je     c0106f5f <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f4e:	c7 04 24 c4 6a 11 c0 	movl   $0xc0116ac4,(%esp)
c0106f55:	e8 0b 94 ff ff       	call   c0100365 <cprintf>
c0106f5a:	e9 27 01 00 00       	jmp    c0107086 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106f5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f62:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f65:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106f68:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f6b:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f6e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106f75:	00 
c0106f76:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106f79:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f7d:	89 04 24             	mov    %eax,(%esp)
c0106f80:	e8 03 e9 ff ff       	call   c0105888 <get_pte>
c0106f85:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106f88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106f8b:	8b 00                	mov    (%eax),%eax
c0106f8d:	83 e0 01             	and    $0x1,%eax
c0106f90:	85 c0                	test   %eax,%eax
c0106f92:	75 24                	jne    c0106fb8 <swap_out+0xaa>
c0106f94:	c7 44 24 0c f1 6a 11 	movl   $0xc0116af1,0xc(%esp)
c0106f9b:	c0 
c0106f9c:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0106fa3:	c0 
c0106fa4:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106fab:	00 
c0106fac:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0106fb3:	e8 fc 9e ff ff       	call   c0100eb4 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106fb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fbb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106fbe:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106fc1:	c1 ea 0c             	shr    $0xc,%edx
c0106fc4:	83 c2 01             	add    $0x1,%edx
c0106fc7:	c1 e2 08             	shl    $0x8,%edx
c0106fca:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fce:	89 14 24             	mov    %edx,(%esp)
c0106fd1:	e8 5f 7e 00 00       	call   c010ee35 <swapfs_write>
c0106fd6:	85 c0                	test   %eax,%eax
c0106fd8:	74 34                	je     c010700e <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106fda:	c7 04 24 1b 6b 11 c0 	movl   $0xc0116b1b,(%esp)
c0106fe1:	e8 7f 93 ff ff       	call   c0100365 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106fe6:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106feb:	8b 40 10             	mov    0x10(%eax),%eax
c0106fee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ff1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106ff8:	00 
c0106ff9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106ffd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107000:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107004:	8b 55 08             	mov    0x8(%ebp),%edx
c0107007:	89 14 24             	mov    %edx,(%esp)
c010700a:	ff d0                	call   *%eax
c010700c:	eb 68                	jmp    c0107076 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010700e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107011:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107014:	c1 e8 0c             	shr    $0xc,%eax
c0107017:	83 c0 01             	add    $0x1,%eax
c010701a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010701e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107021:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107025:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107028:	89 44 24 04          	mov    %eax,0x4(%esp)
c010702c:	c7 04 24 34 6b 11 c0 	movl   $0xc0116b34,(%esp)
c0107033:	e8 2d 93 ff ff       	call   c0100365 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0107038:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010703b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010703e:	c1 e8 0c             	shr    $0xc,%eax
c0107041:	83 c0 01             	add    $0x1,%eax
c0107044:	c1 e0 08             	shl    $0x8,%eax
c0107047:	89 c2                	mov    %eax,%edx
c0107049:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010704c:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010704e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107051:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107058:	00 
c0107059:	89 04 24             	mov    %eax,(%esp)
c010705c:	e8 2b e1 ff ff       	call   c010518c <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107061:	8b 45 08             	mov    0x8(%ebp),%eax
c0107064:	8b 40 0c             	mov    0xc(%eax),%eax
c0107067:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010706a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010706e:	89 04 24             	mov    %eax,(%esp)
c0107071:	e8 1f ef ff ff       	call   c0105f95 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0107076:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010707a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010707d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107080:	0f 85 9a fe ff ff    	jne    c0106f20 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0107086:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107089:	c9                   	leave  
c010708a:	c3                   	ret    

c010708b <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c010708b:	55                   	push   %ebp
c010708c:	89 e5                	mov    %esp,%ebp
c010708e:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0107091:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107098:	e8 84 e0 ff ff       	call   c0105121 <alloc_pages>
c010709d:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01070a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070a4:	75 24                	jne    c01070ca <swap_in+0x3f>
c01070a6:	c7 44 24 0c 74 6b 11 	movl   $0xc0116b74,0xc(%esp)
c01070ad:	c0 
c01070ae:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01070b5:	c0 
c01070b6:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01070bd:	00 
c01070be:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01070c5:	e8 ea 9d ff ff       	call   c0100eb4 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01070ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01070cd:	8b 40 0c             	mov    0xc(%eax),%eax
c01070d0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01070d7:	00 
c01070d8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01070db:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070df:	89 04 24             	mov    %eax,(%esp)
c01070e2:	e8 a1 e7 ff ff       	call   c0105888 <get_pte>
c01070e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01070ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070ed:	8b 00                	mov    (%eax),%eax
c01070ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01070f2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070f6:	89 04 24             	mov    %eax,(%esp)
c01070f9:	e8 c5 7c 00 00       	call   c010edc3 <swapfs_read>
c01070fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107101:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107105:	74 2a                	je     c0107131 <swap_in+0xa6>
     {
        assert(r!=0);
c0107107:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010710b:	75 24                	jne    c0107131 <swap_in+0xa6>
c010710d:	c7 44 24 0c 81 6b 11 	movl   $0xc0116b81,0xc(%esp)
c0107114:	c0 
c0107115:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c010711c:	c0 
c010711d:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107124:	00 
c0107125:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c010712c:	e8 83 9d ff ff       	call   c0100eb4 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107131:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107134:	8b 00                	mov    (%eax),%eax
c0107136:	c1 e8 08             	shr    $0x8,%eax
c0107139:	89 c2                	mov    %eax,%edx
c010713b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010713e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107142:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107146:	c7 04 24 88 6b 11 c0 	movl   $0xc0116b88,(%esp)
c010714d:	e8 13 92 ff ff       	call   c0100365 <cprintf>
     *ptr_result=result;
c0107152:	8b 45 10             	mov    0x10(%ebp),%eax
c0107155:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107158:	89 10                	mov    %edx,(%eax)
     return 0;
c010715a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010715f:	c9                   	leave  
c0107160:	c3                   	ret    

c0107161 <check_content_set>:



static inline void
check_content_set(void)
{
c0107161:	55                   	push   %ebp
c0107162:	89 e5                	mov    %esp,%ebp
c0107164:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0107167:	b8 00 10 00 00       	mov    $0x1000,%eax
c010716c:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010716f:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107174:	83 f8 01             	cmp    $0x1,%eax
c0107177:	74 24                	je     c010719d <check_content_set+0x3c>
c0107179:	c7 44 24 0c c6 6b 11 	movl   $0xc0116bc6,0xc(%esp)
c0107180:	c0 
c0107181:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107188:	c0 
c0107189:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0107190:	00 
c0107191:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107198:	e8 17 9d ff ff       	call   c0100eb4 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c010719d:	b8 10 10 00 00       	mov    $0x1010,%eax
c01071a2:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071a5:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01071aa:	83 f8 01             	cmp    $0x1,%eax
c01071ad:	74 24                	je     c01071d3 <check_content_set+0x72>
c01071af:	c7 44 24 0c c6 6b 11 	movl   $0xc0116bc6,0xc(%esp)
c01071b6:	c0 
c01071b7:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01071be:	c0 
c01071bf:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01071c6:	00 
c01071c7:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01071ce:	e8 e1 9c ff ff       	call   c0100eb4 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01071d3:	b8 00 20 00 00       	mov    $0x2000,%eax
c01071d8:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01071db:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01071e0:	83 f8 02             	cmp    $0x2,%eax
c01071e3:	74 24                	je     c0107209 <check_content_set+0xa8>
c01071e5:	c7 44 24 0c d5 6b 11 	movl   $0xc0116bd5,0xc(%esp)
c01071ec:	c0 
c01071ed:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01071f4:	c0 
c01071f5:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01071fc:	00 
c01071fd:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107204:	e8 ab 9c ff ff       	call   c0100eb4 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0107209:	b8 10 20 00 00       	mov    $0x2010,%eax
c010720e:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107211:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107216:	83 f8 02             	cmp    $0x2,%eax
c0107219:	74 24                	je     c010723f <check_content_set+0xde>
c010721b:	c7 44 24 0c d5 6b 11 	movl   $0xc0116bd5,0xc(%esp)
c0107222:	c0 
c0107223:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c010722a:	c0 
c010722b:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107232:	00 
c0107233:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c010723a:	e8 75 9c ff ff       	call   c0100eb4 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c010723f:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107244:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107247:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c010724c:	83 f8 03             	cmp    $0x3,%eax
c010724f:	74 24                	je     c0107275 <check_content_set+0x114>
c0107251:	c7 44 24 0c e4 6b 11 	movl   $0xc0116be4,0xc(%esp)
c0107258:	c0 
c0107259:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107260:	c0 
c0107261:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0107268:	00 
c0107269:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107270:	e8 3f 9c ff ff       	call   c0100eb4 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107275:	b8 10 30 00 00       	mov    $0x3010,%eax
c010727a:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010727d:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107282:	83 f8 03             	cmp    $0x3,%eax
c0107285:	74 24                	je     c01072ab <check_content_set+0x14a>
c0107287:	c7 44 24 0c e4 6b 11 	movl   $0xc0116be4,0xc(%esp)
c010728e:	c0 
c010728f:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107296:	c0 
c0107297:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010729e:	00 
c010729f:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01072a6:	e8 09 9c ff ff       	call   c0100eb4 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01072ab:	b8 00 40 00 00       	mov    $0x4000,%eax
c01072b0:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072b3:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01072b8:	83 f8 04             	cmp    $0x4,%eax
c01072bb:	74 24                	je     c01072e1 <check_content_set+0x180>
c01072bd:	c7 44 24 0c f3 6b 11 	movl   $0xc0116bf3,0xc(%esp)
c01072c4:	c0 
c01072c5:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01072cc:	c0 
c01072cd:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01072d4:	00 
c01072d5:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01072dc:	e8 d3 9b ff ff       	call   c0100eb4 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01072e1:	b8 10 40 00 00       	mov    $0x4010,%eax
c01072e6:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072e9:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01072ee:	83 f8 04             	cmp    $0x4,%eax
c01072f1:	74 24                	je     c0107317 <check_content_set+0x1b6>
c01072f3:	c7 44 24 0c f3 6b 11 	movl   $0xc0116bf3,0xc(%esp)
c01072fa:	c0 
c01072fb:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107302:	c0 
c0107303:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010730a:	00 
c010730b:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107312:	e8 9d 9b ff ff       	call   c0100eb4 <__panic>
}
c0107317:	c9                   	leave  
c0107318:	c3                   	ret    

c0107319 <check_content_access>:

static inline int
check_content_access(void)
{
c0107319:	55                   	push   %ebp
c010731a:	89 e5                	mov    %esp,%ebp
c010731c:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010731f:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0107324:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107327:	ff d0                	call   *%eax
c0107329:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010732c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010732f:	c9                   	leave  
c0107330:	c3                   	ret    

c0107331 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107331:	55                   	push   %ebp
c0107332:	89 e5                	mov    %esp,%ebp
c0107334:	53                   	push   %ebx
c0107335:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107338:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010733f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107346:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010734d:	eb 6b                	jmp    c01073ba <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010734f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107352:	83 e8 0c             	sub    $0xc,%eax
c0107355:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0107358:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010735b:	83 c0 04             	add    $0x4,%eax
c010735e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107365:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107368:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010736b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010736e:	0f a3 10             	bt     %edx,(%eax)
c0107371:	19 c0                	sbb    %eax,%eax
c0107373:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107376:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010737a:	0f 95 c0             	setne  %al
c010737d:	0f b6 c0             	movzbl %al,%eax
c0107380:	85 c0                	test   %eax,%eax
c0107382:	75 24                	jne    c01073a8 <check_swap+0x77>
c0107384:	c7 44 24 0c 02 6c 11 	movl   $0xc0116c02,0xc(%esp)
c010738b:	c0 
c010738c:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107393:	c0 
c0107394:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c010739b:	00 
c010739c:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01073a3:	e8 0c 9b ff ff       	call   c0100eb4 <__panic>
        count ++, total += p->property;
c01073a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01073ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01073af:	8b 50 08             	mov    0x8(%eax),%edx
c01073b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073b5:	01 d0                	add    %edx,%eax
c01073b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01073ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01073c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01073c3:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01073c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01073c9:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c01073d0:	0f 85 79 ff ff ff    	jne    c010734f <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01073d6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01073d9:	e8 e0 dd ff ff       	call   c01051be <nr_free_pages>
c01073de:	39 c3                	cmp    %eax,%ebx
c01073e0:	74 24                	je     c0107406 <check_swap+0xd5>
c01073e2:	c7 44 24 0c 12 6c 11 	movl   $0xc0116c12,0xc(%esp)
c01073e9:	c0 
c01073ea:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01073f1:	c0 
c01073f2:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01073f9:	00 
c01073fa:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107401:	e8 ae 9a ff ff       	call   c0100eb4 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107406:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107409:	89 44 24 08          	mov    %eax,0x8(%esp)
c010740d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107410:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107414:	c7 04 24 2c 6c 11 c0 	movl   $0xc0116c2c,(%esp)
c010741b:	e8 45 8f ff ff       	call   c0100365 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107420:	e8 9a 0a 00 00       	call   c0107ebf <mm_create>
c0107425:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c0107428:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010742c:	75 24                	jne    c0107452 <check_swap+0x121>
c010742e:	c7 44 24 0c 52 6c 11 	movl   $0xc0116c52,0xc(%esp)
c0107435:	c0 
c0107436:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c010743d:	c0 
c010743e:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107445:	00 
c0107446:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c010744d:	e8 62 9a ff ff       	call   c0100eb4 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107452:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0107457:	85 c0                	test   %eax,%eax
c0107459:	74 24                	je     c010747f <check_swap+0x14e>
c010745b:	c7 44 24 0c 5d 6c 11 	movl   $0xc0116c5d,0xc(%esp)
c0107462:	c0 
c0107463:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c010746a:	c0 
c010746b:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107472:	00 
c0107473:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c010747a:	e8 35 9a ff ff       	call   c0100eb4 <__panic>

     check_mm_struct = mm;
c010747f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107482:	a3 0c 31 15 c0       	mov    %eax,0xc015310c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107487:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c010748d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107490:	89 50 0c             	mov    %edx,0xc(%eax)
c0107493:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107496:	8b 40 0c             	mov    0xc(%eax),%eax
c0107499:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c010749c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010749f:	8b 00                	mov    (%eax),%eax
c01074a1:	85 c0                	test   %eax,%eax
c01074a3:	74 24                	je     c01074c9 <check_swap+0x198>
c01074a5:	c7 44 24 0c 75 6c 11 	movl   $0xc0116c75,0xc(%esp)
c01074ac:	c0 
c01074ad:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01074b4:	c0 
c01074b5:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01074bc:	00 
c01074bd:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01074c4:	e8 eb 99 ff ff       	call   c0100eb4 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01074c9:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01074d0:	00 
c01074d1:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01074d8:	00 
c01074d9:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01074e0:	e8 7f 0a 00 00       	call   c0107f64 <vma_create>
c01074e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01074e8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01074ec:	75 24                	jne    c0107512 <check_swap+0x1e1>
c01074ee:	c7 44 24 0c 83 6c 11 	movl   $0xc0116c83,0xc(%esp)
c01074f5:	c0 
c01074f6:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01074fd:	c0 
c01074fe:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107505:	00 
c0107506:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c010750d:	e8 a2 99 ff ff       	call   c0100eb4 <__panic>

     insert_vma_struct(mm, vma);
c0107512:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107515:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107519:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010751c:	89 04 24             	mov    %eax,(%esp)
c010751f:	e8 d0 0b 00 00       	call   c01080f4 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107524:	c7 04 24 90 6c 11 c0 	movl   $0xc0116c90,(%esp)
c010752b:	e8 35 8e ff ff       	call   c0100365 <cprintf>
     pte_t *temp_ptep=NULL;
c0107530:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107537:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010753a:	8b 40 0c             	mov    0xc(%eax),%eax
c010753d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107544:	00 
c0107545:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010754c:	00 
c010754d:	89 04 24             	mov    %eax,(%esp)
c0107550:	e8 33 e3 ff ff       	call   c0105888 <get_pte>
c0107555:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0107558:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010755c:	75 24                	jne    c0107582 <check_swap+0x251>
c010755e:	c7 44 24 0c c4 6c 11 	movl   $0xc0116cc4,0xc(%esp)
c0107565:	c0 
c0107566:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c010756d:	c0 
c010756e:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107575:	00 
c0107576:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c010757d:	e8 32 99 ff ff       	call   c0100eb4 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107582:	c7 04 24 d8 6c 11 c0 	movl   $0xc0116cd8,(%esp)
c0107589:	e8 d7 8d ff ff       	call   c0100365 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010758e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107595:	e9 a3 00 00 00       	jmp    c010763d <check_swap+0x30c>
          check_rp[i] = alloc_page();
c010759a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01075a1:	e8 7b db ff ff       	call   c0105121 <alloc_pages>
c01075a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01075a9:	89 04 95 40 30 15 c0 	mov    %eax,-0x3feacfc0(,%edx,4)
          assert(check_rp[i] != NULL );
c01075b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075b3:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01075ba:	85 c0                	test   %eax,%eax
c01075bc:	75 24                	jne    c01075e2 <check_swap+0x2b1>
c01075be:	c7 44 24 0c fc 6c 11 	movl   $0xc0116cfc,0xc(%esp)
c01075c5:	c0 
c01075c6:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01075cd:	c0 
c01075ce:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01075d5:	00 
c01075d6:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01075dd:	e8 d2 98 ff ff       	call   c0100eb4 <__panic>
          assert(!PageProperty(check_rp[i]));
c01075e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075e5:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01075ec:	83 c0 04             	add    $0x4,%eax
c01075ef:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01075f6:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01075f9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01075fc:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01075ff:	0f a3 10             	bt     %edx,(%eax)
c0107602:	19 c0                	sbb    %eax,%eax
c0107604:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0107607:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010760b:	0f 95 c0             	setne  %al
c010760e:	0f b6 c0             	movzbl %al,%eax
c0107611:	85 c0                	test   %eax,%eax
c0107613:	74 24                	je     c0107639 <check_swap+0x308>
c0107615:	c7 44 24 0c 10 6d 11 	movl   $0xc0116d10,0xc(%esp)
c010761c:	c0 
c010761d:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107624:	c0 
c0107625:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010762c:	00 
c010762d:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107634:	e8 7b 98 ff ff       	call   c0100eb4 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107639:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010763d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107641:	0f 8e 53 ff ff ff    	jle    c010759a <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107647:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c010764c:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0107652:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107655:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107658:	c7 45 a8 14 30 15 c0 	movl   $0xc0153014,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010765f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107662:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107665:	89 50 04             	mov    %edx,0x4(%eax)
c0107668:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010766b:	8b 50 04             	mov    0x4(%eax),%edx
c010766e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107671:	89 10                	mov    %edx,(%eax)
c0107673:	c7 45 a4 14 30 15 c0 	movl   $0xc0153014,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010767a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010767d:	8b 40 04             	mov    0x4(%eax),%eax
c0107680:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107683:	0f 94 c0             	sete   %al
c0107686:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107689:	85 c0                	test   %eax,%eax
c010768b:	75 24                	jne    c01076b1 <check_swap+0x380>
c010768d:	c7 44 24 0c 2b 6d 11 	movl   $0xc0116d2b,0xc(%esp)
c0107694:	c0 
c0107695:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c010769c:	c0 
c010769d:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01076a4:	00 
c01076a5:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01076ac:	e8 03 98 ff ff       	call   c0100eb4 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01076b1:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01076b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01076b9:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c01076c0:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076ca:	eb 1e                	jmp    c01076ea <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01076cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076cf:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01076d6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01076dd:	00 
c01076de:	89 04 24             	mov    %eax,(%esp)
c01076e1:	e8 a6 da ff ff       	call   c010518c <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076e6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076ea:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076ee:	7e dc                	jle    c01076cc <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01076f0:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01076f5:	83 f8 04             	cmp    $0x4,%eax
c01076f8:	74 24                	je     c010771e <check_swap+0x3ed>
c01076fa:	c7 44 24 0c 44 6d 11 	movl   $0xc0116d44,0xc(%esp)
c0107701:	c0 
c0107702:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107709:	c0 
c010770a:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107711:	00 
c0107712:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107719:	e8 96 97 ff ff       	call   c0100eb4 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c010771e:	c7 04 24 68 6d 11 c0 	movl   $0xc0116d68,(%esp)
c0107725:	e8 3b 8c ff ff       	call   c0100365 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010772a:	c7 05 18 ff 14 c0 00 	movl   $0x0,0xc014ff18
c0107731:	00 00 00 
     
     check_content_set();
c0107734:	e8 28 fa ff ff       	call   c0107161 <check_content_set>
     assert( nr_free == 0);         
c0107739:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c010773e:	85 c0                	test   %eax,%eax
c0107740:	74 24                	je     c0107766 <check_swap+0x435>
c0107742:	c7 44 24 0c 8f 6d 11 	movl   $0xc0116d8f,0xc(%esp)
c0107749:	c0 
c010774a:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107751:	c0 
c0107752:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107759:	00 
c010775a:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107761:	e8 4e 97 ff ff       	call   c0100eb4 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107766:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010776d:	eb 26                	jmp    c0107795 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c010776f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107772:	c7 04 85 60 30 15 c0 	movl   $0xffffffff,-0x3feacfa0(,%eax,4)
c0107779:	ff ff ff ff 
c010777d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107780:	8b 14 85 60 30 15 c0 	mov    -0x3feacfa0(,%eax,4),%edx
c0107787:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010778a:	89 14 85 a0 30 15 c0 	mov    %edx,-0x3feacf60(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107791:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107795:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107799:	7e d4                	jle    c010776f <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010779b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077a2:	e9 eb 00 00 00       	jmp    c0107892 <check_swap+0x561>
         check_ptep[i]=0;
c01077a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077aa:	c7 04 85 f4 30 15 c0 	movl   $0x0,-0x3feacf0c(,%eax,4)
c01077b1:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01077b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077b8:	83 c0 01             	add    $0x1,%eax
c01077bb:	c1 e0 0c             	shl    $0xc,%eax
c01077be:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01077c5:	00 
c01077c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01077ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01077cd:	89 04 24             	mov    %eax,(%esp)
c01077d0:	e8 b3 e0 ff ff       	call   c0105888 <get_pte>
c01077d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01077d8:	89 04 95 f4 30 15 c0 	mov    %eax,-0x3feacf0c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01077df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077e2:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c01077e9:	85 c0                	test   %eax,%eax
c01077eb:	75 24                	jne    c0107811 <check_swap+0x4e0>
c01077ed:	c7 44 24 0c 9c 6d 11 	movl   $0xc0116d9c,0xc(%esp)
c01077f4:	c0 
c01077f5:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01077fc:	c0 
c01077fd:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107804:	00 
c0107805:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c010780c:	e8 a3 96 ff ff       	call   c0100eb4 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107811:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107814:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c010781b:	8b 00                	mov    (%eax),%eax
c010781d:	89 04 24             	mov    %eax,(%esp)
c0107820:	e8 9f f5 ff ff       	call   c0106dc4 <pte2page>
c0107825:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107828:	8b 14 95 40 30 15 c0 	mov    -0x3feacfc0(,%edx,4),%edx
c010782f:	39 d0                	cmp    %edx,%eax
c0107831:	74 24                	je     c0107857 <check_swap+0x526>
c0107833:	c7 44 24 0c b4 6d 11 	movl   $0xc0116db4,0xc(%esp)
c010783a:	c0 
c010783b:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107842:	c0 
c0107843:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010784a:	00 
c010784b:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107852:	e8 5d 96 ff ff       	call   c0100eb4 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107857:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010785a:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c0107861:	8b 00                	mov    (%eax),%eax
c0107863:	83 e0 01             	and    $0x1,%eax
c0107866:	85 c0                	test   %eax,%eax
c0107868:	75 24                	jne    c010788e <check_swap+0x55d>
c010786a:	c7 44 24 0c dc 6d 11 	movl   $0xc0116ddc,0xc(%esp)
c0107871:	c0 
c0107872:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c0107879:	c0 
c010787a:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107881:	00 
c0107882:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c0107889:	e8 26 96 ff ff       	call   c0100eb4 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010788e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107892:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107896:	0f 8e 0b ff ff ff    	jle    c01077a7 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c010789c:	c7 04 24 f8 6d 11 c0 	movl   $0xc0116df8,(%esp)
c01078a3:	e8 bd 8a ff ff       	call   c0100365 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01078a8:	e8 6c fa ff ff       	call   c0107319 <check_content_access>
c01078ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01078b0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01078b4:	74 24                	je     c01078da <check_swap+0x5a9>
c01078b6:	c7 44 24 0c 1e 6e 11 	movl   $0xc0116e1e,0xc(%esp)
c01078bd:	c0 
c01078be:	c7 44 24 08 06 6b 11 	movl   $0xc0116b06,0x8(%esp)
c01078c5:	c0 
c01078c6:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01078cd:	00 
c01078ce:	c7 04 24 a0 6a 11 c0 	movl   $0xc0116aa0,(%esp)
c01078d5:	e8 da 95 ff ff       	call   c0100eb4 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01078e1:	eb 1e                	jmp    c0107901 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01078e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078e6:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01078ed:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01078f4:	00 
c01078f5:	89 04 24             	mov    %eax,(%esp)
c01078f8:	e8 8f d8 ff ff       	call   c010518c <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078fd:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107901:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107905:	7e dc                	jle    c01078e3 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c0107907:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010790a:	8b 00                	mov    (%eax),%eax
c010790c:	89 04 24             	mov    %eax,(%esp)
c010790f:	e8 6b f4 ff ff       	call   c0106d7f <pa2page>
c0107914:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010791b:	00 
c010791c:	89 04 24             	mov    %eax,(%esp)
c010791f:	e8 68 d8 ff ff       	call   c010518c <free_pages>
     pgdir[0] = 0;
c0107924:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107927:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010792d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107930:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107937:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010793a:	89 04 24             	mov    %eax,(%esp)
c010793d:	e8 e2 08 00 00       	call   c0108224 <mm_destroy>
     check_mm_struct = NULL;
c0107942:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c0107949:	00 00 00 
     
     nr_free = nr_free_store;
c010794c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010794f:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
     free_list = free_list_store;
c0107954:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107957:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010795a:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c010795f:	89 15 18 30 15 c0    	mov    %edx,0xc0153018

     
     le = &free_list;
c0107965:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010796c:	eb 1d                	jmp    c010798b <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c010796e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107971:	83 e8 0c             	sub    $0xc,%eax
c0107974:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107977:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010797b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010797e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107981:	8b 40 08             	mov    0x8(%eax),%eax
c0107984:	29 c2                	sub    %eax,%edx
c0107986:	89 d0                	mov    %edx,%eax
c0107988:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010798b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010798e:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107991:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107994:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107997:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010799a:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c01079a1:	75 cb                	jne    c010796e <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c01079a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079a6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01079aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01079b1:	c7 04 24 25 6e 11 c0 	movl   $0xc0116e25,(%esp)
c01079b8:	e8 a8 89 ff ff       	call   c0100365 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01079bd:	c7 04 24 3f 6e 11 c0 	movl   $0xc0116e3f,(%esp)
c01079c4:	e8 9c 89 ff ff       	call   c0100365 <cprintf>
}
c01079c9:	83 c4 74             	add    $0x74,%esp
c01079cc:	5b                   	pop    %ebx
c01079cd:	5d                   	pop    %ebp
c01079ce:	c3                   	ret    

c01079cf <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01079cf:	55                   	push   %ebp
c01079d0:	89 e5                	mov    %esp,%ebp
c01079d2:	83 ec 10             	sub    $0x10,%esp
c01079d5:	c7 45 fc 04 31 15 c0 	movl   $0xc0153104,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01079dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079df:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01079e2:	89 50 04             	mov    %edx,0x4(%eax)
c01079e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079e8:	8b 50 04             	mov    0x4(%eax),%edx
c01079eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079ee:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01079f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01079f3:	c7 40 14 04 31 15 c0 	movl   $0xc0153104,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01079fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01079ff:	c9                   	leave  
c0107a00:	c3                   	ret    

c0107a01 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107a01:	55                   	push   %ebp
c0107a02:	89 e5                	mov    %esp,%ebp
c0107a04:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a07:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a0a:	8b 40 14             	mov    0x14(%eax),%eax
c0107a0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107a10:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a13:	83 c0 14             	add    $0x14,%eax
c0107a16:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107a19:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107a1d:	74 06                	je     c0107a25 <_fifo_map_swappable+0x24>
c0107a1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a23:	75 24                	jne    c0107a49 <_fifo_map_swappable+0x48>
c0107a25:	c7 44 24 0c 58 6e 11 	movl   $0xc0116e58,0xc(%esp)
c0107a2c:	c0 
c0107a2d:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107a34:	c0 
c0107a35:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107a3c:	00 
c0107a3d:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107a44:	e8 6b 94 ff ff       	call   c0100eb4 <__panic>
c0107a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a52:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107a55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a5e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107a61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107a64:	8b 40 04             	mov    0x4(%eax),%eax
c0107a67:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107a6a:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107a6d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a70:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107a73:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107a76:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a79:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a7c:	89 10                	mov    %edx,(%eax)
c0107a7e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a81:	8b 10                	mov    (%eax),%edx
c0107a83:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107a86:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107a89:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a8c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107a8f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107a92:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a95:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107a98:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);//将最近分配的页插入到pra_list_head队列的尾部
    return 0;
c0107a9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a9f:	c9                   	leave  
c0107aa0:	c3                   	ret    

c0107aa1 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107aa1:	55                   	push   %ebp
c0107aa2:	89 e5                	mov    %esp,%ebp
c0107aa4:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107aa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0107aaa:	8b 40 14             	mov    0x14(%eax),%eax
c0107aad:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107ab0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ab4:	75 24                	jne    c0107ada <_fifo_swap_out_victim+0x39>
c0107ab6:	c7 44 24 0c 9f 6e 11 	movl   $0xc0116e9f,0xc(%esp)
c0107abd:	c0 
c0107abe:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107ac5:	c0 
c0107ac6:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107acd:	00 
c0107ace:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107ad5:	e8 da 93 ff ff       	call   c0100eb4 <__panic>
     assert(in_tick==0);
c0107ada:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107ade:	74 24                	je     c0107b04 <_fifo_swap_out_victim+0x63>
c0107ae0:	c7 44 24 0c ac 6e 11 	movl   $0xc0116eac,0xc(%esp)
c0107ae7:	c0 
c0107ae8:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107aef:	c0 
c0107af0:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107af7:	00 
c0107af8:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107aff:	e8 b0 93 ff ff       	call   c0100eb4 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t *le = head->prev;//选择队列中被最早调入的页表
c0107b04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b07:	8b 00                	mov    (%eax),%eax
c0107b09:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b0f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107b12:	75 24                	jne    c0107b38 <_fifo_swap_out_victim+0x97>
c0107b14:	c7 44 24 0c b7 6e 11 	movl   $0xc0116eb7,0xc(%esp)
c0107b1b:	c0 
c0107b1c:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107b23:	c0 
c0107b24:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0107b2b:	00 
c0107b2c:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107b33:	e8 7c 93 ff ff       	call   c0100eb4 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107b38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b3b:	83 e8 14             	sub    $0x14,%eax
c0107b3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b44:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107b47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b4a:	8b 40 04             	mov    0x4(%eax),%eax
c0107b4d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107b50:	8b 12                	mov    (%edx),%edx
c0107b52:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107b55:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107b58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b5b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107b5e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107b61:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107b64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b67:	89 10                	mov    %edx,(%eax)
     list_del(le);//将换出的页表从队列中删除
     assert(p !=NULL);
c0107b69:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107b6d:	75 24                	jne    c0107b93 <_fifo_swap_out_victim+0xf2>
c0107b6f:	c7 44 24 0c c0 6e 11 	movl   $0xc0116ec0,0xc(%esp)
c0107b76:	c0 
c0107b77:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107b7e:	c0 
c0107b7f:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
c0107b86:	00 
c0107b87:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107b8e:	e8 21 93 ff ff       	call   c0100eb4 <__panic>
     *ptr_page = p;//将该页的地址存储在ptr_page中
c0107b93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b96:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107b99:	89 10                	mov    %edx,(%eax)
     return 0;
c0107b9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ba0:	c9                   	leave  
c0107ba1:	c3                   	ret    

c0107ba2 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107ba2:	55                   	push   %ebp
c0107ba3:	89 e5                	mov    %esp,%ebp
c0107ba5:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107ba8:	c7 04 24 cc 6e 11 c0 	movl   $0xc0116ecc,(%esp)
c0107baf:	e8 b1 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107bb4:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107bb9:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107bbc:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107bc1:	83 f8 04             	cmp    $0x4,%eax
c0107bc4:	74 24                	je     c0107bea <_fifo_check_swap+0x48>
c0107bc6:	c7 44 24 0c f2 6e 11 	movl   $0xc0116ef2,0xc(%esp)
c0107bcd:	c0 
c0107bce:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107bd5:	c0 
c0107bd6:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107bdd:	00 
c0107bde:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107be5:	e8 ca 92 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107bea:	c7 04 24 04 6f 11 c0 	movl   $0xc0116f04,(%esp)
c0107bf1:	e8 6f 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107bf6:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107bfb:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107bfe:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c03:	83 f8 04             	cmp    $0x4,%eax
c0107c06:	74 24                	je     c0107c2c <_fifo_check_swap+0x8a>
c0107c08:	c7 44 24 0c f2 6e 11 	movl   $0xc0116ef2,0xc(%esp)
c0107c0f:	c0 
c0107c10:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107c17:	c0 
c0107c18:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107c1f:	00 
c0107c20:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107c27:	e8 88 92 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107c2c:	c7 04 24 2c 6f 11 c0 	movl   $0xc0116f2c,(%esp)
c0107c33:	e8 2d 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107c38:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107c3d:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107c40:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c45:	83 f8 04             	cmp    $0x4,%eax
c0107c48:	74 24                	je     c0107c6e <_fifo_check_swap+0xcc>
c0107c4a:	c7 44 24 0c f2 6e 11 	movl   $0xc0116ef2,0xc(%esp)
c0107c51:	c0 
c0107c52:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107c59:	c0 
c0107c5a:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107c61:	00 
c0107c62:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107c69:	e8 46 92 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c6e:	c7 04 24 54 6f 11 c0 	movl   $0xc0116f54,(%esp)
c0107c75:	e8 eb 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c7a:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c7f:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107c82:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c87:	83 f8 04             	cmp    $0x4,%eax
c0107c8a:	74 24                	je     c0107cb0 <_fifo_check_swap+0x10e>
c0107c8c:	c7 44 24 0c f2 6e 11 	movl   $0xc0116ef2,0xc(%esp)
c0107c93:	c0 
c0107c94:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107c9b:	c0 
c0107c9c:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107ca3:	00 
c0107ca4:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107cab:	e8 04 92 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107cb0:	c7 04 24 7c 6f 11 c0 	movl   $0xc0116f7c,(%esp)
c0107cb7:	e8 a9 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107cbc:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107cc1:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107cc4:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107cc9:	83 f8 05             	cmp    $0x5,%eax
c0107ccc:	74 24                	je     c0107cf2 <_fifo_check_swap+0x150>
c0107cce:	c7 44 24 0c a2 6f 11 	movl   $0xc0116fa2,0xc(%esp)
c0107cd5:	c0 
c0107cd6:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107cdd:	c0 
c0107cde:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107ce5:	00 
c0107ce6:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107ced:	e8 c2 91 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107cf2:	c7 04 24 54 6f 11 c0 	movl   $0xc0116f54,(%esp)
c0107cf9:	e8 67 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107cfe:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d03:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107d06:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d0b:	83 f8 05             	cmp    $0x5,%eax
c0107d0e:	74 24                	je     c0107d34 <_fifo_check_swap+0x192>
c0107d10:	c7 44 24 0c a2 6f 11 	movl   $0xc0116fa2,0xc(%esp)
c0107d17:	c0 
c0107d18:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107d1f:	c0 
c0107d20:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107d27:	00 
c0107d28:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107d2f:	e8 80 91 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107d34:	c7 04 24 04 6f 11 c0 	movl   $0xc0116f04,(%esp)
c0107d3b:	e8 25 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107d40:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107d45:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107d48:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d4d:	83 f8 06             	cmp    $0x6,%eax
c0107d50:	74 24                	je     c0107d76 <_fifo_check_swap+0x1d4>
c0107d52:	c7 44 24 0c b1 6f 11 	movl   $0xc0116fb1,0xc(%esp)
c0107d59:	c0 
c0107d5a:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107d61:	c0 
c0107d62:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107d69:	00 
c0107d6a:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107d71:	e8 3e 91 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d76:	c7 04 24 54 6f 11 c0 	movl   $0xc0116f54,(%esp)
c0107d7d:	e8 e3 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d82:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d87:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107d8a:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d8f:	83 f8 07             	cmp    $0x7,%eax
c0107d92:	74 24                	je     c0107db8 <_fifo_check_swap+0x216>
c0107d94:	c7 44 24 0c c0 6f 11 	movl   $0xc0116fc0,0xc(%esp)
c0107d9b:	c0 
c0107d9c:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107da3:	c0 
c0107da4:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107dab:	00 
c0107dac:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107db3:	e8 fc 90 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107db8:	c7 04 24 cc 6e 11 c0 	movl   $0xc0116ecc,(%esp)
c0107dbf:	e8 a1 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107dc4:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107dc9:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107dcc:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107dd1:	83 f8 08             	cmp    $0x8,%eax
c0107dd4:	74 24                	je     c0107dfa <_fifo_check_swap+0x258>
c0107dd6:	c7 44 24 0c cf 6f 11 	movl   $0xc0116fcf,0xc(%esp)
c0107ddd:	c0 
c0107dde:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107de5:	c0 
c0107de6:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107ded:	00 
c0107dee:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107df5:	e8 ba 90 ff ff       	call   c0100eb4 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107dfa:	c7 04 24 2c 6f 11 c0 	movl   $0xc0116f2c,(%esp)
c0107e01:	e8 5f 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107e06:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107e0b:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107e0e:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107e13:	83 f8 09             	cmp    $0x9,%eax
c0107e16:	74 24                	je     c0107e3c <_fifo_check_swap+0x29a>
c0107e18:	c7 44 24 0c de 6f 11 	movl   $0xc0116fde,0xc(%esp)
c0107e1f:	c0 
c0107e20:	c7 44 24 08 76 6e 11 	movl   $0xc0116e76,0x8(%esp)
c0107e27:	c0 
c0107e28:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107e2f:	00 
c0107e30:	c7 04 24 8b 6e 11 c0 	movl   $0xc0116e8b,(%esp)
c0107e37:	e8 78 90 ff ff       	call   c0100eb4 <__panic>
    return 0;
c0107e3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e41:	c9                   	leave  
c0107e42:	c3                   	ret    

c0107e43 <_fifo_init>:


static int
_fifo_init(void)
{
c0107e43:	55                   	push   %ebp
c0107e44:	89 e5                	mov    %esp,%ebp
    return 0;
c0107e46:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e4b:	5d                   	pop    %ebp
c0107e4c:	c3                   	ret    

c0107e4d <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107e4d:	55                   	push   %ebp
c0107e4e:	89 e5                	mov    %esp,%ebp
    return 0;
c0107e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e55:	5d                   	pop    %ebp
c0107e56:	c3                   	ret    

c0107e57 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107e57:	55                   	push   %ebp
c0107e58:	89 e5                	mov    %esp,%ebp
c0107e5a:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e5f:	5d                   	pop    %ebp
c0107e60:	c3                   	ret    

c0107e61 <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0107e61:	55                   	push   %ebp
c0107e62:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107e64:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e67:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107e6a:	5d                   	pop    %ebp
c0107e6b:	c3                   	ret    

c0107e6c <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107e6c:	55                   	push   %ebp
c0107e6d:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107e6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e72:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e75:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107e78:	5d                   	pop    %ebp
c0107e79:	c3                   	ret    

c0107e7a <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107e7a:	55                   	push   %ebp
c0107e7b:	89 e5                	mov    %esp,%ebp
c0107e7d:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107e80:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e83:	c1 e8 0c             	shr    $0xc,%eax
c0107e86:	89 c2                	mov    %eax,%edx
c0107e88:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0107e8d:	39 c2                	cmp    %eax,%edx
c0107e8f:	72 1c                	jb     c0107ead <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107e91:	c7 44 24 08 00 70 11 	movl   $0xc0117000,0x8(%esp)
c0107e98:	c0 
c0107e99:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107ea0:	00 
c0107ea1:	c7 04 24 1f 70 11 c0 	movl   $0xc011701f,(%esp)
c0107ea8:	e8 07 90 ff ff       	call   c0100eb4 <__panic>
    }
    return &pages[PPN(pa)];
c0107ead:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0107eb2:	8b 55 08             	mov    0x8(%ebp),%edx
c0107eb5:	c1 ea 0c             	shr    $0xc,%edx
c0107eb8:	c1 e2 05             	shl    $0x5,%edx
c0107ebb:	01 d0                	add    %edx,%eax
}
c0107ebd:	c9                   	leave  
c0107ebe:	c3                   	ret    

c0107ebf <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107ebf:	55                   	push   %ebp
c0107ec0:	89 e5                	mov    %esp,%ebp
c0107ec2:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107ec5:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107ecc:	e8 db cd ff ff       	call   c0104cac <kmalloc>
c0107ed1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107ed4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ed8:	0f 84 81 00 00 00    	je     c0107f5f <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107ede:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ee1:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107ee4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ee7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107eea:	89 50 04             	mov    %edx,0x4(%eax)
c0107eed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ef0:	8b 50 04             	mov    0x4(%eax),%edx
c0107ef3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ef6:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107ef8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107efb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f05:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f0f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107f16:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0107f1b:	85 c0                	test   %eax,%eax
c0107f1d:	74 0d                	je     c0107f2c <mm_create+0x6d>
c0107f1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f22:	89 04 24             	mov    %eax,(%esp)
c0107f25:	e8 68 ef ff ff       	call   c0106e92 <swap_init_mm>
c0107f2a:	eb 0a                	jmp    c0107f36 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107f2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f2f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107f36:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107f3d:	00 
c0107f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f41:	89 04 24             	mov    %eax,(%esp)
c0107f44:	e8 23 ff ff ff       	call   c0107e6c <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f4c:	83 c0 1c             	add    $0x1c,%eax
c0107f4f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107f56:	00 
c0107f57:	89 04 24             	mov    %eax,(%esp)
c0107f5a:	e8 2a 1b 00 00       	call   c0109a89 <sem_init>
    }    
    return mm;
c0107f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f62:	c9                   	leave  
c0107f63:	c3                   	ret    

c0107f64 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107f64:	55                   	push   %ebp
c0107f65:	89 e5                	mov    %esp,%ebp
c0107f67:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107f6a:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107f71:	e8 36 cd ff ff       	call   c0104cac <kmalloc>
c0107f76:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107f79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f7d:	74 1b                	je     c0107f9a <vma_create+0x36>
        vma->vm_start = vm_start;
c0107f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f82:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f85:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107f88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f8b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f8e:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107f91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f94:	8b 55 10             	mov    0x10(%ebp),%edx
c0107f97:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f9d:	c9                   	leave  
c0107f9e:	c3                   	ret    

c0107f9f <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107f9f:	55                   	push   %ebp
c0107fa0:	89 e5                	mov    %esp,%ebp
c0107fa2:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107fa5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107fac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107fb0:	0f 84 95 00 00 00    	je     c010804b <find_vma+0xac>
        vma = mm->mmap_cache;
c0107fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fb9:	8b 40 08             	mov    0x8(%eax),%eax
c0107fbc:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107fbf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107fc3:	74 16                	je     c0107fdb <find_vma+0x3c>
c0107fc5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fc8:	8b 40 04             	mov    0x4(%eax),%eax
c0107fcb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fce:	77 0b                	ja     c0107fdb <find_vma+0x3c>
c0107fd0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fd3:	8b 40 08             	mov    0x8(%eax),%eax
c0107fd6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fd9:	77 61                	ja     c010803c <find_vma+0x9d>
                bool found = 0;
c0107fdb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0107fe2:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fe5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107fe8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107feb:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0107fee:	eb 28                	jmp    c0108018 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0107ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ff3:	83 e8 10             	sub    $0x10,%eax
c0107ff6:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0107ff9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107ffc:	8b 40 04             	mov    0x4(%eax),%eax
c0107fff:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108002:	77 14                	ja     c0108018 <find_vma+0x79>
c0108004:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108007:	8b 40 08             	mov    0x8(%eax),%eax
c010800a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010800d:	76 09                	jbe    c0108018 <find_vma+0x79>
                        found = 1;
c010800f:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0108016:	eb 17                	jmp    c010802f <find_vma+0x90>
c0108018:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010801b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010801e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108021:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0108024:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108027:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010802a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010802d:	75 c1                	jne    c0107ff0 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c010802f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0108033:	75 07                	jne    c010803c <find_vma+0x9d>
                    vma = NULL;
c0108035:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c010803c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108040:	74 09                	je     c010804b <find_vma+0xac>
            mm->mmap_cache = vma;
c0108042:	8b 45 08             	mov    0x8(%ebp),%eax
c0108045:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108048:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c010804b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010804e:	c9                   	leave  
c010804f:	c3                   	ret    

c0108050 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0108050:	55                   	push   %ebp
c0108051:	89 e5                	mov    %esp,%ebp
c0108053:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108056:	8b 45 08             	mov    0x8(%ebp),%eax
c0108059:	8b 50 04             	mov    0x4(%eax),%edx
c010805c:	8b 45 08             	mov    0x8(%ebp),%eax
c010805f:	8b 40 08             	mov    0x8(%eax),%eax
c0108062:	39 c2                	cmp    %eax,%edx
c0108064:	72 24                	jb     c010808a <check_vma_overlap+0x3a>
c0108066:	c7 44 24 0c 2d 70 11 	movl   $0xc011702d,0xc(%esp)
c010806d:	c0 
c010806e:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108075:	c0 
c0108076:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010807d:	00 
c010807e:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108085:	e8 2a 8e ff ff       	call   c0100eb4 <__panic>
    assert(prev->vm_end <= next->vm_start);
c010808a:	8b 45 08             	mov    0x8(%ebp),%eax
c010808d:	8b 50 08             	mov    0x8(%eax),%edx
c0108090:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108093:	8b 40 04             	mov    0x4(%eax),%eax
c0108096:	39 c2                	cmp    %eax,%edx
c0108098:	76 24                	jbe    c01080be <check_vma_overlap+0x6e>
c010809a:	c7 44 24 0c 70 70 11 	movl   $0xc0117070,0xc(%esp)
c01080a1:	c0 
c01080a2:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c01080a9:	c0 
c01080aa:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01080b1:	00 
c01080b2:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c01080b9:	e8 f6 8d ff ff       	call   c0100eb4 <__panic>
    assert(next->vm_start < next->vm_end);
c01080be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080c1:	8b 50 04             	mov    0x4(%eax),%edx
c01080c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080c7:	8b 40 08             	mov    0x8(%eax),%eax
c01080ca:	39 c2                	cmp    %eax,%edx
c01080cc:	72 24                	jb     c01080f2 <check_vma_overlap+0xa2>
c01080ce:	c7 44 24 0c 8f 70 11 	movl   $0xc011708f,0xc(%esp)
c01080d5:	c0 
c01080d6:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c01080dd:	c0 
c01080de:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01080e5:	00 
c01080e6:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c01080ed:	e8 c2 8d ff ff       	call   c0100eb4 <__panic>
}
c01080f2:	c9                   	leave  
c01080f3:	c3                   	ret    

c01080f4 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01080f4:	55                   	push   %ebp
c01080f5:	89 e5                	mov    %esp,%ebp
c01080f7:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01080fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080fd:	8b 50 04             	mov    0x4(%eax),%edx
c0108100:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108103:	8b 40 08             	mov    0x8(%eax),%eax
c0108106:	39 c2                	cmp    %eax,%edx
c0108108:	72 24                	jb     c010812e <insert_vma_struct+0x3a>
c010810a:	c7 44 24 0c ad 70 11 	movl   $0xc01170ad,0xc(%esp)
c0108111:	c0 
c0108112:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108119:	c0 
c010811a:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108121:	00 
c0108122:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108129:	e8 86 8d ff ff       	call   c0100eb4 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010812e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108131:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108134:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108137:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010813a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010813d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0108140:	eb 21                	jmp    c0108163 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0108142:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108145:	83 e8 10             	sub    $0x10,%eax
c0108148:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010814b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010814e:	8b 50 04             	mov    0x4(%eax),%edx
c0108151:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108154:	8b 40 04             	mov    0x4(%eax),%eax
c0108157:	39 c2                	cmp    %eax,%edx
c0108159:	76 02                	jbe    c010815d <insert_vma_struct+0x69>
                break;
c010815b:	eb 1d                	jmp    c010817a <insert_vma_struct+0x86>
            }
            le_prev = le;
c010815d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108160:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108163:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108166:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108169:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010816c:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010816f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108172:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108175:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108178:	75 c8                	jne    c0108142 <insert_vma_struct+0x4e>
c010817a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010817d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108180:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108183:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108186:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108189:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010818c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010818f:	74 15                	je     c01081a6 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0108191:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108194:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108197:	8b 45 0c             	mov    0xc(%ebp),%eax
c010819a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010819e:	89 14 24             	mov    %edx,(%esp)
c01081a1:	e8 aa fe ff ff       	call   c0108050 <check_vma_overlap>
    }
    if (le_next != list) {
c01081a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01081a9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01081ac:	74 15                	je     c01081c3 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01081ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01081b1:	83 e8 10             	sub    $0x10,%eax
c01081b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01081b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081bb:	89 04 24             	mov    %eax,(%esp)
c01081be:	e8 8d fe ff ff       	call   c0108050 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01081c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01081c9:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01081cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ce:	8d 50 10             	lea    0x10(%eax),%edx
c01081d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01081d7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01081da:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01081dd:	8b 40 04             	mov    0x4(%eax),%eax
c01081e0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01081e3:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01081e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01081e9:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01081ec:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01081ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01081f2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01081f5:	89 10                	mov    %edx,(%eax)
c01081f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01081fa:	8b 10                	mov    (%eax),%edx
c01081fc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01081ff:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108202:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108205:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108208:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010820b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010820e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108211:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108213:	8b 45 08             	mov    0x8(%ebp),%eax
c0108216:	8b 40 10             	mov    0x10(%eax),%eax
c0108219:	8d 50 01             	lea    0x1(%eax),%edx
c010821c:	8b 45 08             	mov    0x8(%ebp),%eax
c010821f:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108222:	c9                   	leave  
c0108223:	c3                   	ret    

c0108224 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0108224:	55                   	push   %ebp
c0108225:	89 e5                	mov    %esp,%ebp
c0108227:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010822a:	8b 45 08             	mov    0x8(%ebp),%eax
c010822d:	89 04 24             	mov    %eax,(%esp)
c0108230:	e8 2c fc ff ff       	call   c0107e61 <mm_count>
c0108235:	85 c0                	test   %eax,%eax
c0108237:	74 24                	je     c010825d <mm_destroy+0x39>
c0108239:	c7 44 24 0c c9 70 11 	movl   $0xc01170c9,0xc(%esp)
c0108240:	c0 
c0108241:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108248:	c0 
c0108249:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108250:	00 
c0108251:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108258:	e8 57 8c ff ff       	call   c0100eb4 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010825d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108260:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108263:	eb 36                	jmp    c010829b <mm_destroy+0x77>
c0108265:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108268:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010826b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010826e:	8b 40 04             	mov    0x4(%eax),%eax
c0108271:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108274:	8b 12                	mov    (%edx),%edx
c0108276:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108279:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010827c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010827f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108282:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108285:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108288:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010828b:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010828d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108290:	83 e8 10             	sub    $0x10,%eax
c0108293:	89 04 24             	mov    %eax,(%esp)
c0108296:	e8 2c ca ff ff       	call   c0104cc7 <kfree>
c010829b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010829e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01082a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01082a4:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01082a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01082b0:	75 b3                	jne    c0108265 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01082b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01082b5:	89 04 24             	mov    %eax,(%esp)
c01082b8:	e8 0a ca ff ff       	call   c0104cc7 <kfree>
    mm=NULL;
c01082bd:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01082c4:	c9                   	leave  
c01082c5:	c3                   	ret    

c01082c6 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01082c6:	55                   	push   %ebp
c01082c7:	89 e5                	mov    %esp,%ebp
c01082c9:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01082cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01082da:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01082dd:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01082e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01082e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01082ea:	01 c2                	add    %eax,%edx
c01082ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01082ef:	01 d0                	add    %edx,%eax
c01082f1:	83 e8 01             	sub    $0x1,%eax
c01082f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01082f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082fa:	ba 00 00 00 00       	mov    $0x0,%edx
c01082ff:	f7 75 e8             	divl   -0x18(%ebp)
c0108302:	89 d0                	mov    %edx,%eax
c0108304:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108307:	29 c2                	sub    %eax,%edx
c0108309:	89 d0                	mov    %edx,%eax
c010830b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c010830e:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108315:	76 11                	jbe    c0108328 <mm_map+0x62>
c0108317:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010831a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010831d:	73 09                	jae    c0108328 <mm_map+0x62>
c010831f:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0108326:	76 0a                	jbe    c0108332 <mm_map+0x6c>
        return -E_INVAL;
c0108328:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010832d:	e9 ae 00 00 00       	jmp    c01083e0 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0108332:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108336:	75 24                	jne    c010835c <mm_map+0x96>
c0108338:	c7 44 24 0c db 70 11 	movl   $0xc01170db,0xc(%esp)
c010833f:	c0 
c0108340:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108347:	c0 
c0108348:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010834f:	00 
c0108350:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108357:	e8 58 8b ff ff       	call   c0100eb4 <__panic>

    int ret = -E_INVAL;
c010835c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108363:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108366:	89 44 24 04          	mov    %eax,0x4(%esp)
c010836a:	8b 45 08             	mov    0x8(%ebp),%eax
c010836d:	89 04 24             	mov    %eax,(%esp)
c0108370:	e8 2a fc ff ff       	call   c0107f9f <find_vma>
c0108375:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108378:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010837c:	74 0d                	je     c010838b <mm_map+0xc5>
c010837e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108381:	8b 40 04             	mov    0x4(%eax),%eax
c0108384:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108387:	73 02                	jae    c010838b <mm_map+0xc5>
        goto out;
c0108389:	eb 52                	jmp    c01083dd <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c010838b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108392:	8b 45 14             	mov    0x14(%ebp),%eax
c0108395:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108399:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010839c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083a3:	89 04 24             	mov    %eax,(%esp)
c01083a6:	e8 b9 fb ff ff       	call   c0107f64 <vma_create>
c01083ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01083ae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01083b2:	75 02                	jne    c01083b6 <mm_map+0xf0>
        goto out;
c01083b4:	eb 27                	jmp    c01083dd <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c01083b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01083b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01083c0:	89 04 24             	mov    %eax,(%esp)
c01083c3:	e8 2c fd ff ff       	call   c01080f4 <insert_vma_struct>
    if (vma_store != NULL) {
c01083c8:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01083cc:	74 08                	je     c01083d6 <mm_map+0x110>
        *vma_store = vma;
c01083ce:	8b 45 18             	mov    0x18(%ebp),%eax
c01083d1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01083d4:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01083d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c01083dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01083e0:	c9                   	leave  
c01083e1:	c3                   	ret    

c01083e2 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01083e2:	55                   	push   %ebp
c01083e3:	89 e5                	mov    %esp,%ebp
c01083e5:	56                   	push   %esi
c01083e6:	53                   	push   %ebx
c01083e7:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01083ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01083ee:	74 06                	je     c01083f6 <dup_mmap+0x14>
c01083f0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01083f4:	75 24                	jne    c010841a <dup_mmap+0x38>
c01083f6:	c7 44 24 0c e6 70 11 	movl   $0xc01170e6,0xc(%esp)
c01083fd:	c0 
c01083fe:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108405:	c0 
c0108406:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c010840d:	00 
c010840e:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108415:	e8 9a 8a ff ff       	call   c0100eb4 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010841a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010841d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108420:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108423:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0108426:	e9 92 00 00 00       	jmp    c01084bd <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010842b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010842e:	83 e8 10             	sub    $0x10,%eax
c0108431:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108434:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108437:	8b 48 0c             	mov    0xc(%eax),%ecx
c010843a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010843d:	8b 50 08             	mov    0x8(%eax),%edx
c0108440:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108443:	8b 40 04             	mov    0x4(%eax),%eax
c0108446:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010844a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010844e:	89 04 24             	mov    %eax,(%esp)
c0108451:	e8 0e fb ff ff       	call   c0107f64 <vma_create>
c0108456:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108459:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010845d:	75 07                	jne    c0108466 <dup_mmap+0x84>
            return -E_NO_MEM;
c010845f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108464:	eb 76                	jmp    c01084dc <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108466:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108469:	89 44 24 04          	mov    %eax,0x4(%esp)
c010846d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108470:	89 04 24             	mov    %eax,(%esp)
c0108473:	e8 7c fc ff ff       	call   c01080f4 <insert_vma_struct>

        bool share = 0;
c0108478:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010847f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108482:	8b 58 08             	mov    0x8(%eax),%ebx
c0108485:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108488:	8b 48 04             	mov    0x4(%eax),%ecx
c010848b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010848e:	8b 50 0c             	mov    0xc(%eax),%edx
c0108491:	8b 45 08             	mov    0x8(%ebp),%eax
c0108494:	8b 40 0c             	mov    0xc(%eax),%eax
c0108497:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010849a:	89 74 24 10          	mov    %esi,0x10(%esp)
c010849e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01084a2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01084a6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084aa:	89 04 24             	mov    %eax,(%esp)
c01084ad:	e8 c3 d7 ff ff       	call   c0105c75 <copy_range>
c01084b2:	85 c0                	test   %eax,%eax
c01084b4:	74 07                	je     c01084bd <dup_mmap+0xdb>
            return -E_NO_MEM;
c01084b6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01084bb:	eb 1f                	jmp    c01084dc <dup_mmap+0xfa>
c01084bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01084c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01084c6:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01084c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01084cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084ce:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01084d1:	0f 85 54 ff ff ff    	jne    c010842b <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01084d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01084dc:	83 c4 40             	add    $0x40,%esp
c01084df:	5b                   	pop    %ebx
c01084e0:	5e                   	pop    %esi
c01084e1:	5d                   	pop    %ebp
c01084e2:	c3                   	ret    

c01084e3 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01084e3:	55                   	push   %ebp
c01084e4:	89 e5                	mov    %esp,%ebp
c01084e6:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01084e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01084ed:	74 0f                	je     c01084fe <exit_mmap+0x1b>
c01084ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01084f2:	89 04 24             	mov    %eax,(%esp)
c01084f5:	e8 67 f9 ff ff       	call   c0107e61 <mm_count>
c01084fa:	85 c0                	test   %eax,%eax
c01084fc:	74 24                	je     c0108522 <exit_mmap+0x3f>
c01084fe:	c7 44 24 0c 04 71 11 	movl   $0xc0117104,0xc(%esp)
c0108505:	c0 
c0108506:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c010850d:	c0 
c010850e:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108515:	00 
c0108516:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c010851d:	e8 92 89 ff ff       	call   c0100eb4 <__panic>
    pde_t *pgdir = mm->pgdir;
c0108522:	8b 45 08             	mov    0x8(%ebp),%eax
c0108525:	8b 40 0c             	mov    0xc(%eax),%eax
c0108528:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010852b:	8b 45 08             	mov    0x8(%ebp),%eax
c010852e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108531:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108534:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108537:	eb 28                	jmp    c0108561 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0108539:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010853c:	83 e8 10             	sub    $0x10,%eax
c010853f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108542:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108545:	8b 50 08             	mov    0x8(%eax),%edx
c0108548:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010854b:	8b 40 04             	mov    0x4(%eax),%eax
c010854e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108552:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108556:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108559:	89 04 24             	mov    %eax,(%esp)
c010855c:	e8 19 d5 ff ff       	call   c0105a7a <unmap_range>
c0108561:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108564:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108567:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010856a:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010856d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108570:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108573:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108576:	75 c1                	jne    c0108539 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108578:	eb 28                	jmp    c01085a2 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c010857a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010857d:	83 e8 10             	sub    $0x10,%eax
c0108580:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108583:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108586:	8b 50 08             	mov    0x8(%eax),%edx
c0108589:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010858c:	8b 40 04             	mov    0x4(%eax),%eax
c010858f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108593:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108597:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010859a:	89 04 24             	mov    %eax,(%esp)
c010859d:	e8 cc d5 ff ff       	call   c0105b6e <exit_range>
c01085a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01085a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01085ab:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01085ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085b4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01085b7:	75 c1                	jne    c010857a <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01085b9:	c9                   	leave  
c01085ba:	c3                   	ret    

c01085bb <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01085bb:	55                   	push   %ebp
c01085bc:	89 e5                	mov    %esp,%ebp
c01085be:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01085c1:	8b 45 10             	mov    0x10(%ebp),%eax
c01085c4:	8b 55 18             	mov    0x18(%ebp),%edx
c01085c7:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01085cb:	8b 55 14             	mov    0x14(%ebp),%edx
c01085ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01085d9:	89 04 24             	mov    %eax,(%esp)
c01085dc:	e8 99 09 00 00       	call   c0108f7a <user_mem_check>
c01085e1:	85 c0                	test   %eax,%eax
c01085e3:	75 07                	jne    c01085ec <copy_from_user+0x31>
        return 0;
c01085e5:	b8 00 00 00 00       	mov    $0x0,%eax
c01085ea:	eb 1e                	jmp    c010860a <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c01085ec:	8b 45 14             	mov    0x14(%ebp),%eax
c01085ef:	89 44 24 08          	mov    %eax,0x8(%esp)
c01085f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01085f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085fd:	89 04 24             	mov    %eax,(%esp)
c0108600:	e8 d5 ce 00 00       	call   c01154da <memcpy>
    return 1;
c0108605:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010860a:	c9                   	leave  
c010860b:	c3                   	ret    

c010860c <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c010860c:	55                   	push   %ebp
c010860d:	89 e5                	mov    %esp,%ebp
c010860f:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108612:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108615:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010861c:	00 
c010861d:	8b 55 14             	mov    0x14(%ebp),%edx
c0108620:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108624:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108628:	8b 45 08             	mov    0x8(%ebp),%eax
c010862b:	89 04 24             	mov    %eax,(%esp)
c010862e:	e8 47 09 00 00       	call   c0108f7a <user_mem_check>
c0108633:	85 c0                	test   %eax,%eax
c0108635:	75 07                	jne    c010863e <copy_to_user+0x32>
        return 0;
c0108637:	b8 00 00 00 00       	mov    $0x0,%eax
c010863c:	eb 1e                	jmp    c010865c <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c010863e:	8b 45 14             	mov    0x14(%ebp),%eax
c0108641:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108645:	8b 45 10             	mov    0x10(%ebp),%eax
c0108648:	89 44 24 04          	mov    %eax,0x4(%esp)
c010864c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010864f:	89 04 24             	mov    %eax,(%esp)
c0108652:	e8 83 ce 00 00       	call   c01154da <memcpy>
    return 1;
c0108657:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010865c:	c9                   	leave  
c010865d:	c3                   	ret    

c010865e <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c010865e:	55                   	push   %ebp
c010865f:	89 e5                	mov    %esp,%ebp
c0108661:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108664:	e8 02 00 00 00       	call   c010866b <check_vmm>
}
c0108669:	c9                   	leave  
c010866a:	c3                   	ret    

c010866b <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010866b:	55                   	push   %ebp
c010866c:	89 e5                	mov    %esp,%ebp
c010866e:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108671:	e8 48 cb ff ff       	call   c01051be <nr_free_pages>
c0108676:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108679:	e8 13 00 00 00       	call   c0108691 <check_vma_struct>
    check_pgfault();
c010867e:	e8 a7 04 00 00       	call   c0108b2a <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108683:	c7 04 24 24 71 11 c0 	movl   $0xc0117124,(%esp)
c010868a:	e8 d6 7c ff ff       	call   c0100365 <cprintf>
}
c010868f:	c9                   	leave  
c0108690:	c3                   	ret    

c0108691 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108691:	55                   	push   %ebp
c0108692:	89 e5                	mov    %esp,%ebp
c0108694:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108697:	e8 22 cb ff ff       	call   c01051be <nr_free_pages>
c010869c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c010869f:	e8 1b f8 ff ff       	call   c0107ebf <mm_create>
c01086a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01086a7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01086ab:	75 24                	jne    c01086d1 <check_vma_struct+0x40>
c01086ad:	c7 44 24 0c db 70 11 	movl   $0xc01170db,0xc(%esp)
c01086b4:	c0 
c01086b5:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c01086bc:	c0 
c01086bd:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01086c4:	00 
c01086c5:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c01086cc:	e8 e3 87 ff ff       	call   c0100eb4 <__panic>

    int step1 = 10, step2 = step1 * 10;
c01086d1:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01086d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01086db:	89 d0                	mov    %edx,%eax
c01086dd:	c1 e0 02             	shl    $0x2,%eax
c01086e0:	01 d0                	add    %edx,%eax
c01086e2:	01 c0                	add    %eax,%eax
c01086e4:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c01086e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01086ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086ed:	eb 70                	jmp    c010875f <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01086ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01086f2:	89 d0                	mov    %edx,%eax
c01086f4:	c1 e0 02             	shl    $0x2,%eax
c01086f7:	01 d0                	add    %edx,%eax
c01086f9:	83 c0 02             	add    $0x2,%eax
c01086fc:	89 c1                	mov    %eax,%ecx
c01086fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108701:	89 d0                	mov    %edx,%eax
c0108703:	c1 e0 02             	shl    $0x2,%eax
c0108706:	01 d0                	add    %edx,%eax
c0108708:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010870f:	00 
c0108710:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108714:	89 04 24             	mov    %eax,(%esp)
c0108717:	e8 48 f8 ff ff       	call   c0107f64 <vma_create>
c010871c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c010871f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108723:	75 24                	jne    c0108749 <check_vma_struct+0xb8>
c0108725:	c7 44 24 0c 3c 71 11 	movl   $0xc011713c,0xc(%esp)
c010872c:	c0 
c010872d:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108734:	c0 
c0108735:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c010873c:	00 
c010873d:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108744:	e8 6b 87 ff ff       	call   c0100eb4 <__panic>
        insert_vma_struct(mm, vma);
c0108749:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010874c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108750:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108753:	89 04 24             	mov    %eax,(%esp)
c0108756:	e8 99 f9 ff ff       	call   c01080f4 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c010875b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010875f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108763:	7f 8a                	jg     c01086ef <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108765:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108768:	83 c0 01             	add    $0x1,%eax
c010876b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010876e:	eb 70                	jmp    c01087e0 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108770:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108773:	89 d0                	mov    %edx,%eax
c0108775:	c1 e0 02             	shl    $0x2,%eax
c0108778:	01 d0                	add    %edx,%eax
c010877a:	83 c0 02             	add    $0x2,%eax
c010877d:	89 c1                	mov    %eax,%ecx
c010877f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108782:	89 d0                	mov    %edx,%eax
c0108784:	c1 e0 02             	shl    $0x2,%eax
c0108787:	01 d0                	add    %edx,%eax
c0108789:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108790:	00 
c0108791:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108795:	89 04 24             	mov    %eax,(%esp)
c0108798:	e8 c7 f7 ff ff       	call   c0107f64 <vma_create>
c010879d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01087a0:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01087a4:	75 24                	jne    c01087ca <check_vma_struct+0x139>
c01087a6:	c7 44 24 0c 3c 71 11 	movl   $0xc011713c,0xc(%esp)
c01087ad:	c0 
c01087ae:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c01087b5:	c0 
c01087b6:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01087bd:	00 
c01087be:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c01087c5:	e8 ea 86 ff ff       	call   c0100eb4 <__panic>
        insert_vma_struct(mm, vma);
c01087ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01087cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087d4:	89 04 24             	mov    %eax,(%esp)
c01087d7:	e8 18 f9 ff ff       	call   c01080f4 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01087dc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01087e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087e3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01087e6:	7e 88                	jle    c0108770 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01087e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087eb:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01087ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01087f1:	8b 40 04             	mov    0x4(%eax),%eax
c01087f4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01087f7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01087fe:	e9 97 00 00 00       	jmp    c010889a <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108803:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108806:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108809:	75 24                	jne    c010882f <check_vma_struct+0x19e>
c010880b:	c7 44 24 0c 48 71 11 	movl   $0xc0117148,0xc(%esp)
c0108812:	c0 
c0108813:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c010881a:	c0 
c010881b:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108822:	00 
c0108823:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c010882a:	e8 85 86 ff ff       	call   c0100eb4 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c010882f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108832:	83 e8 10             	sub    $0x10,%eax
c0108835:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108838:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010883b:	8b 48 04             	mov    0x4(%eax),%ecx
c010883e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108841:	89 d0                	mov    %edx,%eax
c0108843:	c1 e0 02             	shl    $0x2,%eax
c0108846:	01 d0                	add    %edx,%eax
c0108848:	39 c1                	cmp    %eax,%ecx
c010884a:	75 17                	jne    c0108863 <check_vma_struct+0x1d2>
c010884c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010884f:	8b 48 08             	mov    0x8(%eax),%ecx
c0108852:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108855:	89 d0                	mov    %edx,%eax
c0108857:	c1 e0 02             	shl    $0x2,%eax
c010885a:	01 d0                	add    %edx,%eax
c010885c:	83 c0 02             	add    $0x2,%eax
c010885f:	39 c1                	cmp    %eax,%ecx
c0108861:	74 24                	je     c0108887 <check_vma_struct+0x1f6>
c0108863:	c7 44 24 0c 60 71 11 	movl   $0xc0117160,0xc(%esp)
c010886a:	c0 
c010886b:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108872:	c0 
c0108873:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c010887a:	00 
c010887b:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108882:	e8 2d 86 ff ff       	call   c0100eb4 <__panic>
c0108887:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010888a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010888d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108890:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108893:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108896:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010889a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010889d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01088a0:	0f 8e 5d ff ff ff    	jle    c0108803 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01088a6:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c01088ad:	e9 cd 01 00 00       	jmp    c0108a7f <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c01088b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088bc:	89 04 24             	mov    %eax,(%esp)
c01088bf:	e8 db f6 ff ff       	call   c0107f9f <find_vma>
c01088c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c01088c7:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01088cb:	75 24                	jne    c01088f1 <check_vma_struct+0x260>
c01088cd:	c7 44 24 0c 95 71 11 	movl   $0xc0117195,0xc(%esp)
c01088d4:	c0 
c01088d5:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c01088dc:	c0 
c01088dd:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c01088e4:	00 
c01088e5:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c01088ec:	e8 c3 85 ff ff       	call   c0100eb4 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c01088f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088f4:	83 c0 01             	add    $0x1,%eax
c01088f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088fe:	89 04 24             	mov    %eax,(%esp)
c0108901:	e8 99 f6 ff ff       	call   c0107f9f <find_vma>
c0108906:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108909:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010890d:	75 24                	jne    c0108933 <check_vma_struct+0x2a2>
c010890f:	c7 44 24 0c a2 71 11 	movl   $0xc01171a2,0xc(%esp)
c0108916:	c0 
c0108917:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c010891e:	c0 
c010891f:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108926:	00 
c0108927:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c010892e:	e8 81 85 ff ff       	call   c0100eb4 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108933:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108936:	83 c0 02             	add    $0x2,%eax
c0108939:	89 44 24 04          	mov    %eax,0x4(%esp)
c010893d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108940:	89 04 24             	mov    %eax,(%esp)
c0108943:	e8 57 f6 ff ff       	call   c0107f9f <find_vma>
c0108948:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c010894b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010894f:	74 24                	je     c0108975 <check_vma_struct+0x2e4>
c0108951:	c7 44 24 0c af 71 11 	movl   $0xc01171af,0xc(%esp)
c0108958:	c0 
c0108959:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108960:	c0 
c0108961:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108968:	00 
c0108969:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108970:	e8 3f 85 ff ff       	call   c0100eb4 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108975:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108978:	83 c0 03             	add    $0x3,%eax
c010897b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010897f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108982:	89 04 24             	mov    %eax,(%esp)
c0108985:	e8 15 f6 ff ff       	call   c0107f9f <find_vma>
c010898a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c010898d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108991:	74 24                	je     c01089b7 <check_vma_struct+0x326>
c0108993:	c7 44 24 0c bc 71 11 	movl   $0xc01171bc,0xc(%esp)
c010899a:	c0 
c010899b:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c01089a2:	c0 
c01089a3:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c01089aa:	00 
c01089ab:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c01089b2:	e8 fd 84 ff ff       	call   c0100eb4 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c01089b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089ba:	83 c0 04             	add    $0x4,%eax
c01089bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089c4:	89 04 24             	mov    %eax,(%esp)
c01089c7:	e8 d3 f5 ff ff       	call   c0107f9f <find_vma>
c01089cc:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c01089cf:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c01089d3:	74 24                	je     c01089f9 <check_vma_struct+0x368>
c01089d5:	c7 44 24 0c c9 71 11 	movl   $0xc01171c9,0xc(%esp)
c01089dc:	c0 
c01089dd:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c01089e4:	c0 
c01089e5:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c01089ec:	00 
c01089ed:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c01089f4:	e8 bb 84 ff ff       	call   c0100eb4 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c01089f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01089fc:	8b 50 04             	mov    0x4(%eax),%edx
c01089ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a02:	39 c2                	cmp    %eax,%edx
c0108a04:	75 10                	jne    c0108a16 <check_vma_struct+0x385>
c0108a06:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a09:	8b 50 08             	mov    0x8(%eax),%edx
c0108a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a0f:	83 c0 02             	add    $0x2,%eax
c0108a12:	39 c2                	cmp    %eax,%edx
c0108a14:	74 24                	je     c0108a3a <check_vma_struct+0x3a9>
c0108a16:	c7 44 24 0c d8 71 11 	movl   $0xc01171d8,0xc(%esp)
c0108a1d:	c0 
c0108a1e:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108a25:	c0 
c0108a26:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108a2d:	00 
c0108a2e:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108a35:	e8 7a 84 ff ff       	call   c0100eb4 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108a3a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108a3d:	8b 50 04             	mov    0x4(%eax),%edx
c0108a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a43:	39 c2                	cmp    %eax,%edx
c0108a45:	75 10                	jne    c0108a57 <check_vma_struct+0x3c6>
c0108a47:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108a4a:	8b 50 08             	mov    0x8(%eax),%edx
c0108a4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a50:	83 c0 02             	add    $0x2,%eax
c0108a53:	39 c2                	cmp    %eax,%edx
c0108a55:	74 24                	je     c0108a7b <check_vma_struct+0x3ea>
c0108a57:	c7 44 24 0c 08 72 11 	movl   $0xc0117208,0xc(%esp)
c0108a5e:	c0 
c0108a5f:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108a66:	c0 
c0108a67:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108a6e:	00 
c0108a6f:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108a76:	e8 39 84 ff ff       	call   c0100eb4 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108a7b:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108a7f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108a82:	89 d0                	mov    %edx,%eax
c0108a84:	c1 e0 02             	shl    $0x2,%eax
c0108a87:	01 d0                	add    %edx,%eax
c0108a89:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108a8c:	0f 8d 20 fe ff ff    	jge    c01088b2 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108a92:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108a99:	eb 70                	jmp    c0108b0b <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108aa2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108aa5:	89 04 24             	mov    %eax,(%esp)
c0108aa8:	e8 f2 f4 ff ff       	call   c0107f9f <find_vma>
c0108aad:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108ab0:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108ab4:	74 27                	je     c0108add <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108ab6:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108ab9:	8b 50 08             	mov    0x8(%eax),%edx
c0108abc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108abf:	8b 40 04             	mov    0x4(%eax),%eax
c0108ac2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108ac6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108acd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ad1:	c7 04 24 38 72 11 c0 	movl   $0xc0117238,(%esp)
c0108ad8:	e8 88 78 ff ff       	call   c0100365 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108add:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108ae1:	74 24                	je     c0108b07 <check_vma_struct+0x476>
c0108ae3:	c7 44 24 0c 5d 72 11 	movl   $0xc011725d,0xc(%esp)
c0108aea:	c0 
c0108aeb:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108af2:	c0 
c0108af3:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108afa:	00 
c0108afb:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108b02:	e8 ad 83 ff ff       	call   c0100eb4 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b07:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108b0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108b0f:	79 8a                	jns    c0108a9b <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108b11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b14:	89 04 24             	mov    %eax,(%esp)
c0108b17:	e8 08 f7 ff ff       	call   c0108224 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108b1c:	c7 04 24 74 72 11 c0 	movl   $0xc0117274,(%esp)
c0108b23:	e8 3d 78 ff ff       	call   c0100365 <cprintf>
}
c0108b28:	c9                   	leave  
c0108b29:	c3                   	ret    

c0108b2a <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108b2a:	55                   	push   %ebp
c0108b2b:	89 e5                	mov    %esp,%ebp
c0108b2d:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108b30:	e8 89 c6 ff ff       	call   c01051be <nr_free_pages>
c0108b35:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108b38:	e8 82 f3 ff ff       	call   c0107ebf <mm_create>
c0108b3d:	a3 0c 31 15 c0       	mov    %eax,0xc015310c
    assert(check_mm_struct != NULL);
c0108b42:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0108b47:	85 c0                	test   %eax,%eax
c0108b49:	75 24                	jne    c0108b6f <check_pgfault+0x45>
c0108b4b:	c7 44 24 0c 93 72 11 	movl   $0xc0117293,0xc(%esp)
c0108b52:	c0 
c0108b53:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108b5a:	c0 
c0108b5b:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108b62:	00 
c0108b63:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108b6a:	e8 45 83 ff ff       	call   c0100eb4 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108b6f:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0108b74:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108b77:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c0108b7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b80:	89 50 0c             	mov    %edx,0xc(%eax)
c0108b83:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b86:	8b 40 0c             	mov    0xc(%eax),%eax
c0108b89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108b8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b8f:	8b 00                	mov    (%eax),%eax
c0108b91:	85 c0                	test   %eax,%eax
c0108b93:	74 24                	je     c0108bb9 <check_pgfault+0x8f>
c0108b95:	c7 44 24 0c ab 72 11 	movl   $0xc01172ab,0xc(%esp)
c0108b9c:	c0 
c0108b9d:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108ba4:	c0 
c0108ba5:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108bac:	00 
c0108bad:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108bb4:	e8 fb 82 ff ff       	call   c0100eb4 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108bb9:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108bc0:	00 
c0108bc1:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108bc8:	00 
c0108bc9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108bd0:	e8 8f f3 ff ff       	call   c0107f64 <vma_create>
c0108bd5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108bd8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108bdc:	75 24                	jne    c0108c02 <check_pgfault+0xd8>
c0108bde:	c7 44 24 0c 3c 71 11 	movl   $0xc011713c,0xc(%esp)
c0108be5:	c0 
c0108be6:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108bed:	c0 
c0108bee:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108bf5:	00 
c0108bf6:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108bfd:	e8 b2 82 ff ff       	call   c0100eb4 <__panic>

    insert_vma_struct(mm, vma);
c0108c02:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108c05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c0c:	89 04 24             	mov    %eax,(%esp)
c0108c0f:	e8 e0 f4 ff ff       	call   c01080f4 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108c14:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108c1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c22:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c25:	89 04 24             	mov    %eax,(%esp)
c0108c28:	e8 72 f3 ff ff       	call   c0107f9f <find_vma>
c0108c2d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108c30:	74 24                	je     c0108c56 <check_pgfault+0x12c>
c0108c32:	c7 44 24 0c b9 72 11 	movl   $0xc01172b9,0xc(%esp)
c0108c39:	c0 
c0108c3a:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108c41:	c0 
c0108c42:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108c49:	00 
c0108c4a:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108c51:	e8 5e 82 ff ff       	call   c0100eb4 <__panic>

    int i, sum = 0;
c0108c56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108c5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c64:	eb 17                	jmp    c0108c7d <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108c66:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c69:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c6c:	01 d0                	add    %edx,%eax
c0108c6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c71:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c76:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108c79:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c7d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108c81:	7e e3                	jle    c0108c66 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108c83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c8a:	eb 15                	jmp    c0108ca1 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108c8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c92:	01 d0                	add    %edx,%eax
c0108c94:	0f b6 00             	movzbl (%eax),%eax
c0108c97:	0f be c0             	movsbl %al,%eax
c0108c9a:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108c9d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108ca1:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108ca5:	7e e5                	jle    c0108c8c <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108ca7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108cab:	74 24                	je     c0108cd1 <check_pgfault+0x1a7>
c0108cad:	c7 44 24 0c d3 72 11 	movl   $0xc01172d3,0xc(%esp)
c0108cb4:	c0 
c0108cb5:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108cbc:	c0 
c0108cbd:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108cc4:	00 
c0108cc5:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108ccc:	e8 e3 81 ff ff       	call   c0100eb4 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108cd1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108cd4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108cd7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108cda:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108cdf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ce3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ce6:	89 04 24             	mov    %eax,(%esp)
c0108ce9:	e8 aa d1 ff ff       	call   c0105e98 <page_remove>
    free_page(pa2page(pgdir[0]));
c0108cee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108cf1:	8b 00                	mov    (%eax),%eax
c0108cf3:	89 04 24             	mov    %eax,(%esp)
c0108cf6:	e8 7f f1 ff ff       	call   c0107e7a <pa2page>
c0108cfb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108d02:	00 
c0108d03:	89 04 24             	mov    %eax,(%esp)
c0108d06:	e8 81 c4 ff ff       	call   c010518c <free_pages>
    pgdir[0] = 0;
c0108d0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108d14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d17:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d21:	89 04 24             	mov    %eax,(%esp)
c0108d24:	e8 fb f4 ff ff       	call   c0108224 <mm_destroy>
    check_mm_struct = NULL;
c0108d29:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c0108d30:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108d33:	e8 86 c4 ff ff       	call   c01051be <nr_free_pages>
c0108d38:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108d3b:	74 24                	je     c0108d61 <check_pgfault+0x237>
c0108d3d:	c7 44 24 0c dc 72 11 	movl   $0xc01172dc,0xc(%esp)
c0108d44:	c0 
c0108d45:	c7 44 24 08 4b 70 11 	movl   $0xc011704b,0x8(%esp)
c0108d4c:	c0 
c0108d4d:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108d54:	00 
c0108d55:	c7 04 24 60 70 11 c0 	movl   $0xc0117060,(%esp)
c0108d5c:	e8 53 81 ff ff       	call   c0100eb4 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108d61:	c7 04 24 03 73 11 c0 	movl   $0xc0117303,(%esp)
c0108d68:	e8 f8 75 ff ff       	call   c0100365 <cprintf>
}
c0108d6d:	c9                   	leave  
c0108d6e:	c3                   	ret    

c0108d6f <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108d6f:	55                   	push   %ebp
c0108d70:	89 e5                	mov    %esp,%ebp
c0108d72:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108d75:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108d7c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d83:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d86:	89 04 24             	mov    %eax,(%esp)
c0108d89:	e8 11 f2 ff ff       	call   c0107f9f <find_vma>
c0108d8e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108d91:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0108d96:	83 c0 01             	add    $0x1,%eax
c0108d99:	a3 18 ff 14 c0       	mov    %eax,0xc014ff18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108d9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108da2:	74 0b                	je     c0108daf <do_pgfault+0x40>
c0108da4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108da7:	8b 40 04             	mov    0x4(%eax),%eax
c0108daa:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108dad:	76 18                	jbe    c0108dc7 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108daf:	8b 45 10             	mov    0x10(%ebp),%eax
c0108db2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108db6:	c7 04 24 20 73 11 c0 	movl   $0xc0117320,(%esp)
c0108dbd:	e8 a3 75 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108dc2:	e9 ae 01 00 00       	jmp    c0108f75 <do_pgfault+0x206>
    }
    //check the error_code
    switch (error_code & 3) {
c0108dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108dca:	83 e0 03             	and    $0x3,%eax
c0108dcd:	85 c0                	test   %eax,%eax
c0108dcf:	74 36                	je     c0108e07 <do_pgfault+0x98>
c0108dd1:	83 f8 01             	cmp    $0x1,%eax
c0108dd4:	74 20                	je     c0108df6 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108dd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108dd9:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ddc:	83 e0 02             	and    $0x2,%eax
c0108ddf:	85 c0                	test   %eax,%eax
c0108de1:	75 11                	jne    c0108df4 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108de3:	c7 04 24 50 73 11 c0 	movl   $0xc0117350,(%esp)
c0108dea:	e8 76 75 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108def:	e9 81 01 00 00       	jmp    c0108f75 <do_pgfault+0x206>
        }
        break;
c0108df4:	eb 2f                	jmp    c0108e25 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108df6:	c7 04 24 b0 73 11 c0 	movl   $0xc01173b0,(%esp)
c0108dfd:	e8 63 75 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108e02:	e9 6e 01 00 00       	jmp    c0108f75 <do_pgfault+0x206>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e0a:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e0d:	83 e0 05             	and    $0x5,%eax
c0108e10:	85 c0                	test   %eax,%eax
c0108e12:	75 11                	jne    c0108e25 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108e14:	c7 04 24 e8 73 11 c0 	movl   $0xc01173e8,(%esp)
c0108e1b:	e8 45 75 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108e20:	e9 50 01 00 00       	jmp    c0108f75 <do_pgfault+0x206>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108e25:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108e2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e2f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e32:	83 e0 02             	and    $0x2,%eax
c0108e35:	85 c0                	test   %eax,%eax
c0108e37:	74 04                	je     c0108e3d <do_pgfault+0xce>
        perm |= PTE_W;
c0108e39:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108e3d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e40:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108e43:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e46:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108e4b:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108e4e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108e55:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            goto failed;
        }
   }
#endif
       //练习一代码
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {//尝试找到pte，若对应的页表项不存在，则转去创建一个页表项
c0108e5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e5f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e62:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108e69:	00 
c0108e6a:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e6d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e71:	89 04 24             	mov    %eax,(%esp)
c0108e74:	e8 0f ca ff ff       	call   c0105888 <get_pte>
c0108e79:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108e7c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108e80:	75 11                	jne    c0108e93 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");//找不到入口，非法访问，退出
c0108e82:	c7 04 24 4b 74 11 c0 	movl   $0xc011744b,(%esp)
c0108e89:	e8 d7 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108e8e:	e9 e2 00 00 00       	jmp    c0108f75 <do_pgfault+0x206>
    }

    if (*ptep == 0) { // 若页表项所指示的物理地址不存在，此时则需要建立一个逻辑地址和物理地址的映射。
c0108e93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e96:	8b 00                	mov    (%eax),%eax
c0108e98:	85 c0                	test   %eax,%eax
c0108e9a:	75 35                	jne    c0108ed1 <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {//尝试申请一个页，若申请失败则代表内存不足，退出。
c0108e9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e9f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ea2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108ea5:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108ea9:	8b 55 10             	mov    0x10(%ebp),%edx
c0108eac:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108eb0:	89 04 24             	mov    %eax,(%esp)
c0108eb3:	e8 3a d1 ff ff       	call   c0105ff2 <pgdir_alloc_page>
c0108eb8:	85 c0                	test   %eax,%eax
c0108eba:	0f 85 ae 00 00 00    	jne    c0108f6e <do_pgfault+0x1ff>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108ec0:	c7 04 24 6c 74 11 c0 	movl   $0xc011746c,(%esp)
c0108ec7:	e8 99 74 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108ecc:	e9 a4 00 00 00       	jmp    c0108f75 <do_pgfault+0x206>
        }
    }
    else { // 页表项非空，可以尝试换入页面
        if(swap_init_ok) {//pte是需要交换的表项
c0108ed1:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0108ed6:	85 c0                	test   %eax,%eax
c0108ed8:	74 7d                	je     c0108f57 <do_pgfault+0x1e8>
            struct Page *page=NULL;//创建一个新页
c0108eda:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            if ((ret = swap_in(mm, addr, &page)) != 0) {//利用mm结构和addr地址，尝试将硬盘中的内容换入到新的page中
c0108ee1:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108ee4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ee8:	8b 45 10             	mov    0x10(%ebp),%eax
c0108eeb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108eef:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ef2:	89 04 24             	mov    %eax,(%esp)
c0108ef5:	e8 91 e1 ff ff       	call   c010708b <swap_in>
c0108efa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108efd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f01:	74 0e                	je     c0108f11 <do_pgfault+0x1a2>
                cprintf("swap_in in do_pgfault failed\n");//若失败，则退出
c0108f03:	c7 04 24 93 74 11 c0 	movl   $0xc0117493,(%esp)
c0108f0a:	e8 56 74 ff ff       	call   c0100365 <cprintf>
c0108f0f:	eb 64                	jmp    c0108f75 <do_pgfault+0x206>
                goto failed;
            }    
            page_insert(mm->pgdir, page, addr, perm);//将该页面插入到队列之中，并且建立虚拟地址与物理地址间的对应关系
c0108f11:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f14:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f17:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f1a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108f1d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108f21:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108f24:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108f28:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f2c:	89 04 24             	mov    %eax,(%esp)
c0108f2f:	e8 a8 cf ff ff       	call   c0105edc <page_insert>
            swap_map_swappable(mm, addr, page, 1);//设置该页面为可交换的
c0108f34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108f37:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108f3e:	00 
c0108f3f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f43:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f46:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f4d:	89 04 24             	mov    %eax,(%esp)
c0108f50:	e8 6d df ff ff       	call   c0106ec2 <swap_map_swappable>
c0108f55:	eb 17                	jmp    c0108f6e <do_pgfault+0x1ff>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108f57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f5a:	8b 00                	mov    (%eax),%eax
c0108f5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f60:	c7 04 24 b4 74 11 c0 	movl   $0xc01174b4,(%esp)
c0108f67:	e8 f9 73 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108f6c:	eb 07                	jmp    c0108f75 <do_pgfault+0x206>
        }
   }

   ret = 0;
c0108f6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108f78:	c9                   	leave  
c0108f79:	c3                   	ret    

c0108f7a <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108f7a:	55                   	push   %ebp
c0108f7b:	89 e5                	mov    %esp,%ebp
c0108f7d:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108f80:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108f84:	0f 84 e0 00 00 00    	je     c010906a <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108f8a:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108f91:	76 1c                	jbe    c0108faf <user_mem_check+0x35>
c0108f93:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f96:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f99:	01 d0                	add    %edx,%eax
c0108f9b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108f9e:	76 0f                	jbe    c0108faf <user_mem_check+0x35>
c0108fa0:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fa3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108fa6:	01 d0                	add    %edx,%eax
c0108fa8:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0108fad:	76 0a                	jbe    c0108fb9 <user_mem_check+0x3f>
            return 0;
c0108faf:	b8 00 00 00 00       	mov    $0x0,%eax
c0108fb4:	e9 e2 00 00 00       	jmp    c010909b <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0108fb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108fbc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108fbf:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fc2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108fc5:	01 d0                	add    %edx,%eax
c0108fc7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0108fca:	e9 88 00 00 00       	jmp    c0109057 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0108fcf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108fd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fd9:	89 04 24             	mov    %eax,(%esp)
c0108fdc:	e8 be ef ff ff       	call   c0107f9f <find_vma>
c0108fe1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108fe4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108fe8:	74 0b                	je     c0108ff5 <user_mem_check+0x7b>
c0108fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fed:	8b 40 04             	mov    0x4(%eax),%eax
c0108ff0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108ff3:	76 0a                	jbe    c0108fff <user_mem_check+0x85>
                return 0;
c0108ff5:	b8 00 00 00 00       	mov    $0x0,%eax
c0108ffa:	e9 9c 00 00 00       	jmp    c010909b <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0108fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109002:	8b 50 0c             	mov    0xc(%eax),%edx
c0109005:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109009:	74 07                	je     c0109012 <user_mem_check+0x98>
c010900b:	b8 02 00 00 00       	mov    $0x2,%eax
c0109010:	eb 05                	jmp    c0109017 <user_mem_check+0x9d>
c0109012:	b8 01 00 00 00       	mov    $0x1,%eax
c0109017:	21 d0                	and    %edx,%eax
c0109019:	85 c0                	test   %eax,%eax
c010901b:	75 07                	jne    c0109024 <user_mem_check+0xaa>
                return 0;
c010901d:	b8 00 00 00 00       	mov    $0x0,%eax
c0109022:	eb 77                	jmp    c010909b <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109024:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109028:	74 24                	je     c010904e <user_mem_check+0xd4>
c010902a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010902d:	8b 40 0c             	mov    0xc(%eax),%eax
c0109030:	83 e0 08             	and    $0x8,%eax
c0109033:	85 c0                	test   %eax,%eax
c0109035:	74 17                	je     c010904e <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0109037:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010903a:	8b 40 04             	mov    0x4(%eax),%eax
c010903d:	05 00 10 00 00       	add    $0x1000,%eax
c0109042:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109045:	76 07                	jbe    c010904e <user_mem_check+0xd4>
                    return 0;
c0109047:	b8 00 00 00 00       	mov    $0x0,%eax
c010904c:	eb 4d                	jmp    c010909b <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c010904e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109051:	8b 40 08             	mov    0x8(%eax),%eax
c0109054:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0109057:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010905a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010905d:	0f 82 6c ff ff ff    	jb     c0108fcf <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109063:	b8 01 00 00 00       	mov    $0x1,%eax
c0109068:	eb 31                	jmp    c010909b <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010906a:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109071:	76 23                	jbe    c0109096 <user_mem_check+0x11c>
c0109073:	8b 45 10             	mov    0x10(%ebp),%eax
c0109076:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109079:	01 d0                	add    %edx,%eax
c010907b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010907e:	76 16                	jbe    c0109096 <user_mem_check+0x11c>
c0109080:	8b 45 10             	mov    0x10(%ebp),%eax
c0109083:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109086:	01 d0                	add    %edx,%eax
c0109088:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010908d:	77 07                	ja     c0109096 <user_mem_check+0x11c>
c010908f:	b8 01 00 00 00       	mov    $0x1,%eax
c0109094:	eb 05                	jmp    c010909b <user_mem_check+0x121>
c0109096:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010909b:	c9                   	leave  
c010909c:	c3                   	ret    

c010909d <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c010909d:	55                   	push   %ebp
c010909e:	89 e5                	mov    %esp,%ebp
c01090a0:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c01090a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01090a6:	05 00 10 00 00       	add    $0x1000,%eax
c01090ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01090ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090b1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01090b6:	89 c2                	mov    %eax,%edx
c01090b8:	8b 45 10             	mov    0x10(%ebp),%eax
c01090bb:	29 c2                	sub    %eax,%edx
c01090bd:	89 d0                	mov    %edx,%eax
c01090bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c01090c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090c5:	3b 45 14             	cmp    0x14(%ebp),%eax
c01090c8:	76 06                	jbe    c01090d0 <copy_string+0x33>
            part = maxn;
c01090ca:	8b 45 14             	mov    0x14(%ebp),%eax
c01090cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c01090d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01090d3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01090da:	00 
c01090db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01090de:	89 54 24 08          	mov    %edx,0x8(%esp)
c01090e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01090e9:	89 04 24             	mov    %eax,(%esp)
c01090ec:	e8 89 fe ff ff       	call   c0108f7a <user_mem_check>
c01090f1:	85 c0                	test   %eax,%eax
c01090f3:	75 0a                	jne    c01090ff <copy_string+0x62>
            return 0;
c01090f5:	b8 00 00 00 00       	mov    $0x0,%eax
c01090fa:	e9 86 00 00 00       	jmp    c0109185 <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c01090ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109102:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109106:	8b 45 10             	mov    0x10(%ebp),%eax
c0109109:	89 04 24             	mov    %eax,(%esp)
c010910c:	e8 b9 bf 00 00       	call   c01150ca <strnlen>
c0109111:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109114:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109117:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010911a:	73 23                	jae    c010913f <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c010911c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010911f:	83 c0 01             	add    $0x1,%eax
c0109122:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109126:	8b 45 10             	mov    0x10(%ebp),%eax
c0109129:	89 44 24 04          	mov    %eax,0x4(%esp)
c010912d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109130:	89 04 24             	mov    %eax,(%esp)
c0109133:	e8 a2 c3 00 00       	call   c01154da <memcpy>
            return 1;
c0109138:	b8 01 00 00 00       	mov    $0x1,%eax
c010913d:	eb 46                	jmp    c0109185 <copy_string+0xe8>
        }
        if (part == maxn) {
c010913f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109142:	3b 45 14             	cmp    0x14(%ebp),%eax
c0109145:	75 07                	jne    c010914e <copy_string+0xb1>
            return 0;
c0109147:	b8 00 00 00 00       	mov    $0x0,%eax
c010914c:	eb 37                	jmp    c0109185 <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c010914e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109151:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109155:	8b 45 10             	mov    0x10(%ebp),%eax
c0109158:	89 44 24 04          	mov    %eax,0x4(%esp)
c010915c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010915f:	89 04 24             	mov    %eax,(%esp)
c0109162:	e8 73 c3 00 00       	call   c01154da <memcpy>
        dst += part, src += part, maxn -= part;
c0109167:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010916a:	01 45 0c             	add    %eax,0xc(%ebp)
c010916d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109170:	01 45 10             	add    %eax,0x10(%ebp)
c0109173:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109176:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c0109179:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0109180:	e9 3d ff ff ff       	jmp    c01090c2 <copy_string+0x25>
}
c0109185:	c9                   	leave  
c0109186:	c3                   	ret    

c0109187 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0109187:	55                   	push   %ebp
c0109188:	89 e5                	mov    %esp,%ebp
c010918a:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c010918d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109190:	8b 04 85 20 31 15 c0 	mov    -0x3feacee0(,%eax,4),%eax
c0109197:	83 f8 01             	cmp    $0x1,%eax
c010919a:	0f 85 85 00 00 00    	jne    c0109225 <phi_test_sema+0x9e>
c01091a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01091a3:	8d 48 04             	lea    0x4(%eax),%ecx
c01091a6:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01091ab:	89 c8                	mov    %ecx,%eax
c01091ad:	f7 ea                	imul   %edx
c01091af:	d1 fa                	sar    %edx
c01091b1:	89 c8                	mov    %ecx,%eax
c01091b3:	c1 f8 1f             	sar    $0x1f,%eax
c01091b6:	29 c2                	sub    %eax,%edx
c01091b8:	89 d0                	mov    %edx,%eax
c01091ba:	c1 e0 02             	shl    $0x2,%eax
c01091bd:	01 d0                	add    %edx,%eax
c01091bf:	29 c1                	sub    %eax,%ecx
c01091c1:	89 ca                	mov    %ecx,%edx
c01091c3:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c01091ca:	83 f8 02             	cmp    $0x2,%eax
c01091cd:	74 56                	je     c0109225 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c01091cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01091d2:	8d 48 01             	lea    0x1(%eax),%ecx
c01091d5:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01091da:	89 c8                	mov    %ecx,%eax
c01091dc:	f7 ea                	imul   %edx
c01091de:	d1 fa                	sar    %edx
c01091e0:	89 c8                	mov    %ecx,%eax
c01091e2:	c1 f8 1f             	sar    $0x1f,%eax
c01091e5:	29 c2                	sub    %eax,%edx
c01091e7:	89 d0                	mov    %edx,%eax
c01091e9:	c1 e0 02             	shl    $0x2,%eax
c01091ec:	01 d0                	add    %edx,%eax
c01091ee:	29 c1                	sub    %eax,%ecx
c01091f0:	89 ca                	mov    %ecx,%edx
c01091f2:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c01091f9:	83 f8 02             	cmp    $0x2,%eax
c01091fc:	74 27                	je     c0109225 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01091fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109201:	c7 04 85 20 31 15 c0 	movl   $0x2,-0x3feacee0(,%eax,4)
c0109208:	02 00 00 00 
        up(&s[i]);
c010920c:	8b 55 08             	mov    0x8(%ebp),%edx
c010920f:	89 d0                	mov    %edx,%eax
c0109211:	01 c0                	add    %eax,%eax
c0109213:	01 d0                	add    %edx,%eax
c0109215:	c1 e0 02             	shl    $0x2,%eax
c0109218:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c010921d:	89 04 24             	mov    %eax,(%esp)
c0109220:	e8 d7 09 00 00       	call   c0109bfc <up>
    }
}
c0109225:	c9                   	leave  
c0109226:	c3                   	ret    

c0109227 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109227:	55                   	push   %ebp
c0109228:	89 e5                	mov    %esp,%ebp
c010922a:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010922d:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109234:	e8 de 09 00 00       	call   c0109c17 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0109239:	8b 45 08             	mov    0x8(%ebp),%eax
c010923c:	c7 04 85 20 31 15 c0 	movl   $0x1,-0x3feacee0(,%eax,4)
c0109243:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0109247:	8b 45 08             	mov    0x8(%ebp),%eax
c010924a:	89 04 24             	mov    %eax,(%esp)
c010924d:	e8 35 ff ff ff       	call   c0109187 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109252:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109259:	e8 9e 09 00 00       	call   c0109bfc <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c010925e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109261:	89 d0                	mov    %edx,%eax
c0109263:	01 c0                	add    %eax,%eax
c0109265:	01 d0                	add    %edx,%eax
c0109267:	c1 e0 02             	shl    $0x2,%eax
c010926a:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c010926f:	89 04 24             	mov    %eax,(%esp)
c0109272:	e8 a0 09 00 00       	call   c0109c17 <down>
}
c0109277:	c9                   	leave  
c0109278:	c3                   	ret    

c0109279 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109279:	55                   	push   %ebp
c010927a:	89 e5                	mov    %esp,%ebp
c010927c:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010927f:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109286:	e8 8c 09 00 00       	call   c0109c17 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c010928b:	8b 45 08             	mov    0x8(%ebp),%eax
c010928e:	c7 04 85 20 31 15 c0 	movl   $0x0,-0x3feacee0(,%eax,4)
c0109295:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0109299:	8b 45 08             	mov    0x8(%ebp),%eax
c010929c:	8d 48 04             	lea    0x4(%eax),%ecx
c010929f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092a4:	89 c8                	mov    %ecx,%eax
c01092a6:	f7 ea                	imul   %edx
c01092a8:	d1 fa                	sar    %edx
c01092aa:	89 c8                	mov    %ecx,%eax
c01092ac:	c1 f8 1f             	sar    $0x1f,%eax
c01092af:	29 c2                	sub    %eax,%edx
c01092b1:	89 d0                	mov    %edx,%eax
c01092b3:	c1 e0 02             	shl    $0x2,%eax
c01092b6:	01 d0                	add    %edx,%eax
c01092b8:	29 c1                	sub    %eax,%ecx
c01092ba:	89 ca                	mov    %ecx,%edx
c01092bc:	89 14 24             	mov    %edx,(%esp)
c01092bf:	e8 c3 fe ff ff       	call   c0109187 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c01092c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01092c7:	8d 48 01             	lea    0x1(%eax),%ecx
c01092ca:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092cf:	89 c8                	mov    %ecx,%eax
c01092d1:	f7 ea                	imul   %edx
c01092d3:	d1 fa                	sar    %edx
c01092d5:	89 c8                	mov    %ecx,%eax
c01092d7:	c1 f8 1f             	sar    $0x1f,%eax
c01092da:	29 c2                	sub    %eax,%edx
c01092dc:	89 d0                	mov    %edx,%eax
c01092de:	c1 e0 02             	shl    $0x2,%eax
c01092e1:	01 d0                	add    %edx,%eax
c01092e3:	29 c1                	sub    %eax,%ecx
c01092e5:	89 ca                	mov    %ecx,%edx
c01092e7:	89 14 24             	mov    %edx,(%esp)
c01092ea:	e8 98 fe ff ff       	call   c0109187 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01092ef:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01092f6:	e8 01 09 00 00       	call   c0109bfc <up>
}
c01092fb:	c9                   	leave  
c01092fc:	c3                   	ret    

c01092fd <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01092fd:	55                   	push   %ebp
c01092fe:	89 e5                	mov    %esp,%ebp
c0109300:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c0109303:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010930a:	8b 45 08             	mov    0x8(%ebp),%eax
c010930d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0109310:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109313:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109317:	c7 04 24 dc 74 11 c0 	movl   $0xc01174dc,(%esp)
c010931e:	e8 42 70 ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c0109323:	eb 62                	jmp    c0109387 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0109325:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109328:	89 44 24 08          	mov    %eax,0x8(%esp)
c010932c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010932f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109333:	c7 04 24 fc 74 11 c0 	movl   $0xc01174fc,(%esp)
c010933a:	e8 26 70 ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c010933f:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109346:	e8 d8 4b 00 00       	call   c010df23 <do_sleep>
        phi_take_forks_sema(i); 
c010934b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010934e:	89 04 24             	mov    %eax,(%esp)
c0109351:	e8 d1 fe ff ff       	call   c0109227 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0109356:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109359:	89 44 24 08          	mov    %eax,0x8(%esp)
c010935d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109360:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109364:	c7 04 24 2c 75 11 c0 	movl   $0xc011752c,(%esp)
c010936b:	e8 f5 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109370:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109377:	e8 a7 4b 00 00       	call   c010df23 <do_sleep>
        phi_put_forks_sema(i); 
c010937c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010937f:	89 04 24             	mov    %eax,(%esp)
c0109382:	e8 f2 fe ff ff       	call   c0109279 <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0109387:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010938a:	8d 50 01             	lea    0x1(%eax),%edx
c010938d:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109390:	83 f8 03             	cmp    $0x3,%eax
c0109393:	7e 90                	jle    c0109325 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0109395:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109398:	89 44 24 04          	mov    %eax,0x4(%esp)
c010939c:	c7 04 24 57 75 11 c0 	movl   $0xc0117557,(%esp)
c01093a3:	e8 bd 6f ff ff       	call   c0100365 <cprintf>
    return 0;    
c01093a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01093ad:	c9                   	leave  
c01093ae:	c3                   	ret    

c01093af <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c01093af:	55                   	push   %ebp
c01093b0:	89 e5                	mov    %esp,%ebp
c01093b2:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c01093b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01093b8:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c01093bf:	83 f8 01             	cmp    $0x1,%eax
c01093c2:	0f 85 b5 00 00 00    	jne    c010947d <phi_test_condvar+0xce>
c01093c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01093cb:	8d 48 04             	lea    0x4(%eax),%ecx
c01093ce:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093d3:	89 c8                	mov    %ecx,%eax
c01093d5:	f7 ea                	imul   %edx
c01093d7:	d1 fa                	sar    %edx
c01093d9:	89 c8                	mov    %ecx,%eax
c01093db:	c1 f8 1f             	sar    $0x1f,%eax
c01093de:	29 c2                	sub    %eax,%edx
c01093e0:	89 d0                	mov    %edx,%eax
c01093e2:	c1 e0 02             	shl    $0x2,%eax
c01093e5:	01 d0                	add    %edx,%eax
c01093e7:	29 c1                	sub    %eax,%ecx
c01093e9:	89 ca                	mov    %ecx,%edx
c01093eb:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c01093f2:	83 f8 02             	cmp    $0x2,%eax
c01093f5:	0f 84 82 00 00 00    	je     c010947d <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01093fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01093fe:	8d 48 01             	lea    0x1(%eax),%ecx
c0109401:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109406:	89 c8                	mov    %ecx,%eax
c0109408:	f7 ea                	imul   %edx
c010940a:	d1 fa                	sar    %edx
c010940c:	89 c8                	mov    %ecx,%eax
c010940e:	c1 f8 1f             	sar    $0x1f,%eax
c0109411:	29 c2                	sub    %eax,%edx
c0109413:	89 d0                	mov    %edx,%eax
c0109415:	c1 e0 02             	shl    $0x2,%eax
c0109418:	01 d0                	add    %edx,%eax
c010941a:	29 c1                	sub    %eax,%ecx
c010941c:	89 ca                	mov    %ecx,%edx
c010941e:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c0109425:	83 f8 02             	cmp    $0x2,%eax
c0109428:	74 53                	je     c010947d <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c010942a:	8b 45 08             	mov    0x8(%ebp),%eax
c010942d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109431:	c7 04 24 74 75 11 c0 	movl   $0xc0117574,(%esp)
c0109438:	e8 28 6f ff ff       	call   c0100365 <cprintf>
        state_condvar[i] = EATING ;
c010943d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109440:	c7 04 85 80 31 15 c0 	movl   $0x2,-0x3feace80(,%eax,4)
c0109447:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c010944b:	8b 45 08             	mov    0x8(%ebp),%eax
c010944e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109452:	c7 04 24 a8 75 11 c0 	movl   $0xc01175a8,(%esp)
c0109459:	e8 07 6f ff ff       	call   c0100365 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c010945e:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109463:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109466:	8b 55 08             	mov    0x8(%ebp),%edx
c0109469:	89 d0                	mov    %edx,%eax
c010946b:	c1 e0 02             	shl    $0x2,%eax
c010946e:	01 d0                	add    %edx,%eax
c0109470:	c1 e0 02             	shl    $0x2,%eax
c0109473:	01 c8                	add    %ecx,%eax
c0109475:	89 04 24             	mov    %eax,(%esp)
c0109478:	e8 7c 04 00 00       	call   c01098f9 <cond_signal>
    }
}
c010947d:	c9                   	leave  
c010947e:	c3                   	ret    

c010947f <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c010947f:	55                   	push   %ebp
c0109480:	89 e5                	mov    %esp,%ebp
c0109482:	83 ec 18             	sub    $0x18,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
//--------leave routine in monitor--------------
    down(&(mtp->mutex));    // P操作进入临界区
c0109485:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010948a:	89 04 24             	mov    %eax,(%esp)
c010948d:	e8 85 07 00 00       	call   c0109c17 <down>
    state_condvar[i] = HUNGRY; // 饥饿状态,准备进食
c0109492:	8b 45 08             	mov    0x8(%ebp),%eax
c0109495:	c7 04 85 80 31 15 c0 	movl   $0x1,-0x3feace80(,%eax,4)
c010949c:	01 00 00 00 
    phi_test_condvar(i); // 测试当前是否能获得刀叉 
c01094a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01094a3:	89 04 24             	mov    %eax,(%esp)
c01094a6:	e8 04 ff ff ff       	call   c01093af <phi_test_condvar>
    while (state_condvar[i] != EATING) {
c01094ab:	eb 1f                	jmp    c01094cc <phi_take_forks_condvar+0x4d>
        cond_wait(&mtp->cv[i]); // 若不能拿,则阻塞自己,等其它进程唤醒
c01094ad:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01094b2:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01094b5:	8b 55 08             	mov    0x8(%ebp),%edx
c01094b8:	89 d0                	mov    %edx,%eax
c01094ba:	c1 e0 02             	shl    $0x2,%eax
c01094bd:	01 d0                	add    %edx,%eax
c01094bf:	c1 e0 02             	shl    $0x2,%eax
c01094c2:	01 c8                	add    %ecx,%eax
c01094c4:	89 04 24             	mov    %eax,(%esp)
c01094c7:	e8 cd 04 00 00       	call   c0109999 <cond_wait>
     // try to get fork
//--------leave routine in monitor--------------
    down(&(mtp->mutex));    // P操作进入临界区
    state_condvar[i] = HUNGRY; // 饥饿状态,准备进食
    phi_test_condvar(i); // 测试当前是否能获得刀叉 
    while (state_condvar[i] != EATING) {
c01094cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01094cf:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c01094d6:	83 f8 02             	cmp    $0x2,%eax
c01094d9:	75 d2                	jne    c01094ad <phi_take_forks_condvar+0x2e>
        cond_wait(&mtp->cv[i]); // 若不能拿,则阻塞自己,等其它进程唤醒
    }
      if(mtp->next_count>0)//如果存在睡眠的进程则那么将之唤醒
c01094db:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01094e0:	8b 40 18             	mov    0x18(%eax),%eax
c01094e3:	85 c0                	test   %eax,%eax
c01094e5:	7e 12                	jle    c01094f9 <phi_take_forks_condvar+0x7a>
         up(&(mtp->next));
c01094e7:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01094ec:	83 c0 0c             	add    $0xc,%eax
c01094ef:	89 04 24             	mov    %eax,(%esp)
c01094f2:	e8 05 07 00 00       	call   c0109bfc <up>
c01094f7:	eb 0d                	jmp    c0109506 <phi_take_forks_condvar+0x87>
      else
         up(&(mtp->mutex));
c01094f9:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01094fe:	89 04 24             	mov    %eax,(%esp)
c0109501:	e8 f6 06 00 00       	call   c0109bfc <up>
}
c0109506:	c9                   	leave  
c0109507:	c3                   	ret    

c0109508 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0109508:	55                   	push   %ebp
c0109509:	89 e5                	mov    %esp,%ebp
c010950b:	83 ec 18             	sub    $0x18,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
//--------leave routine in monitor--------------
    down(&(mtp->mutex)); // P操作进入临界区
c010950e:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109513:	89 04 24             	mov    %eax,(%esp)
c0109516:	e8 fc 06 00 00       	call   c0109c17 <down>
    state_condvar[i] = THINKING; // 思考状态
c010951b:	8b 45 08             	mov    0x8(%ebp),%eax
c010951e:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c0109525:	00 00 00 00 
    phi_test_condvar(LEFT); // 试试左右两边能否获得刀叉
c0109529:	8b 45 08             	mov    0x8(%ebp),%eax
c010952c:	8d 48 04             	lea    0x4(%eax),%ecx
c010952f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109534:	89 c8                	mov    %ecx,%eax
c0109536:	f7 ea                	imul   %edx
c0109538:	d1 fa                	sar    %edx
c010953a:	89 c8                	mov    %ecx,%eax
c010953c:	c1 f8 1f             	sar    $0x1f,%eax
c010953f:	29 c2                	sub    %eax,%edx
c0109541:	89 d0                	mov    %edx,%eax
c0109543:	c1 e0 02             	shl    $0x2,%eax
c0109546:	01 d0                	add    %edx,%eax
c0109548:	29 c1                	sub    %eax,%ecx
c010954a:	89 ca                	mov    %ecx,%edx
c010954c:	89 14 24             	mov    %edx,(%esp)
c010954f:	e8 5b fe ff ff       	call   c01093af <phi_test_condvar>
    phi_test_condvar(RIGHT);
c0109554:	8b 45 08             	mov    0x8(%ebp),%eax
c0109557:	8d 48 01             	lea    0x1(%eax),%ecx
c010955a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010955f:	89 c8                	mov    %ecx,%eax
c0109561:	f7 ea                	imul   %edx
c0109563:	d1 fa                	sar    %edx
c0109565:	89 c8                	mov    %ecx,%eax
c0109567:	c1 f8 1f             	sar    $0x1f,%eax
c010956a:	29 c2                	sub    %eax,%edx
c010956c:	89 d0                	mov    %edx,%eax
c010956e:	c1 e0 02             	shl    $0x2,%eax
c0109571:	01 d0                	add    %edx,%eax
c0109573:	29 c1                	sub    %eax,%ecx
c0109575:	89 ca                	mov    %ecx,%edx
c0109577:	89 14 24             	mov    %edx,(%esp)
c010957a:	e8 30 fe ff ff       	call   c01093af <phi_test_condvar>
     if(mtp->next_count>0)//如果有哲学家睡眠就予以唤醒
c010957f:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109584:	8b 40 18             	mov    0x18(%eax),%eax
c0109587:	85 c0                	test   %eax,%eax
c0109589:	7e 12                	jle    c010959d <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c010958b:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109590:	83 c0 0c             	add    $0xc,%eax
c0109593:	89 04 24             	mov    %eax,(%esp)
c0109596:	e8 61 06 00 00       	call   c0109bfc <up>
c010959b:	eb 0d                	jmp    c01095aa <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));//离开临界区
c010959d:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01095a2:	89 04 24             	mov    %eax,(%esp)
c01095a5:	e8 52 06 00 00       	call   c0109bfc <up>
}
c01095aa:	c9                   	leave  
c01095ab:	c3                   	ret    

c01095ac <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c01095ac:	55                   	push   %ebp
c01095ad:	89 e5                	mov    %esp,%ebp
c01095af:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c01095b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01095b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01095bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c01095bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095c6:	c7 04 24 d0 75 11 c0 	movl   $0xc01175d0,(%esp)
c01095cd:	e8 93 6d ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c01095d2:	eb 62                	jmp    c0109636 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c01095d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095d7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01095db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095e2:	c7 04 24 f0 75 11 c0 	movl   $0xc01175f0,(%esp)
c01095e9:	e8 77 6d ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01095ee:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01095f5:	e8 29 49 00 00       	call   c010df23 <do_sleep>
        phi_take_forks_condvar(i); 
c01095fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095fd:	89 04 24             	mov    %eax,(%esp)
c0109600:	e8 7a fe ff ff       	call   c010947f <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0109605:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109608:	89 44 24 08          	mov    %eax,0x8(%esp)
c010960c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010960f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109613:	c7 04 24 20 76 11 c0 	movl   $0xc0117620,(%esp)
c010961a:	e8 46 6d ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c010961f:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109626:	e8 f8 48 00 00       	call   c010df23 <do_sleep>
        phi_put_forks_condvar(i); 
c010962b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010962e:	89 04 24             	mov    %eax,(%esp)
c0109631:	e8 d2 fe ff ff       	call   c0109508 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c0109636:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109639:	8d 50 01             	lea    0x1(%eax),%edx
c010963c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010963f:	83 f8 03             	cmp    $0x3,%eax
c0109642:	7e 90                	jle    c01095d4 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0109644:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109647:	89 44 24 04          	mov    %eax,0x4(%esp)
c010964b:	c7 04 24 50 76 11 c0 	movl   $0xc0117650,(%esp)
c0109652:	e8 0e 6d ff ff       	call   c0100365 <cprintf>
    return 0;    
c0109657:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010965c:	c9                   	leave  
c010965d:	c3                   	ret    

c010965e <check_sync>:

void check_sync(void){
c010965e:	55                   	push   %ebp
c010965f:	89 e5                	mov    %esp,%ebp
c0109661:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0109664:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010966b:	00 
c010966c:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109673:	e8 11 04 00 00       	call   c0109a89 <sem_init>
    for(i=0;i<N;i++){
c0109678:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010967f:	e9 94 00 00 00       	jmp    c0109718 <check_sync+0xba>
        sem_init(&s[i], 0);
c0109684:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109687:	89 d0                	mov    %edx,%eax
c0109689:	01 c0                	add    %eax,%eax
c010968b:	01 d0                	add    %edx,%eax
c010968d:	c1 e0 02             	shl    $0x2,%eax
c0109690:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c0109695:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010969c:	00 
c010969d:	89 04 24             	mov    %eax,(%esp)
c01096a0:	e8 e4 03 00 00       	call   c0109a89 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c01096a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096a8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01096af:	00 
c01096b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096b4:	c7 04 24 fd 92 10 c0 	movl   $0xc01092fd,(%esp)
c01096bb:	e8 ee 2d 00 00       	call   c010c4ae <kernel_thread>
c01096c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c01096c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01096c7:	7f 1c                	jg     c01096e5 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c01096c9:	c7 44 24 08 70 76 11 	movl   $0xc0117670,0x8(%esp)
c01096d0:	c0 
c01096d1:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c01096d8:	00 
c01096d9:	c7 04 24 a2 76 11 c0 	movl   $0xc01176a2,(%esp)
c01096e0:	e8 cf 77 ff ff       	call   c0100eb4 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01096e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096e8:	89 04 24             	mov    %eax,(%esp)
c01096eb:	e8 4a 2d 00 00       	call   c010c43a <find_proc>
c01096f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01096f3:	89 04 95 94 31 15 c0 	mov    %eax,-0x3feace6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01096fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096fd:	8b 04 85 94 31 15 c0 	mov    -0x3feace6c(,%eax,4),%eax
c0109704:	c7 44 24 04 b9 76 11 	movl   $0xc01176b9,0x4(%esp)
c010970b:	c0 
c010970c:	89 04 24             	mov    %eax,(%esp)
c010970f:	e8 0d 29 00 00       	call   c010c021 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c0109714:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109718:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010971c:	0f 8e 62 ff ff ff    	jle    c0109684 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0109722:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0109729:	00 
c010972a:	c7 04 24 60 31 15 c0 	movl   $0xc0153160,(%esp)
c0109731:	e8 99 00 00 00       	call   c01097cf <monitor_init>
    for(i=0;i<N;i++){
c0109736:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010973d:	e9 81 00 00 00       	jmp    c01097c3 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109742:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109745:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c010974c:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109750:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109753:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010975a:	00 
c010975b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010975f:	c7 04 24 ac 95 10 c0 	movl   $0xc01095ac,(%esp)
c0109766:	e8 43 2d 00 00       	call   c010c4ae <kernel_thread>
c010976b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c010976e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109772:	7f 1c                	jg     c0109790 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109774:	c7 44 24 08 d0 76 11 	movl   $0xc01176d0,0x8(%esp)
c010977b:	c0 
c010977c:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0109783:	00 
c0109784:	c7 04 24 a2 76 11 c0 	movl   $0xc01176a2,(%esp)
c010978b:	e8 24 77 ff ff       	call   c0100eb4 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109790:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109793:	89 04 24             	mov    %eax,(%esp)
c0109796:	e8 9f 2c 00 00       	call   c010c43a <find_proc>
c010979b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010979e:	89 04 95 34 31 15 c0 	mov    %eax,-0x3feacecc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c01097a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097a8:	8b 04 85 34 31 15 c0 	mov    -0x3feacecc(,%eax,4),%eax
c01097af:	c7 44 24 04 00 77 11 	movl   $0xc0117700,0x4(%esp)
c01097b6:	c0 
c01097b7:	89 04 24             	mov    %eax,(%esp)
c01097ba:	e8 62 28 00 00       	call   c010c021 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c01097bf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01097c3:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01097c7:	0f 8e 75 ff ff ff    	jle    c0109742 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c01097cd:	c9                   	leave  
c01097ce:	c3                   	ret    

c01097cf <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c01097cf:	55                   	push   %ebp
c01097d0:	89 e5                	mov    %esp,%ebp
c01097d2:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c01097d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01097d9:	75 24                	jne    c01097ff <monitor_init+0x30>
c01097db:	c7 44 24 0c 1c 77 11 	movl   $0xc011771c,0xc(%esp)
c01097e2:	c0 
c01097e3:	c7 44 24 08 25 77 11 	movl   $0xc0117725,0x8(%esp)
c01097ea:	c0 
c01097eb:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01097f2:	00 
c01097f3:	c7 04 24 3a 77 11 c0 	movl   $0xc011773a,(%esp)
c01097fa:	e8 b5 76 ff ff       	call   c0100eb4 <__panic>
    mtp->next_count = 0;
c01097ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109802:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109809:	8b 45 08             	mov    0x8(%ebp),%eax
c010980c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109813:	8b 45 08             	mov    0x8(%ebp),%eax
c0109816:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010981d:	00 
c010981e:	89 04 24             	mov    %eax,(%esp)
c0109821:	e8 63 02 00 00       	call   c0109a89 <sem_init>
    sem_init(&(mtp->next), 0);
c0109826:	8b 45 08             	mov    0x8(%ebp),%eax
c0109829:	83 c0 0c             	add    $0xc,%eax
c010982c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109833:	00 
c0109834:	89 04 24             	mov    %eax,(%esp)
c0109837:	e8 4d 02 00 00       	call   c0109a89 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c010983c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010983f:	89 d0                	mov    %edx,%eax
c0109841:	c1 e0 02             	shl    $0x2,%eax
c0109844:	01 d0                	add    %edx,%eax
c0109846:	c1 e0 02             	shl    $0x2,%eax
c0109849:	89 04 24             	mov    %eax,(%esp)
c010984c:	e8 5b b4 ff ff       	call   c0104cac <kmalloc>
c0109851:	8b 55 08             	mov    0x8(%ebp),%edx
c0109854:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109857:	8b 45 08             	mov    0x8(%ebp),%eax
c010985a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010985d:	85 c0                	test   %eax,%eax
c010985f:	75 24                	jne    c0109885 <monitor_init+0xb6>
c0109861:	c7 44 24 0c 4e 77 11 	movl   $0xc011774e,0xc(%esp)
c0109868:	c0 
c0109869:	c7 44 24 08 25 77 11 	movl   $0xc0117725,0x8(%esp)
c0109870:	c0 
c0109871:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109878:	00 
c0109879:	c7 04 24 3a 77 11 c0 	movl   $0xc011773a,(%esp)
c0109880:	e8 2f 76 ff ff       	call   c0100eb4 <__panic>
    for(i=0; i<num_cv; i++){
c0109885:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010988c:	eb 61                	jmp    c01098ef <monitor_init+0x120>
        mtp->cv[i].count=0;
c010988e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109891:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109894:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109897:	89 d0                	mov    %edx,%eax
c0109899:	c1 e0 02             	shl    $0x2,%eax
c010989c:	01 d0                	add    %edx,%eax
c010989e:	c1 e0 02             	shl    $0x2,%eax
c01098a1:	01 c8                	add    %ecx,%eax
c01098a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c01098aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ad:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01098b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098b3:	89 d0                	mov    %edx,%eax
c01098b5:	c1 e0 02             	shl    $0x2,%eax
c01098b8:	01 d0                	add    %edx,%eax
c01098ba:	c1 e0 02             	shl    $0x2,%eax
c01098bd:	01 c8                	add    %ecx,%eax
c01098bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01098c6:	00 
c01098c7:	89 04 24             	mov    %eax,(%esp)
c01098ca:	e8 ba 01 00 00       	call   c0109a89 <sem_init>
        mtp->cv[i].owner=mtp;
c01098cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d2:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01098d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098d8:	89 d0                	mov    %edx,%eax
c01098da:	c1 e0 02             	shl    $0x2,%eax
c01098dd:	01 d0                	add    %edx,%eax
c01098df:	c1 e0 02             	shl    $0x2,%eax
c01098e2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01098e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e8:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c01098eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01098ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098f2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01098f5:	72 97                	jb     c010988e <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01098f7:	c9                   	leave  
c01098f8:	c3                   	ret    

c01098f9 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01098f9:	55                   	push   %ebp
c01098fa:	89 e5                	mov    %esp,%ebp
c01098fc:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01098ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109902:	8b 40 10             	mov    0x10(%eax),%eax
c0109905:	8b 50 18             	mov    0x18(%eax),%edx
c0109908:	8b 45 08             	mov    0x8(%ebp),%eax
c010990b:	8b 40 0c             	mov    0xc(%eax),%eax
c010990e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109912:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109916:	8b 45 08             	mov    0x8(%ebp),%eax
c0109919:	89 44 24 04          	mov    %eax,0x4(%esp)
c010991d:	c7 04 24 5c 77 11 c0 	movl   $0xc011775c,(%esp)
c0109924:	e8 3c 6a ff ff       	call   c0100365 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
	if(cvp->count>0) { //当前存在执行cond_wait而睡眠的进程 
c0109929:	8b 45 08             	mov    0x8(%ebp),%eax
c010992c:	8b 40 0c             	mov    0xc(%eax),%eax
c010992f:	85 c0                	test   %eax,%eax
c0109931:	7e 3a                	jle    c010996d <cond_signal+0x74>
        cvp->owner->next_count ++; //睡眠的进程总个数加一  
c0109933:	8b 45 08             	mov    0x8(%ebp),%eax
c0109936:	8b 40 10             	mov    0x10(%eax),%eax
c0109939:	8b 50 18             	mov    0x18(%eax),%edx
c010993c:	83 c2 01             	add    $0x1,%edx
c010993f:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem)); //唤醒等待在cv.sem上睡眠的进程 
c0109942:	8b 45 08             	mov    0x8(%ebp),%eax
c0109945:	89 04 24             	mov    %eax,(%esp)
c0109948:	e8 af 02 00 00       	call   c0109bfc <up>
        down(&(cvp->owner->next)); //自己需要睡眠
c010994d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109950:	8b 40 10             	mov    0x10(%eax),%eax
c0109953:	83 c0 0c             	add    $0xc,%eax
c0109956:	89 04 24             	mov    %eax,(%esp)
c0109959:	e8 b9 02 00 00       	call   c0109c17 <down>
        cvp->owner->next_count --; //睡醒后等待此条件的睡眠进程个数减一
c010995e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109961:	8b 40 10             	mov    0x10(%eax),%eax
c0109964:	8b 50 18             	mov    0x18(%eax),%edx
c0109967:	83 ea 01             	sub    $0x1,%edx
c010996a:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010996d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109970:	8b 40 10             	mov    0x10(%eax),%eax
c0109973:	8b 50 18             	mov    0x18(%eax),%edx
c0109976:	8b 45 08             	mov    0x8(%ebp),%eax
c0109979:	8b 40 0c             	mov    0xc(%eax),%eax
c010997c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109980:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109984:	8b 45 08             	mov    0x8(%ebp),%eax
c0109987:	89 44 24 04          	mov    %eax,0x4(%esp)
c010998b:	c7 04 24 a4 77 11 c0 	movl   $0xc01177a4,(%esp)
c0109992:	e8 ce 69 ff ff       	call   c0100365 <cprintf>
}
c0109997:	c9                   	leave  
c0109998:	c3                   	ret    

c0109999 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109999:	55                   	push   %ebp
c010999a:	89 e5                	mov    %esp,%ebp
c010999c:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010999f:	8b 45 08             	mov    0x8(%ebp),%eax
c01099a2:	8b 40 10             	mov    0x10(%eax),%eax
c01099a5:	8b 50 18             	mov    0x18(%eax),%edx
c01099a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ab:	8b 40 0c             	mov    0xc(%eax),%eax
c01099ae:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01099b2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099bd:	c7 04 24 e8 77 11 c0 	movl   $0xc01177e8,(%esp)
c01099c4:	e8 9c 69 ff ff       	call   c0100365 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
	cvp->count++; //需要睡眠的进程个数加一
c01099c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01099cc:	8b 40 0c             	mov    0xc(%eax),%eax
c01099cf:	8d 50 01             	lea    0x1(%eax),%edx
c01099d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d5:	89 50 0c             	mov    %edx,0xc(%eax)
      	if(cvp->owner->next_count > 0) 
c01099d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099db:	8b 40 10             	mov    0x10(%eax),%eax
c01099de:	8b 40 18             	mov    0x18(%eax),%eax
c01099e1:	85 c0                	test   %eax,%eax
c01099e3:	7e 13                	jle    c01099f8 <cond_wait+0x5f>
        	up(&(cvp->owner->next)); //唤醒进程链表中的下一个进程
c01099e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e8:	8b 40 10             	mov    0x10(%eax),%eax
c01099eb:	83 c0 0c             	add    $0xc,%eax
c01099ee:	89 04 24             	mov    %eax,(%esp)
c01099f1:	e8 06 02 00 00       	call   c0109bfc <up>
c01099f6:	eb 0e                	jmp    c0109a06 <cond_wait+0x6d>
      	else
         	up(&(cvp->owner->mutex)); //唤醒睡在monitor.mutex上的进程 
c01099f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099fb:	8b 40 10             	mov    0x10(%eax),%eax
c01099fe:	89 04 24             	mov    %eax,(%esp)
c0109a01:	e8 f6 01 00 00       	call   c0109bfc <up>
      	down(&(cvp->sem));  //将此进程等待  
c0109a06:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a09:	89 04 24             	mov    %eax,(%esp)
c0109a0c:	e8 06 02 00 00       	call   c0109c17 <down>
      	cvp->count --;  //睡醒后等待此条件的睡眠进程个数减一
c0109a11:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a14:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a17:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109a1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a1d:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a23:	8b 40 10             	mov    0x10(%eax),%eax
c0109a26:	8b 50 18             	mov    0x18(%eax),%edx
c0109a29:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2c:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a2f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a33:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a37:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a3e:	c7 04 24 2c 78 11 c0 	movl   $0xc011782c,(%esp)
c0109a45:	e8 1b 69 ff ff       	call   c0100365 <cprintf>
}
c0109a4a:	c9                   	leave  
c0109a4b:	c3                   	ret    

c0109a4c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109a4c:	55                   	push   %ebp
c0109a4d:	89 e5                	mov    %esp,%ebp
c0109a4f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109a52:	9c                   	pushf  
c0109a53:	58                   	pop    %eax
c0109a54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109a57:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109a5a:	25 00 02 00 00       	and    $0x200,%eax
c0109a5f:	85 c0                	test   %eax,%eax
c0109a61:	74 0c                	je     c0109a6f <__intr_save+0x23>
        intr_disable();
c0109a63:	e8 ae 86 ff ff       	call   c0102116 <intr_disable>
        return 1;
c0109a68:	b8 01 00 00 00       	mov    $0x1,%eax
c0109a6d:	eb 05                	jmp    c0109a74 <__intr_save+0x28>
    }
    return 0;
c0109a6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109a74:	c9                   	leave  
c0109a75:	c3                   	ret    

c0109a76 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109a76:	55                   	push   %ebp
c0109a77:	89 e5                	mov    %esp,%ebp
c0109a79:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109a7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109a80:	74 05                	je     c0109a87 <__intr_restore+0x11>
        intr_enable();
c0109a82:	e8 89 86 ff ff       	call   c0102110 <intr_enable>
    }
}
c0109a87:	c9                   	leave  
c0109a88:	c3                   	ret    

c0109a89 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109a89:	55                   	push   %ebp
c0109a8a:	89 e5                	mov    %esp,%ebp
c0109a8c:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a92:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109a95:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a9a:	83 c0 04             	add    $0x4,%eax
c0109a9d:	89 04 24             	mov    %eax,(%esp)
c0109aa0:	e8 33 02 00 00       	call   c0109cd8 <wait_queue_init>
}
c0109aa5:	c9                   	leave  
c0109aa6:	c3                   	ret    

c0109aa7 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109aa7:	55                   	push   %ebp
c0109aa8:	89 e5                	mov    %esp,%ebp
c0109aaa:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109aad:	e8 9a ff ff ff       	call   c0109a4c <__intr_save>
c0109ab2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109ab5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ab8:	83 c0 04             	add    $0x4,%eax
c0109abb:	89 04 24             	mov    %eax,(%esp)
c0109abe:	e8 69 04 00 00       	call   c0109f2c <wait_queue_first>
c0109ac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109ac6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109aca:	75 0f                	jne    c0109adb <__up+0x34>
            sem->value ++;
c0109acc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109acf:	8b 00                	mov    (%eax),%eax
c0109ad1:	8d 50 01             	lea    0x1(%eax),%edx
c0109ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ad7:	89 10                	mov    %edx,(%eax)
c0109ad9:	eb 58                	jmp    c0109b33 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ade:	8b 00                	mov    (%eax),%eax
c0109ae0:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109ae6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109ae9:	74 24                	je     c0109b0f <__up+0x68>
c0109aeb:	c7 44 24 0c 70 78 11 	movl   $0xc0117870,0xc(%esp)
c0109af2:	c0 
c0109af3:	c7 44 24 08 95 78 11 	movl   $0xc0117895,0x8(%esp)
c0109afa:	c0 
c0109afb:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109b02:	00 
c0109b03:	c7 04 24 aa 78 11 c0 	movl   $0xc01178aa,(%esp)
c0109b0a:	e8 a5 73 ff ff       	call   c0100eb4 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b12:	8d 50 04             	lea    0x4(%eax),%edx
c0109b15:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109b1c:	00 
c0109b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b20:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b27:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b2b:	89 14 24             	mov    %edx,(%esp)
c0109b2e:	e8 95 04 00 00       	call   c0109fc8 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b36:	89 04 24             	mov    %eax,(%esp)
c0109b39:	e8 38 ff ff ff       	call   c0109a76 <__intr_restore>
}
c0109b3e:	c9                   	leave  
c0109b3f:	c3                   	ret    

c0109b40 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109b40:	55                   	push   %ebp
c0109b41:	89 e5                	mov    %esp,%ebp
c0109b43:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109b46:	e8 01 ff ff ff       	call   c0109a4c <__intr_save>
c0109b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109b4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b51:	8b 00                	mov    (%eax),%eax
c0109b53:	85 c0                	test   %eax,%eax
c0109b55:	7e 22                	jle    c0109b79 <__down+0x39>
        sem->value --;
c0109b57:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b5a:	8b 00                	mov    (%eax),%eax
c0109b5c:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109b5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b62:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b67:	89 04 24             	mov    %eax,(%esp)
c0109b6a:	e8 07 ff ff ff       	call   c0109a76 <__intr_restore>
        return 0;
c0109b6f:	b8 00 00 00 00       	mov    $0x0,%eax
c0109b74:	e9 81 00 00 00       	jmp    c0109bfa <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109b79:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109b7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109b7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b82:	8d 50 04             	lea    0x4(%eax),%edx
c0109b85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b88:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b93:	89 14 24             	mov    %edx,(%esp)
c0109b96:	e8 34 05 00 00       	call   c010a0cf <wait_current_set>
    local_intr_restore(intr_flag);
c0109b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b9e:	89 04 24             	mov    %eax,(%esp)
c0109ba1:	e8 d0 fe ff ff       	call   c0109a76 <__intr_restore>

    schedule();
c0109ba6:	e8 88 49 00 00       	call   c010e533 <schedule>

    local_intr_save(intr_flag);
c0109bab:	e8 9c fe ff ff       	call   c0109a4c <__intr_save>
c0109bb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109bb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bb6:	89 04 24             	mov    %eax,(%esp)
c0109bb9:	e8 e2 03 00 00       	call   c0109fa0 <wait_in_queue>
c0109bbe:	85 c0                	test   %eax,%eax
c0109bc0:	74 15                	je     c0109bd7 <__down+0x97>
c0109bc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc5:	8d 50 04             	lea    0x4(%eax),%edx
c0109bc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bcb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109bcf:	89 14 24             	mov    %edx,(%esp)
c0109bd2:	e8 c4 01 00 00       	call   c0109d9b <wait_queue_del>
    local_intr_restore(intr_flag);
c0109bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bda:	89 04 24             	mov    %eax,(%esp)
c0109bdd:	e8 94 fe ff ff       	call   c0109a76 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109be5:	8b 40 04             	mov    0x4(%eax),%eax
c0109be8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109beb:	74 08                	je     c0109bf5 <__down+0xb5>
        return wait->wakeup_flags;
c0109bed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bf0:	8b 40 04             	mov    0x4(%eax),%eax
c0109bf3:	eb 05                	jmp    c0109bfa <__down+0xba>
    }
    return 0;
c0109bf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109bfa:	c9                   	leave  
c0109bfb:	c3                   	ret    

c0109bfc <up>:

void
up(semaphore_t *sem) {
c0109bfc:	55                   	push   %ebp
c0109bfd:	89 e5                	mov    %esp,%ebp
c0109bff:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109c02:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109c09:	00 
c0109c0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c0d:	89 04 24             	mov    %eax,(%esp)
c0109c10:	e8 92 fe ff ff       	call   c0109aa7 <__up>
}
c0109c15:	c9                   	leave  
c0109c16:	c3                   	ret    

c0109c17 <down>:

void
down(semaphore_t *sem) {
c0109c17:	55                   	push   %ebp
c0109c18:	89 e5                	mov    %esp,%ebp
c0109c1a:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109c1d:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109c24:	00 
c0109c25:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c28:	89 04 24             	mov    %eax,(%esp)
c0109c2b:	e8 10 ff ff ff       	call   c0109b40 <__down>
c0109c30:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109c33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c37:	74 24                	je     c0109c5d <down+0x46>
c0109c39:	c7 44 24 0c ba 78 11 	movl   $0xc01178ba,0xc(%esp)
c0109c40:	c0 
c0109c41:	c7 44 24 08 95 78 11 	movl   $0xc0117895,0x8(%esp)
c0109c48:	c0 
c0109c49:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109c50:	00 
c0109c51:	c7 04 24 aa 78 11 c0 	movl   $0xc01178aa,(%esp)
c0109c58:	e8 57 72 ff ff       	call   c0100eb4 <__panic>
}
c0109c5d:	c9                   	leave  
c0109c5e:	c3                   	ret    

c0109c5f <try_down>:

bool
try_down(semaphore_t *sem) {
c0109c5f:	55                   	push   %ebp
c0109c60:	89 e5                	mov    %esp,%ebp
c0109c62:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109c65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109c6c:	e8 db fd ff ff       	call   c0109a4c <__intr_save>
c0109c71:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109c74:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c77:	8b 00                	mov    (%eax),%eax
c0109c79:	85 c0                	test   %eax,%eax
c0109c7b:	7e 14                	jle    c0109c91 <try_down+0x32>
        sem->value --, ret = 1;
c0109c7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c80:	8b 00                	mov    (%eax),%eax
c0109c82:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c85:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c88:	89 10                	mov    %edx,(%eax)
c0109c8a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109c91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c94:	89 04 24             	mov    %eax,(%esp)
c0109c97:	e8 da fd ff ff       	call   c0109a76 <__intr_restore>
    return ret;
c0109c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109c9f:	c9                   	leave  
c0109ca0:	c3                   	ret    

c0109ca1 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109ca1:	55                   	push   %ebp
c0109ca2:	89 e5                	mov    %esp,%ebp
c0109ca4:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109ca7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109caa:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109cad:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109caf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb2:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109cb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cbc:	83 c0 0c             	add    $0xc,%eax
c0109cbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109cc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cc5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109cc8:	89 50 04             	mov    %edx,0x4(%eax)
c0109ccb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cce:	8b 50 04             	mov    0x4(%eax),%edx
c0109cd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cd4:	89 10                	mov    %edx,(%eax)
}
c0109cd6:	c9                   	leave  
c0109cd7:	c3                   	ret    

c0109cd8 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109cd8:	55                   	push   %ebp
c0109cd9:	89 e5                	mov    %esp,%ebp
c0109cdb:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109cde:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109ce4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ce7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109cea:	89 50 04             	mov    %edx,0x4(%eax)
c0109ced:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cf0:	8b 50 04             	mov    0x4(%eax),%edx
c0109cf3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cf6:	89 10                	mov    %edx,(%eax)
}
c0109cf8:	c9                   	leave  
c0109cf9:	c3                   	ret    

c0109cfa <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109cfa:	55                   	push   %ebp
c0109cfb:	89 e5                	mov    %esp,%ebp
c0109cfd:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109d00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d03:	83 c0 0c             	add    $0xc,%eax
c0109d06:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d0c:	8b 40 04             	mov    0x4(%eax),%eax
c0109d0f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109d12:	0f 94 c0             	sete   %al
c0109d15:	0f b6 c0             	movzbl %al,%eax
c0109d18:	85 c0                	test   %eax,%eax
c0109d1a:	74 09                	je     c0109d25 <wait_queue_add+0x2b>
c0109d1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d1f:	8b 00                	mov    (%eax),%eax
c0109d21:	85 c0                	test   %eax,%eax
c0109d23:	75 24                	jne    c0109d49 <wait_queue_add+0x4f>
c0109d25:	c7 44 24 0c c8 78 11 	movl   $0xc01178c8,0xc(%esp)
c0109d2c:	c0 
c0109d2d:	c7 44 24 08 fd 78 11 	movl   $0xc01178fd,0x8(%esp)
c0109d34:	c0 
c0109d35:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109d3c:	00 
c0109d3d:	c7 04 24 12 79 11 c0 	movl   $0xc0117912,(%esp)
c0109d44:	e8 6b 71 ff ff       	call   c0100eb4 <__panic>
    wait->wait_queue = queue;
c0109d49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d4c:	8b 55 08             	mov    0x8(%ebp),%edx
c0109d4f:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109d52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d55:	8d 50 0c             	lea    0xc(%eax),%edx
c0109d58:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d5e:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d64:	8b 00                	mov    (%eax),%eax
c0109d66:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109d69:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109d6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109d6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d72:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109d75:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d78:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109d7b:	89 10                	mov    %edx,(%eax)
c0109d7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d80:	8b 10                	mov    (%eax),%edx
c0109d82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d85:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109d88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d8b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109d8e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109d91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d94:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109d97:	89 10                	mov    %edx,(%eax)
}
c0109d99:	c9                   	leave  
c0109d9a:	c3                   	ret    

c0109d9b <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109d9b:	55                   	push   %ebp
c0109d9c:	89 e5                	mov    %esp,%ebp
c0109d9e:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109da1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109da4:	83 c0 0c             	add    $0xc,%eax
c0109da7:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109daa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dad:	8b 40 04             	mov    0x4(%eax),%eax
c0109db0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109db3:	0f 94 c0             	sete   %al
c0109db6:	0f b6 c0             	movzbl %al,%eax
c0109db9:	85 c0                	test   %eax,%eax
c0109dbb:	75 0b                	jne    c0109dc8 <wait_queue_del+0x2d>
c0109dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dc0:	8b 40 08             	mov    0x8(%eax),%eax
c0109dc3:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109dc6:	74 24                	je     c0109dec <wait_queue_del+0x51>
c0109dc8:	c7 44 24 0c 24 79 11 	movl   $0xc0117924,0xc(%esp)
c0109dcf:	c0 
c0109dd0:	c7 44 24 08 fd 78 11 	movl   $0xc01178fd,0x8(%esp)
c0109dd7:	c0 
c0109dd8:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109ddf:	00 
c0109de0:	c7 04 24 12 79 11 c0 	movl   $0xc0117912,(%esp)
c0109de7:	e8 c8 70 ff ff       	call   c0100eb4 <__panic>
    list_del_init(&(wait->wait_link));
c0109dec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109def:	83 c0 0c             	add    $0xc,%eax
c0109df2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109df5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109df8:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109dfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109dfe:	8b 40 04             	mov    0x4(%eax),%eax
c0109e01:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109e04:	8b 12                	mov    (%edx),%edx
c0109e06:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109e09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109e0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109e12:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109e15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e18:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109e1b:	89 10                	mov    %edx,(%eax)
c0109e1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e20:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109e23:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e26:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109e29:	89 50 04             	mov    %edx,0x4(%eax)
c0109e2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e2f:	8b 50 04             	mov    0x4(%eax),%edx
c0109e32:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e35:	89 10                	mov    %edx,(%eax)
}
c0109e37:	c9                   	leave  
c0109e38:	c3                   	ret    

c0109e39 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109e39:	55                   	push   %ebp
c0109e3a:	89 e5                	mov    %esp,%ebp
c0109e3c:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109e3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e42:	83 c0 0c             	add    $0xc,%eax
c0109e45:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e4b:	8b 40 04             	mov    0x4(%eax),%eax
c0109e4e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109e51:	0f 94 c0             	sete   %al
c0109e54:	0f b6 c0             	movzbl %al,%eax
c0109e57:	85 c0                	test   %eax,%eax
c0109e59:	75 0b                	jne    c0109e66 <wait_queue_next+0x2d>
c0109e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e5e:	8b 40 08             	mov    0x8(%eax),%eax
c0109e61:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e64:	74 24                	je     c0109e8a <wait_queue_next+0x51>
c0109e66:	c7 44 24 0c 24 79 11 	movl   $0xc0117924,0xc(%esp)
c0109e6d:	c0 
c0109e6e:	c7 44 24 08 fd 78 11 	movl   $0xc01178fd,0x8(%esp)
c0109e75:	c0 
c0109e76:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109e7d:	00 
c0109e7e:	c7 04 24 12 79 11 c0 	movl   $0xc0117912,(%esp)
c0109e85:	e8 2a 70 ff ff       	call   c0100eb4 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109e8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e8d:	83 c0 0c             	add    $0xc,%eax
c0109e90:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109e93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e96:	8b 40 04             	mov    0x4(%eax),%eax
c0109e99:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109e9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e9f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109ea2:	74 08                	je     c0109eac <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109ea4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ea7:	83 e8 0c             	sub    $0xc,%eax
c0109eaa:	eb 05                	jmp    c0109eb1 <wait_queue_next+0x78>
    }
    return NULL;
c0109eac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109eb1:	c9                   	leave  
c0109eb2:	c3                   	ret    

c0109eb3 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109eb3:	55                   	push   %ebp
c0109eb4:	89 e5                	mov    %esp,%ebp
c0109eb6:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ebc:	83 c0 0c             	add    $0xc,%eax
c0109ebf:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109ec2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ec5:	8b 40 04             	mov    0x4(%eax),%eax
c0109ec8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109ecb:	0f 94 c0             	sete   %al
c0109ece:	0f b6 c0             	movzbl %al,%eax
c0109ed1:	85 c0                	test   %eax,%eax
c0109ed3:	75 0b                	jne    c0109ee0 <wait_queue_prev+0x2d>
c0109ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ed8:	8b 40 08             	mov    0x8(%eax),%eax
c0109edb:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109ede:	74 24                	je     c0109f04 <wait_queue_prev+0x51>
c0109ee0:	c7 44 24 0c 24 79 11 	movl   $0xc0117924,0xc(%esp)
c0109ee7:	c0 
c0109ee8:	c7 44 24 08 fd 78 11 	movl   $0xc01178fd,0x8(%esp)
c0109eef:	c0 
c0109ef0:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109ef7:	00 
c0109ef8:	c7 04 24 12 79 11 c0 	movl   $0xc0117912,(%esp)
c0109eff:	e8 b0 6f ff ff       	call   c0100eb4 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109f04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f07:	83 c0 0c             	add    $0xc,%eax
c0109f0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109f0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f10:	8b 00                	mov    (%eax),%eax
c0109f12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109f15:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f18:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109f1b:	74 08                	je     c0109f25 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f20:	83 e8 0c             	sub    $0xc,%eax
c0109f23:	eb 05                	jmp    c0109f2a <wait_queue_prev+0x77>
    }
    return NULL;
c0109f25:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f2a:	c9                   	leave  
c0109f2b:	c3                   	ret    

c0109f2c <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109f2c:	55                   	push   %ebp
c0109f2d:	89 e5                	mov    %esp,%ebp
c0109f2f:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109f32:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f35:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109f38:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109f3b:	8b 40 04             	mov    0x4(%eax),%eax
c0109f3e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109f41:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f44:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109f47:	74 08                	je     c0109f51 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109f49:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f4c:	83 e8 0c             	sub    $0xc,%eax
c0109f4f:	eb 05                	jmp    c0109f56 <wait_queue_first+0x2a>
    }
    return NULL;
c0109f51:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f56:	c9                   	leave  
c0109f57:	c3                   	ret    

c0109f58 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109f58:	55                   	push   %ebp
c0109f59:	89 e5                	mov    %esp,%ebp
c0109f5b:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109f5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f61:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109f64:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109f67:	8b 00                	mov    (%eax),%eax
c0109f69:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109f6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f6f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109f72:	74 08                	je     c0109f7c <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109f74:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f77:	83 e8 0c             	sub    $0xc,%eax
c0109f7a:	eb 05                	jmp    c0109f81 <wait_queue_last+0x29>
    }
    return NULL;
c0109f7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f81:	c9                   	leave  
c0109f82:	c3                   	ret    

c0109f83 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109f83:	55                   	push   %ebp
c0109f84:	89 e5                	mov    %esp,%ebp
c0109f86:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109f89:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f8c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f92:	8b 40 04             	mov    0x4(%eax),%eax
c0109f95:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109f98:	0f 94 c0             	sete   %al
c0109f9b:	0f b6 c0             	movzbl %al,%eax
}
c0109f9e:	c9                   	leave  
c0109f9f:	c3                   	ret    

c0109fa0 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109fa0:	55                   	push   %ebp
c0109fa1:	89 e5                	mov    %esp,%ebp
c0109fa3:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109fa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fa9:	83 c0 0c             	add    $0xc,%eax
c0109fac:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109faf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fb2:	8b 40 04             	mov    0x4(%eax),%eax
c0109fb5:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109fb8:	0f 94 c0             	sete   %al
c0109fbb:	0f b6 c0             	movzbl %al,%eax
c0109fbe:	85 c0                	test   %eax,%eax
c0109fc0:	0f 94 c0             	sete   %al
c0109fc3:	0f b6 c0             	movzbl %al,%eax
}
c0109fc6:	c9                   	leave  
c0109fc7:	c3                   	ret    

c0109fc8 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109fc8:	55                   	push   %ebp
c0109fc9:	89 e5                	mov    %esp,%ebp
c0109fcb:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109fce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109fd2:	74 12                	je     c0109fe6 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109fd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109fdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fde:	89 04 24             	mov    %eax,(%esp)
c0109fe1:	e8 b5 fd ff ff       	call   c0109d9b <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0109fe6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fe9:	8b 55 10             	mov    0x10(%ebp),%edx
c0109fec:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109fef:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ff2:	8b 00                	mov    (%eax),%eax
c0109ff4:	89 04 24             	mov    %eax,(%esp)
c0109ff7:	e8 9b 44 00 00       	call   c010e497 <wakeup_proc>
}
c0109ffc:	c9                   	leave  
c0109ffd:	c3                   	ret    

c0109ffe <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109ffe:	55                   	push   %ebp
c0109fff:	89 e5                	mov    %esp,%ebp
c010a001:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a004:	8b 45 08             	mov    0x8(%ebp),%eax
c010a007:	89 04 24             	mov    %eax,(%esp)
c010a00a:	e8 1d ff ff ff       	call   c0109f2c <wait_queue_first>
c010a00f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a012:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a016:	74 20                	je     c010a038 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a018:	8b 45 10             	mov    0x10(%ebp),%eax
c010a01b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a01f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a022:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a026:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a029:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a02d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a030:	89 04 24             	mov    %eax,(%esp)
c010a033:	e8 90 ff ff ff       	call   c0109fc8 <wakeup_wait>
    }
}
c010a038:	c9                   	leave  
c010a039:	c3                   	ret    

c010a03a <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a03a:	55                   	push   %ebp
c010a03b:	89 e5                	mov    %esp,%ebp
c010a03d:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a040:	8b 45 08             	mov    0x8(%ebp),%eax
c010a043:	89 04 24             	mov    %eax,(%esp)
c010a046:	e8 e1 fe ff ff       	call   c0109f2c <wait_queue_first>
c010a04b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a04e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a052:	74 79                	je     c010a0cd <wakeup_queue+0x93>
        if (del) {
c010a054:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a058:	74 37                	je     c010a091 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a05a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a061:	00 
c010a062:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a065:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a069:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a06c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a070:	8b 45 08             	mov    0x8(%ebp),%eax
c010a073:	89 04 24             	mov    %eax,(%esp)
c010a076:	e8 4d ff ff ff       	call   c0109fc8 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a07b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a07e:	89 04 24             	mov    %eax,(%esp)
c010a081:	e8 a6 fe ff ff       	call   c0109f2c <wait_queue_first>
c010a086:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a089:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a08d:	75 cb                	jne    c010a05a <wakeup_queue+0x20>
c010a08f:	eb 3c                	jmp    c010a0cd <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a091:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a098:	00 
c010a099:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a09c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a0a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0aa:	89 04 24             	mov    %eax,(%esp)
c010a0ad:	e8 16 ff ff ff       	call   c0109fc8 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a0b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0bc:	89 04 24             	mov    %eax,(%esp)
c010a0bf:	e8 75 fd ff ff       	call   c0109e39 <wait_queue_next>
c010a0c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0cb:	75 c4                	jne    c010a091 <wakeup_queue+0x57>
        }
    }
}
c010a0cd:	c9                   	leave  
c010a0ce:	c3                   	ret    

c010a0cf <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a0cf:	55                   	push   %ebp
c010a0d0:	89 e5                	mov    %esp,%ebp
c010a0d2:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a0d5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a0da:	85 c0                	test   %eax,%eax
c010a0dc:	75 24                	jne    c010a102 <wait_current_set+0x33>
c010a0de:	c7 44 24 0c 61 79 11 	movl   $0xc0117961,0xc(%esp)
c010a0e5:	c0 
c010a0e6:	c7 44 24 08 fd 78 11 	movl   $0xc01178fd,0x8(%esp)
c010a0ed:	c0 
c010a0ee:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a0f5:	00 
c010a0f6:	c7 04 24 12 79 11 c0 	movl   $0xc0117912,(%esp)
c010a0fd:	e8 b2 6d ff ff       	call   c0100eb4 <__panic>
    wait_init(wait, current);
c010a102:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a107:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a10b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a10e:	89 04 24             	mov    %eax,(%esp)
c010a111:	e8 8b fb ff ff       	call   c0109ca1 <wait_init>
    current->state = PROC_SLEEPING;
c010a116:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a11b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a121:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a126:	8b 55 10             	mov    0x10(%ebp),%edx
c010a129:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a12f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a132:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a136:	8b 45 08             	mov    0x8(%ebp),%eax
c010a139:	89 04 24             	mov    %eax,(%esp)
c010a13c:	e8 b9 fb ff ff       	call   c0109cfa <wait_queue_add>
}
c010a141:	c9                   	leave  
c010a142:	c3                   	ret    

c010a143 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a143:	55                   	push   %ebp
c010a144:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a146:	8b 45 08             	mov    0x8(%ebp),%eax
c010a149:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a14c:	5d                   	pop    %ebp
c010a14d:	c3                   	ret    

c010a14e <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a14e:	55                   	push   %ebp
c010a14f:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a151:	8b 45 08             	mov    0x8(%ebp),%eax
c010a154:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a157:	5d                   	pop    %ebp
c010a158:	c3                   	ret    

c010a159 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a159:	55                   	push   %ebp
c010a15a:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a15c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a15f:	8b 40 18             	mov    0x18(%eax),%eax
c010a162:	8d 50 01             	lea    0x1(%eax),%edx
c010a165:	8b 45 08             	mov    0x8(%ebp),%eax
c010a168:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a16b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a16e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a171:	5d                   	pop    %ebp
c010a172:	c3                   	ret    

c010a173 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a173:	55                   	push   %ebp
c010a174:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a176:	8b 45 08             	mov    0x8(%ebp),%eax
c010a179:	8b 40 18             	mov    0x18(%eax),%eax
c010a17c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a17f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a182:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a185:	8b 45 08             	mov    0x8(%ebp),%eax
c010a188:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a18b:	5d                   	pop    %ebp
c010a18c:	c3                   	ret    

c010a18d <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a18d:	55                   	push   %ebp
c010a18e:	89 e5                	mov    %esp,%ebp
c010a190:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010a193:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a198:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a19e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a1a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1a5:	74 0f                	je     c010a1b6 <get_fd_array+0x29>
c010a1a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1aa:	89 04 24             	mov    %eax,(%esp)
c010a1ad:	e8 91 ff ff ff       	call   c010a143 <files_count>
c010a1b2:	85 c0                	test   %eax,%eax
c010a1b4:	7f 24                	jg     c010a1da <get_fd_array+0x4d>
c010a1b6:	c7 44 24 0c 74 79 11 	movl   $0xc0117974,0xc(%esp)
c010a1bd:	c0 
c010a1be:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a1c5:	c0 
c010a1c6:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a1cd:	00 
c010a1ce:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a1d5:	e8 da 6c ff ff       	call   c0100eb4 <__panic>
    return filesp->fd_array;
c010a1da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1dd:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a1e0:	c9                   	leave  
c010a1e1:	c3                   	ret    

c010a1e2 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a1e2:	55                   	push   %ebp
c010a1e3:	89 e5                	mov    %esp,%ebp
c010a1e5:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010a1e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a1ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010a1f5:	eb 24                	jmp    c010a21b <fd_array_init+0x39>
        file->open_count = 0;
c010a1f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a1fa:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a201:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a204:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a20a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a20d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a210:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a213:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010a217:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010a21b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a21e:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a223:	76 d2                	jbe    c010a1f7 <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a225:	c9                   	leave  
c010a226:	c3                   	ret    

c010a227 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a227:	55                   	push   %ebp
c010a228:	89 e5                	mov    %esp,%ebp
c010a22a:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a22d:	e8 5b ff ff ff       	call   c010a18d <get_fd_array>
c010a232:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a235:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a23c:	75 30                	jne    c010a26e <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a23e:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a245:	eb 13                	jmp    c010a25a <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c010a247:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a24a:	8b 00                	mov    (%eax),%eax
c010a24c:	85 c0                	test   %eax,%eax
c010a24e:	75 02                	jne    c010a252 <fd_array_alloc+0x2b>
                goto found;
c010a250:	eb 59                	jmp    c010a2ab <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a252:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a256:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a25a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a25d:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a262:	76 e3                	jbe    c010a247 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a264:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a269:	e9 90 00 00 00       	jmp    c010a2fe <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c010a26e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a272:	78 30                	js     c010a2a4 <fd_array_alloc+0x7d>
c010a274:	8b 45 08             	mov    0x8(%ebp),%eax
c010a277:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a27c:	77 26                	ja     c010a2a4 <fd_array_alloc+0x7d>
            file += fd;
c010a27e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a281:	c1 e0 02             	shl    $0x2,%eax
c010a284:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a28b:	29 c2                	sub    %eax,%edx
c010a28d:	89 d0                	mov    %edx,%eax
c010a28f:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a292:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a295:	8b 00                	mov    (%eax),%eax
c010a297:	85 c0                	test   %eax,%eax
c010a299:	75 02                	jne    c010a29d <fd_array_alloc+0x76>
                goto found;
c010a29b:	eb 0e                	jmp    c010a2ab <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010a29d:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a2a2:	eb 5a                	jmp    c010a2fe <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010a2a4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a2a9:	eb 53                	jmp    c010a2fe <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010a2ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2ae:	89 04 24             	mov    %eax,(%esp)
c010a2b1:	e8 98 fe ff ff       	call   c010a14e <fopen_count>
c010a2b6:	85 c0                	test   %eax,%eax
c010a2b8:	74 24                	je     c010a2de <fd_array_alloc+0xb7>
c010a2ba:	c7 44 24 0c c2 79 11 	movl   $0xc01179c2,0xc(%esp)
c010a2c1:	c0 
c010a2c2:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a2c9:	c0 
c010a2ca:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010a2d1:	00 
c010a2d2:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a2d9:	e8 d6 6b ff ff       	call   c0100eb4 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a2de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2e1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a2e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2ea:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a2f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a2f7:	89 10                	mov    %edx,(%eax)
    return 0;
c010a2f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a2fe:	c9                   	leave  
c010a2ff:	c3                   	ret    

c010a300 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a300:	55                   	push   %ebp
c010a301:	89 e5                	mov    %esp,%ebp
c010a303:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a306:	8b 45 08             	mov    0x8(%ebp),%eax
c010a309:	8b 00                	mov    (%eax),%eax
c010a30b:	83 f8 01             	cmp    $0x1,%eax
c010a30e:	74 2e                	je     c010a33e <fd_array_free+0x3e>
c010a310:	8b 45 08             	mov    0x8(%ebp),%eax
c010a313:	8b 00                	mov    (%eax),%eax
c010a315:	83 f8 03             	cmp    $0x3,%eax
c010a318:	74 24                	je     c010a33e <fd_array_free+0x3e>
c010a31a:	c7 44 24 0c dc 79 11 	movl   $0xc01179dc,0xc(%esp)
c010a321:	c0 
c010a322:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a329:	c0 
c010a32a:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010a331:	00 
c010a332:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a339:	e8 76 6b ff ff       	call   c0100eb4 <__panic>
    assert(fopen_count(file) == 0);
c010a33e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a341:	89 04 24             	mov    %eax,(%esp)
c010a344:	e8 05 fe ff ff       	call   c010a14e <fopen_count>
c010a349:	85 c0                	test   %eax,%eax
c010a34b:	74 24                	je     c010a371 <fd_array_free+0x71>
c010a34d:	c7 44 24 0c c2 79 11 	movl   $0xc01179c2,0xc(%esp)
c010a354:	c0 
c010a355:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a35c:	c0 
c010a35d:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010a364:	00 
c010a365:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a36c:	e8 43 6b ff ff       	call   c0100eb4 <__panic>
    if (file->status == FD_CLOSED) {
c010a371:	8b 45 08             	mov    0x8(%ebp),%eax
c010a374:	8b 00                	mov    (%eax),%eax
c010a376:	83 f8 03             	cmp    $0x3,%eax
c010a379:	75 0e                	jne    c010a389 <fd_array_free+0x89>
        vfs_close(file->node);
c010a37b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a37e:	8b 40 14             	mov    0x14(%eax),%eax
c010a381:	89 04 24             	mov    %eax,(%esp)
c010a384:	e8 e0 5b 00 00       	call   c010ff69 <vfs_close>
    }
    file->status = FD_NONE;
c010a389:	8b 45 08             	mov    0x8(%ebp),%eax
c010a38c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a392:	c9                   	leave  
c010a393:	c3                   	ret    

c010a394 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a394:	55                   	push   %ebp
c010a395:	89 e5                	mov    %esp,%ebp
c010a397:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a39a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a39d:	8b 00                	mov    (%eax),%eax
c010a39f:	83 f8 02             	cmp    $0x2,%eax
c010a3a2:	74 24                	je     c010a3c8 <fd_array_acquire+0x34>
c010a3a4:	c7 44 24 0c 11 7a 11 	movl   $0xc0117a11,0xc(%esp)
c010a3ab:	c0 
c010a3ac:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a3b3:	c0 
c010a3b4:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c010a3bb:	00 
c010a3bc:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a3c3:	e8 ec 6a ff ff       	call   c0100eb4 <__panic>
    fopen_count_inc(file);
c010a3c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3cb:	89 04 24             	mov    %eax,(%esp)
c010a3ce:	e8 86 fd ff ff       	call   c010a159 <fopen_count_inc>
}
c010a3d3:	c9                   	leave  
c010a3d4:	c3                   	ret    

c010a3d5 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a3d5:	55                   	push   %ebp
c010a3d6:	89 e5                	mov    %esp,%ebp
c010a3d8:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a3db:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3de:	8b 00                	mov    (%eax),%eax
c010a3e0:	83 f8 02             	cmp    $0x2,%eax
c010a3e3:	74 2e                	je     c010a413 <fd_array_release+0x3e>
c010a3e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3e8:	8b 00                	mov    (%eax),%eax
c010a3ea:	83 f8 03             	cmp    $0x3,%eax
c010a3ed:	74 24                	je     c010a413 <fd_array_release+0x3e>
c010a3ef:	c7 44 24 0c 2c 7a 11 	movl   $0xc0117a2c,0xc(%esp)
c010a3f6:	c0 
c010a3f7:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a3fe:	c0 
c010a3ff:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010a406:	00 
c010a407:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a40e:	e8 a1 6a ff ff       	call   c0100eb4 <__panic>
    assert(fopen_count(file) > 0);
c010a413:	8b 45 08             	mov    0x8(%ebp),%eax
c010a416:	89 04 24             	mov    %eax,(%esp)
c010a419:	e8 30 fd ff ff       	call   c010a14e <fopen_count>
c010a41e:	85 c0                	test   %eax,%eax
c010a420:	7f 24                	jg     c010a446 <fd_array_release+0x71>
c010a422:	c7 44 24 0c 63 7a 11 	movl   $0xc0117a63,0xc(%esp)
c010a429:	c0 
c010a42a:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a431:	c0 
c010a432:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010a439:	00 
c010a43a:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a441:	e8 6e 6a ff ff       	call   c0100eb4 <__panic>
    if (fopen_count_dec(file) == 0) {
c010a446:	8b 45 08             	mov    0x8(%ebp),%eax
c010a449:	89 04 24             	mov    %eax,(%esp)
c010a44c:	e8 22 fd ff ff       	call   c010a173 <fopen_count_dec>
c010a451:	85 c0                	test   %eax,%eax
c010a453:	75 0b                	jne    c010a460 <fd_array_release+0x8b>
        fd_array_free(file);
c010a455:	8b 45 08             	mov    0x8(%ebp),%eax
c010a458:	89 04 24             	mov    %eax,(%esp)
c010a45b:	e8 a0 fe ff ff       	call   c010a300 <fd_array_free>
    }
}
c010a460:	c9                   	leave  
c010a461:	c3                   	ret    

c010a462 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a462:	55                   	push   %ebp
c010a463:	89 e5                	mov    %esp,%ebp
c010a465:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a468:	8b 45 08             	mov    0x8(%ebp),%eax
c010a46b:	8b 00                	mov    (%eax),%eax
c010a46d:	83 f8 01             	cmp    $0x1,%eax
c010a470:	75 0a                	jne    c010a47c <fd_array_open+0x1a>
c010a472:	8b 45 08             	mov    0x8(%ebp),%eax
c010a475:	8b 40 14             	mov    0x14(%eax),%eax
c010a478:	85 c0                	test   %eax,%eax
c010a47a:	75 24                	jne    c010a4a0 <fd_array_open+0x3e>
c010a47c:	c7 44 24 0c 7c 7a 11 	movl   $0xc0117a7c,0xc(%esp)
c010a483:	c0 
c010a484:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a48b:	c0 
c010a48c:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c010a493:	00 
c010a494:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a49b:	e8 14 6a ff ff       	call   c0100eb4 <__panic>
    file->status = FD_OPENED;
c010a4a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4a3:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a4a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4ac:	89 04 24             	mov    %eax,(%esp)
c010a4af:	e8 a5 fc ff ff       	call   c010a159 <fopen_count_inc>
}
c010a4b4:	c9                   	leave  
c010a4b5:	c3                   	ret    

c010a4b6 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a4b6:	55                   	push   %ebp
c010a4b7:	89 e5                	mov    %esp,%ebp
c010a4b9:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a4bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4bf:	8b 00                	mov    (%eax),%eax
c010a4c1:	83 f8 02             	cmp    $0x2,%eax
c010a4c4:	74 24                	je     c010a4ea <fd_array_close+0x34>
c010a4c6:	c7 44 24 0c 11 7a 11 	movl   $0xc0117a11,0xc(%esp)
c010a4cd:	c0 
c010a4ce:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a4d5:	c0 
c010a4d6:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a4dd:	00 
c010a4de:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a4e5:	e8 ca 69 ff ff       	call   c0100eb4 <__panic>
    assert(fopen_count(file) > 0);
c010a4ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4ed:	89 04 24             	mov    %eax,(%esp)
c010a4f0:	e8 59 fc ff ff       	call   c010a14e <fopen_count>
c010a4f5:	85 c0                	test   %eax,%eax
c010a4f7:	7f 24                	jg     c010a51d <fd_array_close+0x67>
c010a4f9:	c7 44 24 0c 63 7a 11 	movl   $0xc0117a63,0xc(%esp)
c010a500:	c0 
c010a501:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a508:	c0 
c010a509:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010a510:	00 
c010a511:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a518:	e8 97 69 ff ff       	call   c0100eb4 <__panic>
    file->status = FD_CLOSED;
c010a51d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a520:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a526:	8b 45 08             	mov    0x8(%ebp),%eax
c010a529:	89 04 24             	mov    %eax,(%esp)
c010a52c:	e8 42 fc ff ff       	call   c010a173 <fopen_count_dec>
c010a531:	85 c0                	test   %eax,%eax
c010a533:	75 0b                	jne    c010a540 <fd_array_close+0x8a>
        fd_array_free(file);
c010a535:	8b 45 08             	mov    0x8(%ebp),%eax
c010a538:	89 04 24             	mov    %eax,(%esp)
c010a53b:	e8 c0 fd ff ff       	call   c010a300 <fd_array_free>
    }
}
c010a540:	c9                   	leave  
c010a541:	c3                   	ret    

c010a542 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a542:	55                   	push   %ebp
c010a543:	89 e5                	mov    %esp,%ebp
c010a545:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a548:	8b 45 08             	mov    0x8(%ebp),%eax
c010a54b:	8b 00                	mov    (%eax),%eax
c010a54d:	83 f8 01             	cmp    $0x1,%eax
c010a550:	75 0a                	jne    c010a55c <fd_array_dup+0x1a>
c010a552:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a555:	8b 00                	mov    (%eax),%eax
c010a557:	83 f8 02             	cmp    $0x2,%eax
c010a55a:	74 24                	je     c010a580 <fd_array_dup+0x3e>
c010a55c:	c7 44 24 0c ac 7a 11 	movl   $0xc0117aac,0xc(%esp)
c010a563:	c0 
c010a564:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a56b:	c0 
c010a56c:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010a573:	00 
c010a574:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a57b:	e8 34 69 ff ff       	call   c0100eb4 <__panic>
    to->pos = from->pos;
c010a580:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a583:	8b 50 10             	mov    0x10(%eax),%edx
c010a586:	8b 45 08             	mov    0x8(%ebp),%eax
c010a589:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a58c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a58f:	8b 50 04             	mov    0x4(%eax),%edx
c010a592:	8b 45 08             	mov    0x8(%ebp),%eax
c010a595:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a598:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a59b:	8b 50 08             	mov    0x8(%eax),%edx
c010a59e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5a1:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a5a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a5a7:	8b 40 14             	mov    0x14(%eax),%eax
c010a5aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a5ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5b0:	89 04 24             	mov    %eax,(%esp)
c010a5b3:	e8 e0 49 00 00       	call   c010ef98 <inode_ref_inc>
c010a5b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5bb:	89 04 24             	mov    %eax,(%esp)
c010a5be:	e8 dc 4a 00 00       	call   c010f09f <inode_open_inc>
    to->node = node;
c010a5c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a5c9:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a5cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5cf:	89 04 24             	mov    %eax,(%esp)
c010a5d2:	e8 8b fe ff ff       	call   c010a462 <fd_array_open>
}
c010a5d7:	c9                   	leave  
c010a5d8:	c3                   	ret    

c010a5d9 <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a5d9:	55                   	push   %ebp
c010a5da:	89 e5                	mov    %esp,%ebp
c010a5dc:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a5df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a5e3:	78 4b                	js     c010a630 <fd2file+0x57>
c010a5e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5e8:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a5ed:	77 41                	ja     c010a630 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a5ef:	e8 99 fb ff ff       	call   c010a18d <get_fd_array>
c010a5f4:	89 c2                	mov    %eax,%edx
c010a5f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f9:	c1 e0 02             	shl    $0x2,%eax
c010a5fc:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a603:	29 c1                	sub    %eax,%ecx
c010a605:	89 c8                	mov    %ecx,%eax
c010a607:	01 d0                	add    %edx,%eax
c010a609:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a60c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a60f:	8b 00                	mov    (%eax),%eax
c010a611:	83 f8 02             	cmp    $0x2,%eax
c010a614:	75 1a                	jne    c010a630 <fd2file+0x57>
c010a616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a619:	8b 40 0c             	mov    0xc(%eax),%eax
c010a61c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a61f:	75 0f                	jne    c010a630 <fd2file+0x57>
            *file_store = file;
c010a621:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a624:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a627:	89 10                	mov    %edx,(%eax)
            return 0;
c010a629:	b8 00 00 00 00       	mov    $0x0,%eax
c010a62e:	eb 05                	jmp    c010a635 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a630:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a635:	c9                   	leave  
c010a636:	c3                   	ret    

c010a637 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a637:	55                   	push   %ebp
c010a638:	89 e5                	mov    %esp,%ebp
c010a63a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a63d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a640:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a644:	8b 45 08             	mov    0x8(%ebp),%eax
c010a647:	89 04 24             	mov    %eax,(%esp)
c010a64a:	e8 8a ff ff ff       	call   c010a5d9 <fd2file>
c010a64f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a652:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a656:	74 07                	je     c010a65f <file_testfd+0x28>
        return 0;
c010a658:	b8 00 00 00 00       	mov    $0x0,%eax
c010a65d:	eb 33                	jmp    c010a692 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a65f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a663:	74 11                	je     c010a676 <file_testfd+0x3f>
c010a665:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a668:	8b 40 04             	mov    0x4(%eax),%eax
c010a66b:	85 c0                	test   %eax,%eax
c010a66d:	75 07                	jne    c010a676 <file_testfd+0x3f>
        return 0;
c010a66f:	b8 00 00 00 00       	mov    $0x0,%eax
c010a674:	eb 1c                	jmp    c010a692 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a676:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a67a:	74 11                	je     c010a68d <file_testfd+0x56>
c010a67c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a67f:	8b 40 08             	mov    0x8(%eax),%eax
c010a682:	85 c0                	test   %eax,%eax
c010a684:	75 07                	jne    c010a68d <file_testfd+0x56>
        return 0;
c010a686:	b8 00 00 00 00       	mov    $0x0,%eax
c010a68b:	eb 05                	jmp    c010a692 <file_testfd+0x5b>
    }
    return 1;
c010a68d:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a692:	c9                   	leave  
c010a693:	c3                   	ret    

c010a694 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a694:	55                   	push   %ebp
c010a695:	89 e5                	mov    %esp,%ebp
c010a697:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c010a69a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a6a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a6a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6ab:	83 e0 03             	and    $0x3,%eax
c010a6ae:	83 f8 01             	cmp    $0x1,%eax
c010a6b1:	74 15                	je     c010a6c8 <file_open+0x34>
c010a6b3:	83 f8 01             	cmp    $0x1,%eax
c010a6b6:	72 07                	jb     c010a6bf <file_open+0x2b>
c010a6b8:	83 f8 02             	cmp    $0x2,%eax
c010a6bb:	74 14                	je     c010a6d1 <file_open+0x3d>
c010a6bd:	eb 21                	jmp    c010a6e0 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a6bf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a6c6:	eb 22                	jmp    c010a6ea <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a6c8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a6cf:	eb 19                	jmp    c010a6ea <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a6d1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a6d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6db:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a6de:	eb 0a                	jmp    c010a6ea <file_open+0x56>
    default:
        return -E_INVAL;
c010a6e0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a6e5:	e9 45 01 00 00       	jmp    c010a82f <file_open+0x19b>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a6ea:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a6ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a6f1:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a6f8:	e8 2a fb ff ff       	call   c010a227 <fd_array_alloc>
c010a6fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a700:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a704:	74 08                	je     c010a70e <file_open+0x7a>
        return ret;
c010a706:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a709:	e9 21 01 00 00       	jmp    c010a82f <file_open+0x19b>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a70e:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a711:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a715:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a718:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a71c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a71f:	89 04 24             	mov    %eax,(%esp)
c010a722:	e8 52 55 00 00       	call   c010fc79 <vfs_open>
c010a727:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a72a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a72e:	74 13                	je     c010a743 <file_open+0xaf>
        fd_array_free(file);
c010a730:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a733:	89 04 24             	mov    %eax,(%esp)
c010a736:	e8 c5 fb ff ff       	call   c010a300 <fd_array_free>
        return ret;
c010a73b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a73e:	e9 ec 00 00 00       	jmp    c010a82f <file_open+0x19b>
    }

    file->pos = 0;
c010a743:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a746:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a74d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a750:	83 e0 20             	and    $0x20,%eax
c010a753:	85 c0                	test   %eax,%eax
c010a755:	0f 84 a8 00 00 00    	je     c010a803 <file_open+0x16f>
        struct stat __stat, *stat = &__stat;
c010a75b:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a75e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a761:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a764:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a767:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a76b:	74 17                	je     c010a784 <file_open+0xf0>
c010a76d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a770:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a773:	85 c0                	test   %eax,%eax
c010a775:	74 0d                	je     c010a784 <file_open+0xf0>
c010a777:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a77a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a77d:	8b 40 14             	mov    0x14(%eax),%eax
c010a780:	85 c0                	test   %eax,%eax
c010a782:	75 24                	jne    c010a7a8 <file_open+0x114>
c010a784:	c7 44 24 0c e0 7a 11 	movl   $0xc0117ae0,0xc(%esp)
c010a78b:	c0 
c010a78c:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a793:	c0 
c010a794:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010a79b:	00 
c010a79c:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a7a3:	e8 0c 67 ff ff       	call   c0100eb4 <__panic>
c010a7a8:	c7 44 24 04 2e 7b 11 	movl   $0xc0117b2e,0x4(%esp)
c010a7af:	c0 
c010a7b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7b3:	89 04 24             	mov    %eax,(%esp)
c010a7b6:	e8 e5 49 00 00       	call   c010f1a0 <inode_check>
c010a7bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7be:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7c1:	8b 40 14             	mov    0x14(%eax),%eax
c010a7c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a7c7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a7ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a7ce:	89 14 24             	mov    %edx,(%esp)
c010a7d1:	ff d0                	call   *%eax
c010a7d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a7d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a7da:	74 1b                	je     c010a7f7 <file_open+0x163>
            vfs_close(node);
c010a7dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a7df:	89 04 24             	mov    %eax,(%esp)
c010a7e2:	e8 82 57 00 00       	call   c010ff69 <vfs_close>
            fd_array_free(file);
c010a7e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7ea:	89 04 24             	mov    %eax,(%esp)
c010a7ed:	e8 0e fb ff ff       	call   c010a300 <fd_array_free>
            return ret;
c010a7f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7f5:	eb 38                	jmp    c010a82f <file_open+0x19b>
        }
        file->pos = stat->st_size;
c010a7f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7fa:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a7fd:	8b 52 0c             	mov    0xc(%edx),%edx
c010a800:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a803:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a806:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a809:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a80c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a80f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a812:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a815:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a818:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a81b:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a81e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a821:	89 04 24             	mov    %eax,(%esp)
c010a824:	e8 39 fc ff ff       	call   c010a462 <fd_array_open>
    return file->fd;
c010a829:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a82c:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a82f:	c9                   	leave  
c010a830:	c3                   	ret    

c010a831 <file_close>:

// close file
int
file_close(int fd) {
c010a831:	55                   	push   %ebp
c010a832:	89 e5                	mov    %esp,%ebp
c010a834:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a837:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a83a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a83e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a841:	89 04 24             	mov    %eax,(%esp)
c010a844:	e8 90 fd ff ff       	call   c010a5d9 <fd2file>
c010a849:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a84c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a850:	74 05                	je     c010a857 <file_close+0x26>
        return ret;
c010a852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a855:	eb 10                	jmp    c010a867 <file_close+0x36>
    }
    fd_array_close(file);
c010a857:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a85a:	89 04 24             	mov    %eax,(%esp)
c010a85d:	e8 54 fc ff ff       	call   c010a4b6 <fd_array_close>
    return 0;
c010a862:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a867:	c9                   	leave  
c010a868:	c3                   	ret    

c010a869 <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a869:	55                   	push   %ebp
c010a86a:	89 e5                	mov    %esp,%ebp
c010a86c:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a86f:	8b 45 14             	mov    0x14(%ebp),%eax
c010a872:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a878:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a87b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a87f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a882:	89 04 24             	mov    %eax,(%esp)
c010a885:	e8 4f fd ff ff       	call   c010a5d9 <fd2file>
c010a88a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a88d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a891:	74 08                	je     c010a89b <file_read+0x32>
        return ret;
c010a893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a896:	e9 06 01 00 00       	jmp    c010a9a1 <file_read+0x138>
    }
    if (!file->readable) {
c010a89b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a89e:	8b 40 04             	mov    0x4(%eax),%eax
c010a8a1:	85 c0                	test   %eax,%eax
c010a8a3:	75 0a                	jne    c010a8af <file_read+0x46>
        return -E_INVAL;
c010a8a5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a8aa:	e9 f2 00 00 00       	jmp    c010a9a1 <file_read+0x138>
    }
    fd_array_acquire(file);
c010a8af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8b2:	89 04 24             	mov    %eax,(%esp)
c010a8b5:	e8 da fa ff ff       	call   c010a394 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a8ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8bd:	8b 40 10             	mov    0x10(%eax),%eax
c010a8c0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a8c4:	8b 45 10             	mov    0x10(%ebp),%eax
c010a8c7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a8cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a8ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8d2:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a8d5:	89 04 24             	mov    %eax,(%esp)
c010a8d8:	e8 81 09 00 00       	call   c010b25e <iobuf_init>
c010a8dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a8e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8e3:	8b 40 14             	mov    0x14(%eax),%eax
c010a8e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a8e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a8ed:	74 17                	je     c010a906 <file_read+0x9d>
c010a8ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8f2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8f5:	85 c0                	test   %eax,%eax
c010a8f7:	74 0d                	je     c010a906 <file_read+0x9d>
c010a8f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8fc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8ff:	8b 40 0c             	mov    0xc(%eax),%eax
c010a902:	85 c0                	test   %eax,%eax
c010a904:	75 24                	jne    c010a92a <file_read+0xc1>
c010a906:	c7 44 24 0c 34 7b 11 	movl   $0xc0117b34,0xc(%esp)
c010a90d:	c0 
c010a90e:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010a915:	c0 
c010a916:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010a91d:	00 
c010a91e:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010a925:	e8 8a 65 ff ff       	call   c0100eb4 <__panic>
c010a92a:	c7 44 24 04 81 7b 11 	movl   $0xc0117b81,0x4(%esp)
c010a931:	c0 
c010a932:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a935:	89 04 24             	mov    %eax,(%esp)
c010a938:	e8 63 48 00 00       	call   c010f1a0 <inode_check>
c010a93d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a940:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a943:	8b 40 0c             	mov    0xc(%eax),%eax
c010a946:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a949:	8b 52 14             	mov    0x14(%edx),%edx
c010a94c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a94f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a953:	89 14 24             	mov    %edx,(%esp)
c010a956:	ff d0                	call   *%eax
c010a958:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010a95b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a95e:	8b 50 08             	mov    0x8(%eax),%edx
c010a961:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a964:	8b 40 0c             	mov    0xc(%eax),%eax
c010a967:	29 c2                	sub    %eax,%edx
c010a969:	89 d0                	mov    %edx,%eax
c010a96b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010a96e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a971:	8b 00                	mov    (%eax),%eax
c010a973:	83 f8 02             	cmp    $0x2,%eax
c010a976:	75 13                	jne    c010a98b <file_read+0x122>
        file->pos += copied;
c010a978:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a97b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a97e:	8b 52 10             	mov    0x10(%edx),%edx
c010a981:	89 d1                	mov    %edx,%ecx
c010a983:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a986:	01 ca                	add    %ecx,%edx
c010a988:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010a98b:	8b 45 14             	mov    0x14(%ebp),%eax
c010a98e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a991:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010a993:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a996:	89 04 24             	mov    %eax,(%esp)
c010a999:	e8 37 fa ff ff       	call   c010a3d5 <fd_array_release>
    return ret;
c010a99e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a9a1:	c9                   	leave  
c010a9a2:	c3                   	ret    

c010a9a3 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010a9a3:	55                   	push   %ebp
c010a9a4:	89 e5                	mov    %esp,%ebp
c010a9a6:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a9a9:	8b 45 14             	mov    0x14(%ebp),%eax
c010a9ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a9b2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a9b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9bc:	89 04 24             	mov    %eax,(%esp)
c010a9bf:	e8 15 fc ff ff       	call   c010a5d9 <fd2file>
c010a9c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9cb:	74 08                	je     c010a9d5 <file_write+0x32>
        return ret;
c010a9cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9d0:	e9 06 01 00 00       	jmp    c010aadb <file_write+0x138>
    }
    if (!file->writable) {
c010a9d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9d8:	8b 40 08             	mov    0x8(%eax),%eax
c010a9db:	85 c0                	test   %eax,%eax
c010a9dd:	75 0a                	jne    c010a9e9 <file_write+0x46>
        return -E_INVAL;
c010a9df:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a9e4:	e9 f2 00 00 00       	jmp    c010aadb <file_write+0x138>
    }
    fd_array_acquire(file);
c010a9e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9ec:	89 04 24             	mov    %eax,(%esp)
c010a9ef:	e8 a0 f9 ff ff       	call   c010a394 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a9f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9f7:	8b 40 10             	mov    0x10(%eax),%eax
c010a9fa:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a9fe:	8b 45 10             	mov    0x10(%ebp),%eax
c010aa01:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aa05:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa08:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa0c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aa0f:	89 04 24             	mov    %eax,(%esp)
c010aa12:	e8 47 08 00 00       	call   c010b25e <iobuf_init>
c010aa17:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010aa1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa1d:	8b 40 14             	mov    0x14(%eax),%eax
c010aa20:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aa23:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aa27:	74 17                	je     c010aa40 <file_write+0x9d>
c010aa29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa2c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa2f:	85 c0                	test   %eax,%eax
c010aa31:	74 0d                	je     c010aa40 <file_write+0x9d>
c010aa33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa36:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa39:	8b 40 10             	mov    0x10(%eax),%eax
c010aa3c:	85 c0                	test   %eax,%eax
c010aa3e:	75 24                	jne    c010aa64 <file_write+0xc1>
c010aa40:	c7 44 24 0c 88 7b 11 	movl   $0xc0117b88,0xc(%esp)
c010aa47:	c0 
c010aa48:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010aa4f:	c0 
c010aa50:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010aa57:	00 
c010aa58:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010aa5f:	e8 50 64 ff ff       	call   c0100eb4 <__panic>
c010aa64:	c7 44 24 04 d6 7b 11 	movl   $0xc0117bd6,0x4(%esp)
c010aa6b:	c0 
c010aa6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa6f:	89 04 24             	mov    %eax,(%esp)
c010aa72:	e8 29 47 00 00       	call   c010f1a0 <inode_check>
c010aa77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa7a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa7d:	8b 40 10             	mov    0x10(%eax),%eax
c010aa80:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa83:	8b 52 14             	mov    0x14(%edx),%edx
c010aa86:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aa89:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aa8d:	89 14 24             	mov    %edx,(%esp)
c010aa90:	ff d0                	call   *%eax
c010aa92:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010aa95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa98:	8b 50 08             	mov    0x8(%eax),%edx
c010aa9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa9e:	8b 40 0c             	mov    0xc(%eax),%eax
c010aaa1:	29 c2                	sub    %eax,%edx
c010aaa3:	89 d0                	mov    %edx,%eax
c010aaa5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010aaa8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaab:	8b 00                	mov    (%eax),%eax
c010aaad:	83 f8 02             	cmp    $0x2,%eax
c010aab0:	75 13                	jne    c010aac5 <file_write+0x122>
        file->pos += copied;
c010aab2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aab5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aab8:	8b 52 10             	mov    0x10(%edx),%edx
c010aabb:	89 d1                	mov    %edx,%ecx
c010aabd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aac0:	01 ca                	add    %ecx,%edx
c010aac2:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010aac5:	8b 45 14             	mov    0x14(%ebp),%eax
c010aac8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aacb:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010aacd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aad0:	89 04 24             	mov    %eax,(%esp)
c010aad3:	e8 fd f8 ff ff       	call   c010a3d5 <fd_array_release>
    return ret;
c010aad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aadb:	c9                   	leave  
c010aadc:	c3                   	ret    

c010aadd <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010aadd:	55                   	push   %ebp
c010aade:	89 e5                	mov    %esp,%ebp
c010aae0:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010aae3:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010aae6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aae9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aaec:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aaf0:	8b 45 08             	mov    0x8(%ebp),%eax
c010aaf3:	89 04 24             	mov    %eax,(%esp)
c010aaf6:	e8 de fa ff ff       	call   c010a5d9 <fd2file>
c010aafb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aafe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab02:	74 08                	je     c010ab0c <file_seek+0x2f>
        return ret;
c010ab04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab07:	e9 72 01 00 00       	jmp    c010ac7e <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010ab0c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ab0f:	89 04 24             	mov    %eax,(%esp)
c010ab12:	e8 7d f8 ff ff       	call   c010a394 <fd_array_acquire>

    switch (whence) {
c010ab17:	8b 45 10             	mov    0x10(%ebp),%eax
c010ab1a:	83 f8 01             	cmp    $0x1,%eax
c010ab1d:	74 12                	je     c010ab31 <file_seek+0x54>
c010ab1f:	83 f8 02             	cmp    $0x2,%eax
c010ab22:	74 1b                	je     c010ab3f <file_seek+0x62>
c010ab24:	85 c0                	test   %eax,%eax
c010ab26:	0f 84 af 00 00 00    	je     c010abdb <file_seek+0xfe>
c010ab2c:	e9 a1 00 00 00       	jmp    c010abd2 <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010ab31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ab34:	8b 40 10             	mov    0x10(%eax),%eax
c010ab37:	01 45 0c             	add    %eax,0xc(%ebp)
c010ab3a:	e9 9d 00 00 00       	jmp    c010abdc <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010ab3f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ab42:	8b 40 14             	mov    0x14(%eax),%eax
c010ab45:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ab48:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab4c:	74 17                	je     c010ab65 <file_seek+0x88>
c010ab4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab51:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab54:	85 c0                	test   %eax,%eax
c010ab56:	74 0d                	je     c010ab65 <file_seek+0x88>
c010ab58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab5b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab5e:	8b 40 14             	mov    0x14(%eax),%eax
c010ab61:	85 c0                	test   %eax,%eax
c010ab63:	75 24                	jne    c010ab89 <file_seek+0xac>
c010ab65:	c7 44 24 0c e0 7a 11 	movl   $0xc0117ae0,0xc(%esp)
c010ab6c:	c0 
c010ab6d:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010ab74:	c0 
c010ab75:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010ab7c:	00 
c010ab7d:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010ab84:	e8 2b 63 ff ff       	call   c0100eb4 <__panic>
c010ab89:	c7 44 24 04 2e 7b 11 	movl   $0xc0117b2e,0x4(%esp)
c010ab90:	c0 
c010ab91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab94:	89 04 24             	mov    %eax,(%esp)
c010ab97:	e8 04 46 00 00       	call   c010f1a0 <inode_check>
c010ab9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab9f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aba2:	8b 40 14             	mov    0x14(%eax),%eax
c010aba5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010aba8:	8b 52 14             	mov    0x14(%edx),%edx
c010abab:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010abae:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010abb2:	89 14 24             	mov    %edx,(%esp)
c010abb5:	ff d0                	call   *%eax
c010abb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abbe:	75 10                	jne    c010abd0 <file_seek+0xf3>
            pos += stat->st_size;
c010abc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abc3:	8b 50 0c             	mov    0xc(%eax),%edx
c010abc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abc9:	01 d0                	add    %edx,%eax
c010abcb:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010abce:	eb 0c                	jmp    c010abdc <file_seek+0xff>
c010abd0:	eb 0a                	jmp    c010abdc <file_seek+0xff>
    default: ret = -E_INVAL;
c010abd2:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010abd9:	eb 01                	jmp    c010abdc <file_seek+0xff>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010abdb:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010abdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abe0:	0f 85 8a 00 00 00    	jne    c010ac70 <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010abe6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010abe9:	8b 40 14             	mov    0x14(%eax),%eax
c010abec:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010abef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010abf3:	74 17                	je     c010ac0c <file_seek+0x12f>
c010abf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abf8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abfb:	85 c0                	test   %eax,%eax
c010abfd:	74 0d                	je     c010ac0c <file_seek+0x12f>
c010abff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac02:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac05:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ac08:	85 c0                	test   %eax,%eax
c010ac0a:	75 24                	jne    c010ac30 <file_seek+0x153>
c010ac0c:	c7 44 24 0c dc 7b 11 	movl   $0xc0117bdc,0xc(%esp)
c010ac13:	c0 
c010ac14:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010ac1b:	c0 
c010ac1c:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010ac23:	00 
c010ac24:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010ac2b:	e8 84 62 ff ff       	call   c0100eb4 <__panic>
c010ac30:	c7 44 24 04 2c 7c 11 	movl   $0xc0117c2c,0x4(%esp)
c010ac37:	c0 
c010ac38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac3b:	89 04 24             	mov    %eax,(%esp)
c010ac3e:	e8 5d 45 00 00       	call   c010f1a0 <inode_check>
c010ac43:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac46:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac49:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ac4c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ac4f:	8b 52 14             	mov    0x14(%edx),%edx
c010ac52:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ac55:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ac59:	89 14 24             	mov    %edx,(%esp)
c010ac5c:	ff d0                	call   *%eax
c010ac5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac65:	75 09                	jne    c010ac70 <file_seek+0x193>
            file->pos = pos;
c010ac67:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac6a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ac6d:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ac70:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac73:	89 04 24             	mov    %eax,(%esp)
c010ac76:	e8 5a f7 ff ff       	call   c010a3d5 <fd_array_release>
    return ret;
c010ac7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ac7e:	c9                   	leave  
c010ac7f:	c3                   	ret    

c010ac80 <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010ac80:	55                   	push   %ebp
c010ac81:	89 e5                	mov    %esp,%ebp
c010ac83:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ac86:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ac89:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac8d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac90:	89 04 24             	mov    %eax,(%esp)
c010ac93:	e8 41 f9 ff ff       	call   c010a5d9 <fd2file>
c010ac98:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac9f:	74 08                	je     c010aca9 <file_fstat+0x29>
        return ret;
c010aca1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aca4:	e9 94 00 00 00       	jmp    c010ad3d <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010aca9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acac:	89 04 24             	mov    %eax,(%esp)
c010acaf:	e8 e0 f6 ff ff       	call   c010a394 <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010acb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acb7:	8b 40 14             	mov    0x14(%eax),%eax
c010acba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010acbd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010acc1:	74 17                	je     c010acda <file_fstat+0x5a>
c010acc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acc6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acc9:	85 c0                	test   %eax,%eax
c010accb:	74 0d                	je     c010acda <file_fstat+0x5a>
c010accd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acd0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acd3:	8b 40 14             	mov    0x14(%eax),%eax
c010acd6:	85 c0                	test   %eax,%eax
c010acd8:	75 24                	jne    c010acfe <file_fstat+0x7e>
c010acda:	c7 44 24 0c e0 7a 11 	movl   $0xc0117ae0,0xc(%esp)
c010ace1:	c0 
c010ace2:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010ace9:	c0 
c010acea:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010acf1:	00 
c010acf2:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010acf9:	e8 b6 61 ff ff       	call   c0100eb4 <__panic>
c010acfe:	c7 44 24 04 2e 7b 11 	movl   $0xc0117b2e,0x4(%esp)
c010ad05:	c0 
c010ad06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad09:	89 04 24             	mov    %eax,(%esp)
c010ad0c:	e8 8f 44 00 00       	call   c010f1a0 <inode_check>
c010ad11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad14:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad17:	8b 40 14             	mov    0x14(%eax),%eax
c010ad1a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ad1d:	8b 52 14             	mov    0x14(%edx),%edx
c010ad20:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ad23:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ad27:	89 14 24             	mov    %edx,(%esp)
c010ad2a:	ff d0                	call   *%eax
c010ad2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ad2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad32:	89 04 24             	mov    %eax,(%esp)
c010ad35:	e8 9b f6 ff ff       	call   c010a3d5 <fd_array_release>
    return ret;
c010ad3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ad3d:	c9                   	leave  
c010ad3e:	c3                   	ret    

c010ad3f <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010ad3f:	55                   	push   %ebp
c010ad40:	89 e5                	mov    %esp,%ebp
c010ad42:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ad45:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ad48:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ad4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad4f:	89 04 24             	mov    %eax,(%esp)
c010ad52:	e8 82 f8 ff ff       	call   c010a5d9 <fd2file>
c010ad57:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad5e:	74 08                	je     c010ad68 <file_fsync+0x29>
        return ret;
c010ad60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad63:	e9 8d 00 00 00       	jmp    c010adf5 <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010ad68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad6b:	89 04 24             	mov    %eax,(%esp)
c010ad6e:	e8 21 f6 ff ff       	call   c010a394 <fd_array_acquire>
    ret = vop_fsync(file->node);
c010ad73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad76:	8b 40 14             	mov    0x14(%eax),%eax
c010ad79:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad7c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad80:	74 17                	je     c010ad99 <file_fsync+0x5a>
c010ad82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad85:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad88:	85 c0                	test   %eax,%eax
c010ad8a:	74 0d                	je     c010ad99 <file_fsync+0x5a>
c010ad8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad8f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad92:	8b 40 18             	mov    0x18(%eax),%eax
c010ad95:	85 c0                	test   %eax,%eax
c010ad97:	75 24                	jne    c010adbd <file_fsync+0x7e>
c010ad99:	c7 44 24 0c 34 7c 11 	movl   $0xc0117c34,0xc(%esp)
c010ada0:	c0 
c010ada1:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010ada8:	c0 
c010ada9:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010adb0:	00 
c010adb1:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010adb8:	e8 f7 60 ff ff       	call   c0100eb4 <__panic>
c010adbd:	c7 44 24 04 82 7c 11 	movl   $0xc0117c82,0x4(%esp)
c010adc4:	c0 
c010adc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adc8:	89 04 24             	mov    %eax,(%esp)
c010adcb:	e8 d0 43 00 00       	call   c010f1a0 <inode_check>
c010add0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010add3:	8b 40 3c             	mov    0x3c(%eax),%eax
c010add6:	8b 40 18             	mov    0x18(%eax),%eax
c010add9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010addc:	8b 52 14             	mov    0x14(%edx),%edx
c010addf:	89 14 24             	mov    %edx,(%esp)
c010ade2:	ff d0                	call   *%eax
c010ade4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ade7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adea:	89 04 24             	mov    %eax,(%esp)
c010aded:	e8 e3 f5 ff ff       	call   c010a3d5 <fd_array_release>
    return ret;
c010adf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010adf5:	c9                   	leave  
c010adf6:	c3                   	ret    

c010adf7 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010adf7:	55                   	push   %ebp
c010adf8:	89 e5                	mov    %esp,%ebp
c010adfa:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010adfd:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010ae00:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae07:	89 04 24             	mov    %eax,(%esp)
c010ae0a:	e8 ca f7 ff ff       	call   c010a5d9 <fd2file>
c010ae0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae16:	74 08                	je     c010ae20 <file_getdirentry+0x29>
        return ret;
c010ae18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae1b:	e9 e3 00 00 00       	jmp    c010af03 <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010ae20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae23:	89 04 24             	mov    %eax,(%esp)
c010ae26:	e8 69 f5 ff ff       	call   c010a394 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010ae2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae2e:	8b 00                	mov    (%eax),%eax
c010ae30:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ae33:	83 c2 04             	add    $0x4,%edx
c010ae36:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ae3a:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010ae41:	00 
c010ae42:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ae46:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ae49:	89 04 24             	mov    %eax,(%esp)
c010ae4c:	e8 0d 04 00 00       	call   c010b25e <iobuf_init>
c010ae51:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010ae54:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae57:	8b 40 14             	mov    0x14(%eax),%eax
c010ae5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ae5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ae61:	74 17                	je     c010ae7a <file_getdirentry+0x83>
c010ae63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae66:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae69:	85 c0                	test   %eax,%eax
c010ae6b:	74 0d                	je     c010ae7a <file_getdirentry+0x83>
c010ae6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae70:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae73:	8b 40 20             	mov    0x20(%eax),%eax
c010ae76:	85 c0                	test   %eax,%eax
c010ae78:	75 24                	jne    c010ae9e <file_getdirentry+0xa7>
c010ae7a:	c7 44 24 0c 88 7c 11 	movl   $0xc0117c88,0xc(%esp)
c010ae81:	c0 
c010ae82:	c7 44 24 08 9e 79 11 	movl   $0xc011799e,0x8(%esp)
c010ae89:	c0 
c010ae8a:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c010ae91:	00 
c010ae92:	c7 04 24 b3 79 11 c0 	movl   $0xc01179b3,(%esp)
c010ae99:	e8 16 60 ff ff       	call   c0100eb4 <__panic>
c010ae9e:	c7 44 24 04 dc 7c 11 	movl   $0xc0117cdc,0x4(%esp)
c010aea5:	c0 
c010aea6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aea9:	89 04 24             	mov    %eax,(%esp)
c010aeac:	e8 ef 42 00 00       	call   c010f1a0 <inode_check>
c010aeb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aeb4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aeb7:	8b 40 20             	mov    0x20(%eax),%eax
c010aeba:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aebd:	8b 52 14             	mov    0x14(%edx),%edx
c010aec0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aec3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aec7:	89 14 24             	mov    %edx,(%esp)
c010aeca:	ff d0                	call   *%eax
c010aecc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aecf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aed3:	75 20                	jne    c010aef5 <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010aed5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aed8:	8b 00                	mov    (%eax),%eax
c010aeda:	89 c2                	mov    %eax,%edx
c010aedc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aedf:	8b 48 08             	mov    0x8(%eax),%ecx
c010aee2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aee5:	8b 40 0c             	mov    0xc(%eax),%eax
c010aee8:	29 c1                	sub    %eax,%ecx
c010aeea:	89 c8                	mov    %ecx,%eax
c010aeec:	01 d0                	add    %edx,%eax
c010aeee:	89 c2                	mov    %eax,%edx
c010aef0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aef3:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010aef5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aef8:	89 04 24             	mov    %eax,(%esp)
c010aefb:	e8 d5 f4 ff ff       	call   c010a3d5 <fd_array_release>
    return ret;
c010af00:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010af03:	c9                   	leave  
c010af04:	c3                   	ret    

c010af05 <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010af05:	55                   	push   %ebp
c010af06:	89 e5                	mov    %esp,%ebp
c010af08:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010af0b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010af0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af12:	8b 45 08             	mov    0x8(%ebp),%eax
c010af15:	89 04 24             	mov    %eax,(%esp)
c010af18:	e8 bc f6 ff ff       	call   c010a5d9 <fd2file>
c010af1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af24:	74 05                	je     c010af2b <file_dup+0x26>
        return ret;
c010af26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af29:	eb 38                	jmp    c010af63 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010af2b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010af2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af32:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af35:	89 04 24             	mov    %eax,(%esp)
c010af38:	e8 ea f2 ff ff       	call   c010a227 <fd_array_alloc>
c010af3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af44:	74 05                	je     c010af4b <file_dup+0x46>
        return ret;
c010af46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af49:	eb 18                	jmp    c010af63 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010af4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010af4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af51:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af55:	89 04 24             	mov    %eax,(%esp)
c010af58:	e8 e5 f5 ff ff       	call   c010a542 <fd_array_dup>
    return file2->fd;
c010af5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af60:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010af63:	c9                   	leave  
c010af64:	c3                   	ret    

c010af65 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010af65:	55                   	push   %ebp
c010af66:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010af68:	8b 45 08             	mov    0x8(%ebp),%eax
c010af6b:	8b 40 08             	mov    0x8(%eax),%eax
}
c010af6e:	5d                   	pop    %ebp
c010af6f:	c3                   	ret    

c010af70 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010af70:	55                   	push   %ebp
c010af71:	89 e5                	mov    %esp,%ebp
c010af73:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010af76:	e8 41 43 00 00       	call   c010f2bc <vfs_init>
    dev_init();
c010af7b:	e8 7e 5a 00 00       	call   c01109fe <dev_init>
    sfs_init();
c010af80:	e8 3b 68 00 00       	call   c01117c0 <sfs_init>
}
c010af85:	c9                   	leave  
c010af86:	c3                   	ret    

c010af87 <fs_cleanup>:

void
fs_cleanup(void) {
c010af87:	55                   	push   %ebp
c010af88:	89 e5                	mov    %esp,%ebp
c010af8a:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010af8d:	e8 e3 44 00 00       	call   c010f475 <vfs_cleanup>
}
c010af92:	c9                   	leave  
c010af93:	c3                   	ret    

c010af94 <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010af94:	55                   	push   %ebp
c010af95:	89 e5                	mov    %esp,%ebp
c010af97:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010af9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010af9d:	83 c0 0c             	add    $0xc,%eax
c010afa0:	89 04 24             	mov    %eax,(%esp)
c010afa3:	e8 6f ec ff ff       	call   c0109c17 <down>
}
c010afa8:	c9                   	leave  
c010afa9:	c3                   	ret    

c010afaa <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010afaa:	55                   	push   %ebp
c010afab:	89 e5                	mov    %esp,%ebp
c010afad:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010afb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010afb3:	83 c0 0c             	add    $0xc,%eax
c010afb6:	89 04 24             	mov    %eax,(%esp)
c010afb9:	e8 3e ec ff ff       	call   c0109bfc <up>
}
c010afbe:	c9                   	leave  
c010afbf:	c3                   	ret    

c010afc0 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010afc0:	55                   	push   %ebp
c010afc1:	89 e5                	mov    %esp,%ebp
c010afc3:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010afc6:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010afcd:	e8 da 9c ff ff       	call   c0104cac <kmalloc>
c010afd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afd5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afd9:	74 43                	je     c010b01e <files_create+0x5e>
        filesp->pwd = NULL;
c010afdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afde:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010afe4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afe7:	8d 50 18             	lea    0x18(%eax),%edx
c010afea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afed:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010aff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aff3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010affa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010affd:	83 c0 0c             	add    $0xc,%eax
c010b000:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b007:	00 
c010b008:	89 04 24             	mov    %eax,(%esp)
c010b00b:	e8 79 ea ff ff       	call   c0109a89 <sem_init>
        fd_array_init(filesp->fd_array);
c010b010:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b013:	8b 40 04             	mov    0x4(%eax),%eax
c010b016:	89 04 24             	mov    %eax,(%esp)
c010b019:	e8 c4 f1 ff ff       	call   c010a1e2 <fd_array_init>
    }
    return filesp;
c010b01e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b021:	c9                   	leave  
c010b022:	c3                   	ret    

c010b023 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b023:	55                   	push   %ebp
c010b024:	89 e5                	mov    %esp,%ebp
c010b026:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010b029:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b02d:	74 0f                	je     c010b03e <files_destroy+0x1b>
c010b02f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b032:	89 04 24             	mov    %eax,(%esp)
c010b035:	e8 2b ff ff ff       	call   c010af65 <files_count>
c010b03a:	85 c0                	test   %eax,%eax
c010b03c:	74 24                	je     c010b062 <files_destroy+0x3f>
c010b03e:	c7 44 24 0c e8 7c 11 	movl   $0xc0117ce8,0xc(%esp)
c010b045:	c0 
c010b046:	c7 44 24 08 13 7d 11 	movl   $0xc0117d13,0x8(%esp)
c010b04d:	c0 
c010b04e:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010b055:	00 
c010b056:	c7 04 24 28 7d 11 c0 	movl   $0xc0117d28,(%esp)
c010b05d:	e8 52 5e ff ff       	call   c0100eb4 <__panic>
    if (filesp->pwd != NULL) {
c010b062:	8b 45 08             	mov    0x8(%ebp),%eax
c010b065:	8b 00                	mov    (%eax),%eax
c010b067:	85 c0                	test   %eax,%eax
c010b069:	74 0d                	je     c010b078 <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c010b06b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b06e:	8b 00                	mov    (%eax),%eax
c010b070:	89 04 24             	mov    %eax,(%esp)
c010b073:	e8 3a 3f 00 00       	call   c010efb2 <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010b078:	8b 45 08             	mov    0x8(%ebp),%eax
c010b07b:	8b 40 04             	mov    0x4(%eax),%eax
c010b07e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b081:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b088:	eb 4a                	jmp    c010b0d4 <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c010b08a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b08d:	8b 00                	mov    (%eax),%eax
c010b08f:	83 f8 02             	cmp    $0x2,%eax
c010b092:	75 0b                	jne    c010b09f <files_destroy+0x7c>
            fd_array_close(file);
c010b094:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b097:	89 04 24             	mov    %eax,(%esp)
c010b09a:	e8 17 f4 ff ff       	call   c010a4b6 <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010b09f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0a2:	8b 00                	mov    (%eax),%eax
c010b0a4:	85 c0                	test   %eax,%eax
c010b0a6:	74 24                	je     c010b0cc <files_destroy+0xa9>
c010b0a8:	c7 44 24 0c 35 7d 11 	movl   $0xc0117d35,0xc(%esp)
c010b0af:	c0 
c010b0b0:	c7 44 24 08 13 7d 11 	movl   $0xc0117d13,0x8(%esp)
c010b0b7:	c0 
c010b0b8:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010b0bf:	00 
c010b0c0:	c7 04 24 28 7d 11 c0 	movl   $0xc0117d28,(%esp)
c010b0c7:	e8 e8 5d ff ff       	call   c0100eb4 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b0cc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b0d0:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b0d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0d7:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b0dc:	76 ac                	jbe    c010b08a <files_destroy+0x67>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b0de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e1:	89 04 24             	mov    %eax,(%esp)
c010b0e4:	e8 de 9b ff ff       	call   c0104cc7 <kfree>
}
c010b0e9:	c9                   	leave  
c010b0ea:	c3                   	ret    

c010b0eb <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b0eb:	55                   	push   %ebp
c010b0ec:	89 e5                	mov    %esp,%ebp
c010b0ee:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010b0f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b0f5:	74 0f                	je     c010b106 <files_closeall+0x1b>
c010b0f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0fa:	89 04 24             	mov    %eax,(%esp)
c010b0fd:	e8 63 fe ff ff       	call   c010af65 <files_count>
c010b102:	85 c0                	test   %eax,%eax
c010b104:	7f 24                	jg     c010b12a <files_closeall+0x3f>
c010b106:	c7 44 24 0c 50 7d 11 	movl   $0xc0117d50,0xc(%esp)
c010b10d:	c0 
c010b10e:	c7 44 24 08 13 7d 11 	movl   $0xc0117d13,0x8(%esp)
c010b115:	c0 
c010b116:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010b11d:	00 
c010b11e:	c7 04 24 28 7d 11 c0 	movl   $0xc0117d28,(%esp)
c010b125:	e8 8a 5d ff ff       	call   c0100eb4 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b12a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b12d:	8b 40 04             	mov    0x4(%eax),%eax
c010b130:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b133:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b13a:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b13e:	eb 1d                	jmp    c010b15d <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c010b140:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b143:	8b 00                	mov    (%eax),%eax
c010b145:	83 f8 02             	cmp    $0x2,%eax
c010b148:	75 0b                	jne    c010b155 <files_closeall+0x6a>
            fd_array_close(file);
c010b14a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b14d:	89 04 24             	mov    %eax,(%esp)
c010b150:	e8 61 f3 ff ff       	call   c010a4b6 <fd_array_close>
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b155:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b159:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b15d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b160:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b165:	76 d9                	jbe    c010b140 <files_closeall+0x55>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b167:	c9                   	leave  
c010b168:	c3                   	ret    

c010b169 <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c010b169:	55                   	push   %ebp
c010b16a:	89 e5                	mov    %esp,%ebp
c010b16c:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010b16f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b173:	74 06                	je     c010b17b <dup_files+0x12>
c010b175:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b179:	75 24                	jne    c010b19f <dup_files+0x36>
c010b17b:	c7 44 24 0c 7a 7d 11 	movl   $0xc0117d7a,0xc(%esp)
c010b182:	c0 
c010b183:	c7 44 24 08 13 7d 11 	movl   $0xc0117d13,0x8(%esp)
c010b18a:	c0 
c010b18b:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010b192:	00 
c010b193:	c7 04 24 28 7d 11 c0 	movl   $0xc0117d28,(%esp)
c010b19a:	e8 15 5d ff ff       	call   c0100eb4 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b19f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a2:	89 04 24             	mov    %eax,(%esp)
c010b1a5:	e8 bb fd ff ff       	call   c010af65 <files_count>
c010b1aa:	85 c0                	test   %eax,%eax
c010b1ac:	75 0f                	jne    c010b1bd <dup_files+0x54>
c010b1ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1b1:	89 04 24             	mov    %eax,(%esp)
c010b1b4:	e8 ac fd ff ff       	call   c010af65 <files_count>
c010b1b9:	85 c0                	test   %eax,%eax
c010b1bb:	7f 24                	jg     c010b1e1 <dup_files+0x78>
c010b1bd:	c7 44 24 0c 98 7d 11 	movl   $0xc0117d98,0xc(%esp)
c010b1c4:	c0 
c010b1c5:	c7 44 24 08 13 7d 11 	movl   $0xc0117d13,0x8(%esp)
c010b1cc:	c0 
c010b1cd:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010b1d4:	00 
c010b1d5:	c7 04 24 28 7d 11 c0 	movl   $0xc0117d28,(%esp)
c010b1dc:	e8 d3 5c ff ff       	call   c0100eb4 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b1e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1e4:	8b 10                	mov    (%eax),%edx
c010b1e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1e9:	89 10                	mov    %edx,(%eax)
c010b1eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ee:	8b 00                	mov    (%eax),%eax
c010b1f0:	85 c0                	test   %eax,%eax
c010b1f2:	74 0d                	je     c010b201 <dup_files+0x98>
        vop_ref_inc(to->pwd);
c010b1f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1f7:	8b 00                	mov    (%eax),%eax
c010b1f9:	89 04 24             	mov    %eax,(%esp)
c010b1fc:	e8 97 3d 00 00       	call   c010ef98 <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b201:	8b 45 08             	mov    0x8(%ebp),%eax
c010b204:	8b 40 04             	mov    0x4(%eax),%eax
c010b207:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b20a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b20d:	8b 40 04             	mov    0x4(%eax),%eax
c010b210:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b213:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b21a:	eb 31                	jmp    c010b24d <dup_files+0xe4>
        if (from_file->status == FD_OPENED) {
c010b21c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b21f:	8b 00                	mov    (%eax),%eax
c010b221:	83 f8 02             	cmp    $0x2,%eax
c010b224:	75 1b                	jne    c010b241 <dup_files+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b226:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b229:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b22f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b232:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b236:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b239:	89 04 24             	mov    %eax,(%esp)
c010b23c:	e8 01 f3 ff ff       	call   c010a542 <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b241:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b245:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b249:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b24d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b250:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b255:	76 c5                	jbe    c010b21c <dup_files+0xb3>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b257:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b25c:	c9                   	leave  
c010b25d:	c3                   	ret    

c010b25e <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b25e:	55                   	push   %ebp
c010b25f:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b261:	8b 45 08             	mov    0x8(%ebp),%eax
c010b264:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b267:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b269:	8b 45 08             	mov    0x8(%ebp),%eax
c010b26c:	8b 55 14             	mov    0x14(%ebp),%edx
c010b26f:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b272:	8b 45 08             	mov    0x8(%ebp),%eax
c010b275:	8b 55 10             	mov    0x10(%ebp),%edx
c010b278:	89 50 0c             	mov    %edx,0xc(%eax)
c010b27b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b27e:	8b 50 0c             	mov    0xc(%eax),%edx
c010b281:	8b 45 08             	mov    0x8(%ebp),%eax
c010b284:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b287:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b28a:	5d                   	pop    %ebp
c010b28b:	c3                   	ret    

c010b28c <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b28c:	55                   	push   %ebp
c010b28d:	89 e5                	mov    %esp,%ebp
c010b28f:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b292:	8b 45 08             	mov    0x8(%ebp),%eax
c010b295:	8b 40 0c             	mov    0xc(%eax),%eax
c010b298:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b29b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b29e:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b2a1:	76 06                	jbe    c010b2a9 <iobuf_move+0x1d>
        alen = len;
c010b2a3:	8b 45 10             	mov    0x10(%ebp),%eax
c010b2a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b2a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b2ad:	74 57                	je     c010b306 <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b2af:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2b2:	8b 00                	mov    (%eax),%eax
c010b2b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b2b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b2bd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b2c1:	74 12                	je     c010b2d5 <iobuf_move+0x49>
            void *tmp = src;
c010b2c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b2c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b2cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b2d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2d8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b2dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2df:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2e6:	89 04 24             	mov    %eax,(%esp)
c010b2e9:	e8 49 a1 00 00       	call   c0115437 <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b2ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2f8:	89 04 24             	mov    %eax,(%esp)
c010b2fb:	e8 a1 00 00 00       	call   c010b3a1 <iobuf_skip>
c010b300:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b303:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b306:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b30a:	74 08                	je     c010b314 <iobuf_move+0x88>
        *copiedp = alen;
c010b30c:	8b 45 18             	mov    0x18(%ebp),%eax
c010b30f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b312:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b314:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b318:	75 07                	jne    c010b321 <iobuf_move+0x95>
c010b31a:	b8 00 00 00 00       	mov    $0x0,%eax
c010b31f:	eb 05                	jmp    c010b326 <iobuf_move+0x9a>
c010b321:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b326:	c9                   	leave  
c010b327:	c3                   	ret    

c010b328 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b328:	55                   	push   %ebp
c010b329:	89 e5                	mov    %esp,%ebp
c010b32b:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b32e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b331:	8b 40 0c             	mov    0xc(%eax),%eax
c010b334:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b337:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b33a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b33d:	76 06                	jbe    c010b345 <iobuf_move_zeros+0x1d>
        alen = len;
c010b33f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b342:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b345:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b349:	74 34                	je     c010b37f <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b34e:	8b 00                	mov    (%eax),%eax
c010b350:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b353:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b357:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b35e:	00 
c010b35f:	89 04 24             	mov    %eax,(%esp)
c010b362:	e8 91 a0 00 00       	call   c01153f8 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b367:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b36a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b36e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b371:	89 04 24             	mov    %eax,(%esp)
c010b374:	e8 28 00 00 00       	call   c010b3a1 <iobuf_skip>
c010b379:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b37c:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b37f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b383:	74 08                	je     c010b38d <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b385:	8b 45 10             	mov    0x10(%ebp),%eax
c010b388:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b38b:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b38d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b391:	75 07                	jne    c010b39a <iobuf_move_zeros+0x72>
c010b393:	b8 00 00 00 00       	mov    $0x0,%eax
c010b398:	eb 05                	jmp    c010b39f <iobuf_move_zeros+0x77>
c010b39a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b39f:	c9                   	leave  
c010b3a0:	c3                   	ret    

c010b3a1 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b3a1:	55                   	push   %ebp
c010b3a2:	89 e5                	mov    %esp,%ebp
c010b3a4:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b3a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3aa:	8b 40 0c             	mov    0xc(%eax),%eax
c010b3ad:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b3b0:	73 24                	jae    c010b3d6 <iobuf_skip+0x35>
c010b3b2:	c7 44 24 0c c6 7d 11 	movl   $0xc0117dc6,0xc(%esp)
c010b3b9:	c0 
c010b3ba:	c7 44 24 08 d9 7d 11 	movl   $0xc0117dd9,0x8(%esp)
c010b3c1:	c0 
c010b3c2:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b3c9:	00 
c010b3ca:	c7 04 24 ee 7d 11 c0 	movl   $0xc0117dee,(%esp)
c010b3d1:	e8 de 5a ff ff       	call   c0100eb4 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b3d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3d9:	8b 10                	mov    (%eax),%edx
c010b3db:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3de:	01 c2                	add    %eax,%edx
c010b3e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3e3:	89 10                	mov    %edx,(%eax)
c010b3e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3e8:	8b 40 04             	mov    0x4(%eax),%eax
c010b3eb:	89 c2                	mov    %eax,%edx
c010b3ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3f0:	01 d0                	add    %edx,%eax
c010b3f2:	89 c2                	mov    %eax,%edx
c010b3f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3f7:	89 50 04             	mov    %edx,0x4(%eax)
c010b3fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3fd:	8b 40 0c             	mov    0xc(%eax),%eax
c010b400:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b403:	89 c2                	mov    %eax,%edx
c010b405:	8b 45 08             	mov    0x8(%ebp),%eax
c010b408:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b40b:	c9                   	leave  
c010b40c:	c3                   	ret    

c010b40d <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b40d:	55                   	push   %ebp
c010b40e:	89 e5                	mov    %esp,%ebp
c010b410:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b413:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b417:	74 25                	je     c010b43e <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b419:	8b 45 08             	mov    0x8(%ebp),%eax
c010b41c:	83 c0 1c             	add    $0x1c,%eax
c010b41f:	89 04 24             	mov    %eax,(%esp)
c010b422:	e8 f0 e7 ff ff       	call   c0109c17 <down>
        if (current != NULL) {
c010b427:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b42c:	85 c0                	test   %eax,%eax
c010b42e:	74 0e                	je     c010b43e <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b430:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b435:	8b 50 04             	mov    0x4(%eax),%edx
c010b438:	8b 45 08             	mov    0x8(%ebp),%eax
c010b43b:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b43e:	c9                   	leave  
c010b43f:	c3                   	ret    

c010b440 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b440:	55                   	push   %ebp
c010b441:	89 e5                	mov    %esp,%ebp
c010b443:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b446:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b44a:	74 18                	je     c010b464 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b44c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b44f:	83 c0 1c             	add    $0x1c,%eax
c010b452:	89 04 24             	mov    %eax,(%esp)
c010b455:	e8 a2 e7 ff ff       	call   c0109bfc <up>
        mm->locked_by = 0;
c010b45a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b45d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b464:	c9                   	leave  
c010b465:	c3                   	ret    

c010b466 <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b466:	55                   	push   %ebp
c010b467:	89 e5                	mov    %esp,%ebp
c010b469:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b46c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b471:	8b 40 18             	mov    0x18(%eax),%eax
c010b474:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b477:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b47e:	e8 29 98 ff ff       	call   c0104cac <kmalloc>
c010b483:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b48a:	75 07                	jne    c010b493 <copy_path+0x2d>
        return -E_NO_MEM;
c010b48c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b491:	eb 66                	jmp    c010b4f9 <copy_path+0x93>
    }
    lock_mm(mm);
c010b493:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b496:	89 04 24             	mov    %eax,(%esp)
c010b499:	e8 6f ff ff ff       	call   c010b40d <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b49e:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b4a5:	00 
c010b4a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4a9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b4ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b4b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4b7:	89 04 24             	mov    %eax,(%esp)
c010b4ba:	e8 de db ff ff       	call   c010909d <copy_string>
c010b4bf:	85 c0                	test   %eax,%eax
c010b4c1:	75 1e                	jne    c010b4e1 <copy_path+0x7b>
        unlock_mm(mm);
c010b4c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4c6:	89 04 24             	mov    %eax,(%esp)
c010b4c9:	e8 72 ff ff ff       	call   c010b440 <unlock_mm>
        goto failed_cleanup;
c010b4ce:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b4cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4d2:	89 04 24             	mov    %eax,(%esp)
c010b4d5:	e8 ed 97 ff ff       	call   c0104cc7 <kfree>
    return -E_INVAL;
c010b4da:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b4df:	eb 18                	jmp    c010b4f9 <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b4e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4e4:	89 04 24             	mov    %eax,(%esp)
c010b4e7:	e8 54 ff ff ff       	call   c010b440 <unlock_mm>
    *to = buffer;
c010b4ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b4f2:	89 10                	mov    %edx,(%eax)
    return 0;
c010b4f4:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b4f9:	c9                   	leave  
c010b4fa:	c3                   	ret    

c010b4fb <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b4fb:	55                   	push   %ebp
c010b4fc:	89 e5                	mov    %esp,%ebp
c010b4fe:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b501:	8b 45 08             	mov    0x8(%ebp),%eax
c010b504:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b508:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b50b:	89 04 24             	mov    %eax,(%esp)
c010b50e:	e8 53 ff ff ff       	call   c010b466 <copy_path>
c010b513:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b516:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b51a:	74 05                	je     c010b521 <sysfile_open+0x26>
        return ret;
c010b51c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b51f:	eb 23                	jmp    c010b544 <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c010b521:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b524:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b527:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b52b:	89 04 24             	mov    %eax,(%esp)
c010b52e:	e8 61 f1 ff ff       	call   c010a694 <file_open>
c010b533:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b536:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b539:	89 04 24             	mov    %eax,(%esp)
c010b53c:	e8 86 97 ff ff       	call   c0104cc7 <kfree>
    return ret;
c010b541:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b544:	c9                   	leave  
c010b545:	c3                   	ret    

c010b546 <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b546:	55                   	push   %ebp
c010b547:	89 e5                	mov    %esp,%ebp
c010b549:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b54c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b54f:	89 04 24             	mov    %eax,(%esp)
c010b552:	e8 da f2 ff ff       	call   c010a831 <file_close>
}
c010b557:	c9                   	leave  
c010b558:	c3                   	ret    

c010b559 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b559:	55                   	push   %ebp
c010b55a:	89 e5                	mov    %esp,%ebp
c010b55c:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b55f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b564:	8b 40 18             	mov    0x18(%eax),%eax
c010b567:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b56a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b56e:	75 0a                	jne    c010b57a <sysfile_read+0x21>
        return 0;
c010b570:	b8 00 00 00 00       	mov    $0x0,%eax
c010b575:	e9 55 01 00 00       	jmp    c010b6cf <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b57a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b581:	00 
c010b582:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b589:	00 
c010b58a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b58d:	89 04 24             	mov    %eax,(%esp)
c010b590:	e8 a2 f0 ff ff       	call   c010a637 <file_testfd>
c010b595:	85 c0                	test   %eax,%eax
c010b597:	75 0a                	jne    c010b5a3 <sysfile_read+0x4a>
        return -E_INVAL;
c010b599:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b59e:	e9 2c 01 00 00       	jmp    c010b6cf <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b5a3:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b5aa:	e8 fd 96 ff ff       	call   c0104cac <kmalloc>
c010b5af:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b5b2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b5b6:	75 0a                	jne    c010b5c2 <sysfile_read+0x69>
        return -E_NO_MEM;
c010b5b8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b5bd:	e9 0d 01 00 00       	jmp    c010b6cf <sysfile_read+0x176>
    }

    int ret = 0;
c010b5c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b5c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b5d0:	e9 d7 00 00 00       	jmp    c010b6ac <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b5d5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b5dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5df:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b5e2:	76 06                	jbe    c010b5ea <sysfile_read+0x91>
            alen = len;
c010b5e4:	8b 45 10             	mov    0x10(%ebp),%eax
c010b5e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b5ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5ed:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b5f0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b5f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b5f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b5fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b5ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010b602:	89 04 24             	mov    %eax,(%esp)
c010b605:	e8 5f f2 ff ff       	call   c010a869 <file_read>
c010b60a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b60d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b610:	85 c0                	test   %eax,%eax
c010b612:	0f 84 87 00 00 00    	je     c010b69f <sysfile_read+0x146>
            lock_mm(mm);
c010b618:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b61b:	89 04 24             	mov    %eax,(%esp)
c010b61e:	e8 ea fd ff ff       	call   c010b40d <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b626:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b62a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b62d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b631:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b634:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b638:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b63b:	89 04 24             	mov    %eax,(%esp)
c010b63e:	e8 c9 cf ff ff       	call   c010860c <copy_to_user>
c010b643:	85 c0                	test   %eax,%eax
c010b645:	74 40                	je     c010b687 <sysfile_read+0x12e>
                    assert(len >= alen);
c010b647:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b64a:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b64d:	73 24                	jae    c010b673 <sysfile_read+0x11a>
c010b64f:	c7 44 24 0c fe 7d 11 	movl   $0xc0117dfe,0xc(%esp)
c010b656:	c0 
c010b657:	c7 44 24 08 0a 7e 11 	movl   $0xc0117e0a,0x8(%esp)
c010b65e:	c0 
c010b65f:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010b666:	00 
c010b667:	c7 04 24 1f 7e 11 c0 	movl   $0xc0117e1f,(%esp)
c010b66e:	e8 41 58 ff ff       	call   c0100eb4 <__panic>
                    base += alen, len -= alen, copied += alen;
c010b673:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b676:	01 45 0c             	add    %eax,0xc(%ebp)
c010b679:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b67c:	29 45 10             	sub    %eax,0x10(%ebp)
c010b67f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b682:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b685:	eb 0d                	jmp    c010b694 <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b687:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b68b:	75 07                	jne    c010b694 <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b68d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b694:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b697:	89 04 24             	mov    %eax,(%esp)
c010b69a:	e8 a1 fd ff ff       	call   c010b440 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b69f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b6a3:	75 11                	jne    c010b6b6 <sysfile_read+0x15d>
c010b6a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6a8:	85 c0                	test   %eax,%eax
c010b6aa:	74 0a                	je     c010b6b6 <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b6ac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b6b0:	0f 85 1f ff ff ff    	jne    c010b5d5 <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b6b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6b9:	89 04 24             	mov    %eax,(%esp)
c010b6bc:	e8 06 96 ff ff       	call   c0104cc7 <kfree>
    if (copied != 0) {
c010b6c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b6c5:	74 05                	je     c010b6cc <sysfile_read+0x173>
        return copied;
c010b6c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6ca:	eb 03                	jmp    c010b6cf <sysfile_read+0x176>
    }
    return ret;
c010b6cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b6cf:	c9                   	leave  
c010b6d0:	c3                   	ret    

c010b6d1 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b6d1:	55                   	push   %ebp
c010b6d2:	89 e5                	mov    %esp,%ebp
c010b6d4:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b6d7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b6dc:	8b 40 18             	mov    0x18(%eax),%eax
c010b6df:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b6e2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b6e6:	75 0a                	jne    c010b6f2 <sysfile_write+0x21>
        return 0;
c010b6e8:	b8 00 00 00 00       	mov    $0x0,%eax
c010b6ed:	e9 57 01 00 00       	jmp    c010b849 <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b6f2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b6f9:	00 
c010b6fa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b701:	00 
c010b702:	8b 45 08             	mov    0x8(%ebp),%eax
c010b705:	89 04 24             	mov    %eax,(%esp)
c010b708:	e8 2a ef ff ff       	call   c010a637 <file_testfd>
c010b70d:	85 c0                	test   %eax,%eax
c010b70f:	75 0a                	jne    c010b71b <sysfile_write+0x4a>
        return -E_INVAL;
c010b711:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b716:	e9 2e 01 00 00       	jmp    c010b849 <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b71b:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b722:	e8 85 95 ff ff       	call   c0104cac <kmalloc>
c010b727:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b72a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b72e:	75 0a                	jne    c010b73a <sysfile_write+0x69>
        return -E_NO_MEM;
c010b730:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b735:	e9 0f 01 00 00       	jmp    c010b849 <sysfile_write+0x178>
    }

    int ret = 0;
c010b73a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b741:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b748:	e9 d9 00 00 00       	jmp    c010b826 <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b74d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b757:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b75a:	76 06                	jbe    c010b762 <sysfile_write+0x91>
            alen = len;
c010b75c:	8b 45 10             	mov    0x10(%ebp),%eax
c010b75f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b762:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b765:	89 04 24             	mov    %eax,(%esp)
c010b768:	e8 a0 fc ff ff       	call   c010b40d <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b76d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b770:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b777:	00 
c010b778:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b77c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b77f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b783:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b786:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b78a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b78d:	89 04 24             	mov    %eax,(%esp)
c010b790:	e8 26 ce ff ff       	call   c01085bb <copy_from_user>
c010b795:	85 c0                	test   %eax,%eax
c010b797:	75 07                	jne    c010b7a0 <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b799:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b7a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7a3:	89 04 24             	mov    %eax,(%esp)
c010b7a6:	e8 95 fc ff ff       	call   c010b440 <unlock_mm>
        if (ret == 0) {
c010b7ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7af:	75 68                	jne    c010b819 <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b7b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7b4:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b7b7:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b7bb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7c9:	89 04 24             	mov    %eax,(%esp)
c010b7cc:	e8 d2 f1 ff ff       	call   c010a9a3 <file_write>
c010b7d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010b7d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7d7:	85 c0                	test   %eax,%eax
c010b7d9:	74 3e                	je     c010b819 <sysfile_write+0x148>
                assert(len >= alen);
c010b7db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7de:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b7e1:	73 24                	jae    c010b807 <sysfile_write+0x136>
c010b7e3:	c7 44 24 0c fe 7d 11 	movl   $0xc0117dfe,0xc(%esp)
c010b7ea:	c0 
c010b7eb:	c7 44 24 08 0a 7e 11 	movl   $0xc0117e0a,0x8(%esp)
c010b7f2:	c0 
c010b7f3:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010b7fa:	00 
c010b7fb:	c7 04 24 1f 7e 11 c0 	movl   $0xc0117e1f,(%esp)
c010b802:	e8 ad 56 ff ff       	call   c0100eb4 <__panic>
                base += alen, len -= alen, copied += alen;
c010b807:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b80a:	01 45 0c             	add    %eax,0xc(%ebp)
c010b80d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b810:	29 45 10             	sub    %eax,0x10(%ebp)
c010b813:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b816:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010b819:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b81d:	75 11                	jne    c010b830 <sysfile_write+0x15f>
c010b81f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b822:	85 c0                	test   %eax,%eax
c010b824:	74 0a                	je     c010b830 <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b826:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b82a:	0f 85 1d ff ff ff    	jne    c010b74d <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b830:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b833:	89 04 24             	mov    %eax,(%esp)
c010b836:	e8 8c 94 ff ff       	call   c0104cc7 <kfree>
    if (copied != 0) {
c010b83b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b83f:	74 05                	je     c010b846 <sysfile_write+0x175>
        return copied;
c010b841:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b844:	eb 03                	jmp    c010b849 <sysfile_write+0x178>
    }
    return ret;
c010b846:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b849:	c9                   	leave  
c010b84a:	c3                   	ret    

c010b84b <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010b84b:	55                   	push   %ebp
c010b84c:	89 e5                	mov    %esp,%ebp
c010b84e:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010b851:	8b 45 10             	mov    0x10(%ebp),%eax
c010b854:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b858:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b85b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b85f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b862:	89 04 24             	mov    %eax,(%esp)
c010b865:	e8 73 f2 ff ff       	call   c010aadd <file_seek>
}
c010b86a:	c9                   	leave  
c010b86b:	c3                   	ret    

c010b86c <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010b86c:	55                   	push   %ebp
c010b86d:	89 e5                	mov    %esp,%ebp
c010b86f:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b872:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b877:	8b 40 18             	mov    0x18(%eax),%eax
c010b87a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010b87d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b880:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010b883:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b886:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b88a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b88d:	89 04 24             	mov    %eax,(%esp)
c010b890:	e8 eb f3 ff ff       	call   c010ac80 <file_fstat>
c010b895:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b898:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b89c:	74 05                	je     c010b8a3 <sysfile_fstat+0x37>
        return ret;
c010b89e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8a1:	eb 45                	jmp    c010b8e8 <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010b8a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8a6:	89 04 24             	mov    %eax,(%esp)
c010b8a9:	e8 5f fb ff ff       	call   c010b40d <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010b8ae:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010b8b5:	00 
c010b8b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8b9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b8bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b8c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8c7:	89 04 24             	mov    %eax,(%esp)
c010b8ca:	e8 3d cd ff ff       	call   c010860c <copy_to_user>
c010b8cf:	85 c0                	test   %eax,%eax
c010b8d1:	75 07                	jne    c010b8da <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010b8d3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010b8da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8dd:	89 04 24             	mov    %eax,(%esp)
c010b8e0:	e8 5b fb ff ff       	call   c010b440 <unlock_mm>
    return ret;
c010b8e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b8e8:	c9                   	leave  
c010b8e9:	c3                   	ret    

c010b8ea <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010b8ea:	55                   	push   %ebp
c010b8eb:	89 e5                	mov    %esp,%ebp
c010b8ed:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010b8f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8f3:	89 04 24             	mov    %eax,(%esp)
c010b8f6:	e8 44 f4 ff ff       	call   c010ad3f <file_fsync>
}
c010b8fb:	c9                   	leave  
c010b8fc:	c3                   	ret    

c010b8fd <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010b8fd:	55                   	push   %ebp
c010b8fe:	89 e5                	mov    %esp,%ebp
c010b900:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b903:	8b 45 08             	mov    0x8(%ebp),%eax
c010b906:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b90a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b90d:	89 04 24             	mov    %eax,(%esp)
c010b910:	e8 51 fb ff ff       	call   c010b466 <copy_path>
c010b915:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b918:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b91c:	74 05                	je     c010b923 <sysfile_chdir+0x26>
        return ret;
c010b91e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b921:	eb 1c                	jmp    c010b93f <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010b923:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b926:	89 04 24             	mov    %eax,(%esp)
c010b929:	e8 f1 4a 00 00       	call   c011041f <vfs_chdir>
c010b92e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b931:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b934:	89 04 24             	mov    %eax,(%esp)
c010b937:	e8 8b 93 ff ff       	call   c0104cc7 <kfree>
    return ret;
c010b93c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b93f:	c9                   	leave  
c010b940:	c3                   	ret    

c010b941 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010b941:	55                   	push   %ebp
c010b942:	89 e5                	mov    %esp,%ebp
c010b944:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010b947:	8b 45 08             	mov    0x8(%ebp),%eax
c010b94a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b94e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b951:	89 04 24             	mov    %eax,(%esp)
c010b954:	e8 0d fb ff ff       	call   c010b466 <copy_path>
c010b959:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b95c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b960:	74 05                	je     c010b967 <sysfile_link+0x26>
        return ret;
c010b962:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b965:	eb 59                	jmp    c010b9c0 <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010b967:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b96a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b96e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b971:	89 04 24             	mov    %eax,(%esp)
c010b974:	e8 ed fa ff ff       	call   c010b466 <copy_path>
c010b979:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b97c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b980:	74 10                	je     c010b992 <sysfile_link+0x51>
        kfree(old_path);
c010b982:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b985:	89 04 24             	mov    %eax,(%esp)
c010b988:	e8 3a 93 ff ff       	call   c0104cc7 <kfree>
        return ret;
c010b98d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b990:	eb 2e                	jmp    c010b9c0 <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010b992:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b995:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b998:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b99c:	89 04 24             	mov    %eax,(%esp)
c010b99f:	e8 fc 45 00 00       	call   c010ffa0 <vfs_link>
c010b9a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010b9a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9aa:	89 04 24             	mov    %eax,(%esp)
c010b9ad:	e8 15 93 ff ff       	call   c0104cc7 <kfree>
c010b9b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9b5:	89 04 24             	mov    %eax,(%esp)
c010b9b8:	e8 0a 93 ff ff       	call   c0104cc7 <kfree>
    return ret;
c010b9bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b9c0:	c9                   	leave  
c010b9c1:	c3                   	ret    

c010b9c2 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010b9c2:	55                   	push   %ebp
c010b9c3:	89 e5                	mov    %esp,%ebp
c010b9c5:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010b9c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9cf:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b9d2:	89 04 24             	mov    %eax,(%esp)
c010b9d5:	e8 8c fa ff ff       	call   c010b466 <copy_path>
c010b9da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9e1:	74 05                	je     c010b9e8 <sysfile_rename+0x26>
        return ret;
c010b9e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9e6:	eb 59                	jmp    c010ba41 <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010b9e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b9eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b9f2:	89 04 24             	mov    %eax,(%esp)
c010b9f5:	e8 6c fa ff ff       	call   c010b466 <copy_path>
c010b9fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba01:	74 10                	je     c010ba13 <sysfile_rename+0x51>
        kfree(old_path);
c010ba03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba06:	89 04 24             	mov    %eax,(%esp)
c010ba09:	e8 b9 92 ff ff       	call   c0104cc7 <kfree>
        return ret;
c010ba0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba11:	eb 2e                	jmp    c010ba41 <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010ba13:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ba16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba19:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ba1d:	89 04 24             	mov    %eax,(%esp)
c010ba20:	e8 71 45 00 00       	call   c010ff96 <vfs_rename>
c010ba25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010ba28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba2b:	89 04 24             	mov    %eax,(%esp)
c010ba2e:	e8 94 92 ff ff       	call   c0104cc7 <kfree>
c010ba33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba36:	89 04 24             	mov    %eax,(%esp)
c010ba39:	e8 89 92 ff ff       	call   c0104cc7 <kfree>
    return ret;
c010ba3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba41:	c9                   	leave  
c010ba42:	c3                   	ret    

c010ba43 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010ba43:	55                   	push   %ebp
c010ba44:	89 e5                	mov    %esp,%ebp
c010ba46:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010ba49:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba50:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ba53:	89 04 24             	mov    %eax,(%esp)
c010ba56:	e8 0b fa ff ff       	call   c010b466 <copy_path>
c010ba5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba62:	74 05                	je     c010ba69 <sysfile_unlink+0x26>
        return ret;
c010ba64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba67:	eb 1c                	jmp    c010ba85 <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010ba69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba6c:	89 04 24             	mov    %eax,(%esp)
c010ba6f:	e8 18 45 00 00       	call   c010ff8c <vfs_unlink>
c010ba74:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010ba77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba7a:	89 04 24             	mov    %eax,(%esp)
c010ba7d:	e8 45 92 ff ff       	call   c0104cc7 <kfree>
    return ret;
c010ba82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba85:	c9                   	leave  
c010ba86:	c3                   	ret    

c010ba87 <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010ba87:	55                   	push   %ebp
c010ba88:	89 e5                	mov    %esp,%ebp
c010ba8a:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010ba8d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ba92:	8b 40 18             	mov    0x18(%eax),%eax
c010ba95:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010ba98:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ba9c:	75 07                	jne    c010baa5 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010ba9e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010baa3:	eb 77                	jmp    c010bb1c <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010baa5:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010baac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010baaf:	89 04 24             	mov    %eax,(%esp)
c010bab2:	e8 56 f9 ff ff       	call   c010b40d <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010bab7:	8b 45 08             	mov    0x8(%ebp),%eax
c010baba:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bac1:	00 
c010bac2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bac5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bac9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bacd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bad0:	89 04 24             	mov    %eax,(%esp)
c010bad3:	e8 a2 d4 ff ff       	call   c0108f7a <user_mem_check>
c010bad8:	85 c0                	test   %eax,%eax
c010bada:	74 32                	je     c010bb0e <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010badc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bae3:	00 
c010bae4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bae7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010baeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010baee:	89 44 24 04          	mov    %eax,0x4(%esp)
c010baf2:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010baf5:	89 04 24             	mov    %eax,(%esp)
c010baf8:	e8 61 f7 ff ff       	call   c010b25e <iobuf_init>
c010bafd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010bb00:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb03:	89 04 24             	mov    %eax,(%esp)
c010bb06:	e8 53 49 00 00       	call   c011045e <vfs_getcwd>
c010bb0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bb0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb11:	89 04 24             	mov    %eax,(%esp)
c010bb14:	e8 27 f9 ff ff       	call   c010b440 <unlock_mm>
    return ret;
c010bb19:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb1c:	c9                   	leave  
c010bb1d:	c3                   	ret    

c010bb1e <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010bb1e:	55                   	push   %ebp
c010bb1f:	89 e5                	mov    %esp,%ebp
c010bb21:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bb24:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bb29:	8b 40 18             	mov    0x18(%eax),%eax
c010bb2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010bb2f:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010bb36:	e8 71 91 ff ff       	call   c0104cac <kmalloc>
c010bb3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bb3e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bb42:	75 0a                	jne    c010bb4e <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010bb44:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bb49:	e9 c2 00 00 00       	jmp    c010bc10 <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010bb4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010bb55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb58:	89 04 24             	mov    %eax,(%esp)
c010bb5b:	e8 ad f8 ff ff       	call   c010b40d <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010bb60:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bb63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb66:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010bb6d:	00 
c010bb6e:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010bb75:	00 
c010bb76:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bb7a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb81:	89 04 24             	mov    %eax,(%esp)
c010bb84:	e8 32 ca ff ff       	call   c01085bb <copy_from_user>
c010bb89:	85 c0                	test   %eax,%eax
c010bb8b:	75 07                	jne    c010bb94 <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010bb8d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bb94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb97:	89 04 24             	mov    %eax,(%esp)
c010bb9a:	e8 a1 f8 ff ff       	call   c010b440 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010bb9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bba3:	75 5d                	jne    c010bc02 <sysfile_getdirentry+0xe4>
c010bba5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bba8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbac:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbaf:	89 04 24             	mov    %eax,(%esp)
c010bbb2:	e8 40 f2 ff ff       	call   c010adf7 <file_getdirentry>
c010bbb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bbba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbbe:	75 42                	jne    c010bc02 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010bbc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbc3:	89 04 24             	mov    %eax,(%esp)
c010bbc6:	e8 42 f8 ff ff       	call   c010b40d <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010bbcb:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010bbd2:	00 
c010bbd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbd6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bbda:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbdd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbe1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbe4:	89 04 24             	mov    %eax,(%esp)
c010bbe7:	e8 20 ca ff ff       	call   c010860c <copy_to_user>
c010bbec:	85 c0                	test   %eax,%eax
c010bbee:	75 07                	jne    c010bbf7 <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010bbf0:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bbf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbfa:	89 04 24             	mov    %eax,(%esp)
c010bbfd:	e8 3e f8 ff ff       	call   c010b440 <unlock_mm>

out:
    kfree(direntp);
c010bc02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc05:	89 04 24             	mov    %eax,(%esp)
c010bc08:	e8 ba 90 ff ff       	call   c0104cc7 <kfree>
    return ret;
c010bc0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc10:	c9                   	leave  
c010bc11:	c3                   	ret    

c010bc12 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010bc12:	55                   	push   %ebp
c010bc13:	89 e5                	mov    %esp,%ebp
c010bc15:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010bc18:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc1f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc22:	89 04 24             	mov    %eax,(%esp)
c010bc25:	e8 db f2 ff ff       	call   c010af05 <file_dup>
}
c010bc2a:	c9                   	leave  
c010bc2b:	c3                   	ret    

c010bc2c <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010bc2c:	55                   	push   %ebp
c010bc2d:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bc2f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bc34:	5d                   	pop    %ebp
c010bc35:	c3                   	ret    

c010bc36 <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010bc36:	55                   	push   %ebp
c010bc37:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bc39:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bc3e:	5d                   	pop    %ebp
c010bc3f:	c3                   	ret    

c010bc40 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010bc40:	52                   	push   %edx
    call *%ebx              # call fn
c010bc41:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010bc43:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010bc44:	e8 1e 0e 00 00       	call   c010ca67 <do_exit>

c010bc49 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010bc49:	55                   	push   %ebp
c010bc4a:	89 e5                	mov    %esp,%ebp
c010bc4c:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010bc4f:	8b 55 10             	mov    0x10(%ebp),%edx
c010bc52:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc55:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010bc57:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc5a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc5d:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010bc60:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc63:	83 c0 08             	add    $0x8,%eax
c010bc66:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bc69:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc6c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bc6f:	89 50 04             	mov    %edx,0x4(%eax)
c010bc72:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc75:	8b 50 04             	mov    0x4(%eax),%edx
c010bc78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc7b:	89 10                	mov    %edx,(%eax)
    return timer;
c010bc7d:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bc80:	c9                   	leave  
c010bc81:	c3                   	ret    

c010bc82 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010bc82:	55                   	push   %ebp
c010bc83:	89 e5                	mov    %esp,%ebp
c010bc85:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bc88:	9c                   	pushf  
c010bc89:	58                   	pop    %eax
c010bc8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010bc8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010bc90:	25 00 02 00 00       	and    $0x200,%eax
c010bc95:	85 c0                	test   %eax,%eax
c010bc97:	74 0c                	je     c010bca5 <__intr_save+0x23>
        intr_disable();
c010bc99:	e8 78 64 ff ff       	call   c0102116 <intr_disable>
        return 1;
c010bc9e:	b8 01 00 00 00       	mov    $0x1,%eax
c010bca3:	eb 05                	jmp    c010bcaa <__intr_save+0x28>
    }
    return 0;
c010bca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bcaa:	c9                   	leave  
c010bcab:	c3                   	ret    

c010bcac <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010bcac:	55                   	push   %ebp
c010bcad:	89 e5                	mov    %esp,%ebp
c010bcaf:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010bcb2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bcb6:	74 05                	je     c010bcbd <__intr_restore+0x11>
        intr_enable();
c010bcb8:	e8 53 64 ff ff       	call   c0102110 <intr_enable>
    }
}
c010bcbd:	c9                   	leave  
c010bcbe:	c3                   	ret    

c010bcbf <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010bcbf:	55                   	push   %ebp
c010bcc0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010bcc2:	8b 55 08             	mov    0x8(%ebp),%edx
c010bcc5:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010bcca:	29 c2                	sub    %eax,%edx
c010bccc:	89 d0                	mov    %edx,%eax
c010bcce:	c1 f8 05             	sar    $0x5,%eax
}
c010bcd1:	5d                   	pop    %ebp
c010bcd2:	c3                   	ret    

c010bcd3 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010bcd3:	55                   	push   %ebp
c010bcd4:	89 e5                	mov    %esp,%ebp
c010bcd6:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010bcd9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcdc:	89 04 24             	mov    %eax,(%esp)
c010bcdf:	e8 db ff ff ff       	call   c010bcbf <page2ppn>
c010bce4:	c1 e0 0c             	shl    $0xc,%eax
}
c010bce7:	c9                   	leave  
c010bce8:	c3                   	ret    

c010bce9 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010bce9:	55                   	push   %ebp
c010bcea:	89 e5                	mov    %esp,%ebp
c010bcec:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010bcef:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcf2:	c1 e8 0c             	shr    $0xc,%eax
c010bcf5:	89 c2                	mov    %eax,%edx
c010bcf7:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010bcfc:	39 c2                	cmp    %eax,%edx
c010bcfe:	72 1c                	jb     c010bd1c <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010bd00:	c7 44 24 08 34 7e 11 	movl   $0xc0117e34,0x8(%esp)
c010bd07:	c0 
c010bd08:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010bd0f:	00 
c010bd10:	c7 04 24 53 7e 11 c0 	movl   $0xc0117e53,(%esp)
c010bd17:	e8 98 51 ff ff       	call   c0100eb4 <__panic>
    }
    return &pages[PPN(pa)];
c010bd1c:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010bd21:	8b 55 08             	mov    0x8(%ebp),%edx
c010bd24:	c1 ea 0c             	shr    $0xc,%edx
c010bd27:	c1 e2 05             	shl    $0x5,%edx
c010bd2a:	01 d0                	add    %edx,%eax
}
c010bd2c:	c9                   	leave  
c010bd2d:	c3                   	ret    

c010bd2e <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010bd2e:	55                   	push   %ebp
c010bd2f:	89 e5                	mov    %esp,%ebp
c010bd31:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010bd34:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd37:	89 04 24             	mov    %eax,(%esp)
c010bd3a:	e8 94 ff ff ff       	call   c010bcd3 <page2pa>
c010bd3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd45:	c1 e8 0c             	shr    $0xc,%eax
c010bd48:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bd4b:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010bd50:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bd53:	72 23                	jb     c010bd78 <page2kva+0x4a>
c010bd55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd58:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bd5c:	c7 44 24 08 64 7e 11 	movl   $0xc0117e64,0x8(%esp)
c010bd63:	c0 
c010bd64:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010bd6b:	00 
c010bd6c:	c7 04 24 53 7e 11 c0 	movl   $0xc0117e53,(%esp)
c010bd73:	e8 3c 51 ff ff       	call   c0100eb4 <__panic>
c010bd78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd7b:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010bd80:	c9                   	leave  
c010bd81:	c3                   	ret    

c010bd82 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010bd82:	55                   	push   %ebp
c010bd83:	89 e5                	mov    %esp,%ebp
c010bd85:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010bd88:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd8e:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010bd95:	77 23                	ja     c010bdba <kva2page+0x38>
c010bd97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd9a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bd9e:	c7 44 24 08 88 7e 11 	movl   $0xc0117e88,0x8(%esp)
c010bda5:	c0 
c010bda6:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010bdad:	00 
c010bdae:	c7 04 24 53 7e 11 c0 	movl   $0xc0117e53,(%esp)
c010bdb5:	e8 fa 50 ff ff       	call   c0100eb4 <__panic>
c010bdba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdbd:	05 00 00 00 40       	add    $0x40000000,%eax
c010bdc2:	89 04 24             	mov    %eax,(%esp)
c010bdc5:	e8 1f ff ff ff       	call   c010bce9 <pa2page>
}
c010bdca:	c9                   	leave  
c010bdcb:	c3                   	ret    

c010bdcc <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010bdcc:	55                   	push   %ebp
c010bdcd:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010bdcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd2:	8b 40 18             	mov    0x18(%eax),%eax
c010bdd5:	8d 50 01             	lea    0x1(%eax),%edx
c010bdd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bddb:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bdde:	8b 45 08             	mov    0x8(%ebp),%eax
c010bde1:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bde4:	5d                   	pop    %ebp
c010bde5:	c3                   	ret    

c010bde6 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010bde6:	55                   	push   %ebp
c010bde7:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010bde9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdec:	8b 40 18             	mov    0x18(%eax),%eax
c010bdef:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bdf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdf5:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bdf8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdfb:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bdfe:	5d                   	pop    %ebp
c010bdff:	c3                   	ret    

c010be00 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010be00:	55                   	push   %ebp
c010be01:	89 e5                	mov    %esp,%ebp
c010be03:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010be06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be0a:	74 25                	je     c010be31 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010be0c:	8b 45 08             	mov    0x8(%ebp),%eax
c010be0f:	83 c0 1c             	add    $0x1c,%eax
c010be12:	89 04 24             	mov    %eax,(%esp)
c010be15:	e8 fd dd ff ff       	call   c0109c17 <down>
        if (current != NULL) {
c010be1a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010be1f:	85 c0                	test   %eax,%eax
c010be21:	74 0e                	je     c010be31 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010be23:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010be28:	8b 50 04             	mov    0x4(%eax),%edx
c010be2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be2e:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010be31:	c9                   	leave  
c010be32:	c3                   	ret    

c010be33 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010be33:	55                   	push   %ebp
c010be34:	89 e5                	mov    %esp,%ebp
c010be36:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010be39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be3d:	74 18                	je     c010be57 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010be3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010be42:	83 c0 1c             	add    $0x1c,%eax
c010be45:	89 04 24             	mov    %eax,(%esp)
c010be48:	e8 af dd ff ff       	call   c0109bfc <up>
        mm->locked_by = 0;
c010be4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010be50:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010be57:	c9                   	leave  
c010be58:	c3                   	ret    

c010be59 <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010be59:	55                   	push   %ebp
c010be5a:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010be5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010be5f:	8b 40 08             	mov    0x8(%eax),%eax
c010be62:	8d 50 01             	lea    0x1(%eax),%edx
c010be65:	8b 45 08             	mov    0x8(%ebp),%eax
c010be68:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010be6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be6e:	8b 40 08             	mov    0x8(%eax),%eax
}
c010be71:	5d                   	pop    %ebp
c010be72:	c3                   	ret    

c010be73 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010be73:	55                   	push   %ebp
c010be74:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010be76:	8b 45 08             	mov    0x8(%ebp),%eax
c010be79:	8b 40 08             	mov    0x8(%eax),%eax
c010be7c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010be7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010be82:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010be85:	8b 45 08             	mov    0x8(%ebp),%eax
c010be88:	8b 40 08             	mov    0x8(%eax),%eax
}
c010be8b:	5d                   	pop    %ebp
c010be8c:	c3                   	ret    

c010be8d <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010be8d:	55                   	push   %ebp
c010be8e:	89 e5                	mov    %esp,%ebp
c010be90:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010be93:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010be9a:	e8 0d 8e ff ff       	call   c0104cac <kmalloc>
c010be9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010bea2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bea6:	0f 84 70 01 00 00    	je     c010c01c <alloc_proc+0x18f>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
	proc->state = PROC_UNINIT; // 进程状态
c010beac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010beaf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1; // 进程ID
c010beb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010beb8:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0; // 进程时间片
c010bebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bec2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0; // 进程所使用的内存栈地址
c010bec9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010becc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0; // 进程是否能被调度
c010bed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bed6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL; // 父进程
c010bedd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bee0:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL; // 进程所用的虚拟内存
c010bee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010beea:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context)); // 进程的上下文
c010bef1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bef4:	83 c0 1c             	add    $0x1c,%eax
c010bef7:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010befe:	00 
c010beff:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf06:	00 
c010bf07:	89 04 24             	mov    %eax,(%esp)
c010bf0a:	e8 e9 94 00 00       	call   c01153f8 <memset>
        proc->tf = NULL; // 中断帧指针
c010bf0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf12:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3; // 页目录表地址 设为 内核页目录表基址
c010bf19:	8b 15 24 30 15 c0    	mov    0xc0153024,%edx
c010bf1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf22:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0; // 标志位
c010bf25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf28:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN); // 进程名
c010bf2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf32:	83 c0 48             	add    $0x48,%eax
c010bf35:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010bf3c:	00 
c010bf3d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf44:	00 
c010bf45:	89 04 24             	mov    %eax,(%esp)
c010bf48:	e8 ab 94 00 00       	call   c01153f8 <memset>
        // 新添加: 初始化进程等待状态 初始化进程相关指针
    	proc->wait_state = 0;
c010bf4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf50:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010bf57:	00 00 00 
    	proc->cptr = proc->optr = proc->yptr = NULL;
c010bf5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf5d:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010bf64:	00 00 00 
c010bf67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf6a:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010bf70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf73:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010bf79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf7c:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010bf82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf85:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
		//lab6添加
    	proc->rq = NULL;             //初始化运行队列为空
c010bf8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf8e:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010bf95:	00 00 00 
    	proc->run_link.prev = proc->run_link.next = NULL;//初始化运行队列的指针
c010bf98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf9b:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
c010bfa2:	00 00 00 
c010bfa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfa8:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
c010bfae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfb1:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    	proc->time_slice = 0;        //初始化时间片
c010bfb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfba:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010bfc1:	00 00 00 
    	proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL; //初始化各类指针为空，包括父进程等待
c010bfc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfc7:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010bfce:	00 00 00 
c010bfd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfd4:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010bfda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfdd:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010bfe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfe6:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010bfec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfef:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    	proc->lab6_stride = 0;       //步数初始化 
c010bff5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bff8:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010bfff:	00 00 00 
    	proc->lab6_priority = 0;     //初始化优先级
c010c002:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c005:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010c00c:	00 00 00 
    	proc->filesp = NULL;// 初始化 PCB 下的 fs(进程相关的文件信息)
c010c00f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c012:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010c019:	00 00 00 
    }
    return proc;
c010c01c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c01f:	c9                   	leave  
c010c020:	c3                   	ret    

c010c021 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010c021:	55                   	push   %ebp
c010c022:	89 e5                	mov    %esp,%ebp
c010c024:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010c027:	8b 45 08             	mov    0x8(%ebp),%eax
c010c02a:	83 c0 48             	add    $0x48,%eax
c010c02d:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c034:	00 
c010c035:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c03c:	00 
c010c03d:	89 04 24             	mov    %eax,(%esp)
c010c040:	e8 b3 93 00 00       	call   c01153f8 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010c045:	8b 45 08             	mov    0x8(%ebp),%eax
c010c048:	8d 50 48             	lea    0x48(%eax),%edx
c010c04b:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c052:	00 
c010c053:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c056:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c05a:	89 14 24             	mov    %edx,(%esp)
c010c05d:	e8 78 94 00 00       	call   c01154da <memcpy>
}
c010c062:	c9                   	leave  
c010c063:	c3                   	ret    

c010c064 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c064:	55                   	push   %ebp
c010c065:	89 e5                	mov    %esp,%ebp
c010c067:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c06a:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c071:	00 
c010c072:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c079:	00 
c010c07a:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010c081:	e8 72 93 00 00       	call   c01153f8 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c086:	8b 45 08             	mov    0x8(%ebp),%eax
c010c089:	83 c0 48             	add    $0x48,%eax
c010c08c:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c093:	00 
c010c094:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c098:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010c09f:	e8 36 94 00 00       	call   c01154da <memcpy>
}
c010c0a4:	c9                   	leave  
c010c0a5:	c3                   	ret    

c010c0a6 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c0a6:	55                   	push   %ebp
c010c0a7:	89 e5                	mov    %esp,%ebp
c010c0a9:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c0ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0af:	83 c0 7c             	add    $0x7c,%eax
c010c0b2:	c7 45 fc fc 31 15 c0 	movl   $0xc01531fc,-0x4(%ebp)
c010c0b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c0bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c0bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c0c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c0c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c0c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0cb:	8b 40 04             	mov    0x4(%eax),%eax
c010c0ce:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c0d1:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c0d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c0d7:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c0da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c0dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c0e0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c0e3:	89 10                	mov    %edx,(%eax)
c010c0e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c0e8:	8b 10                	mov    (%eax),%edx
c010c0ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0ed:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c0f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c0f6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c0f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c0ff:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c101:	8b 45 08             	mov    0x8(%ebp),%eax
c010c104:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c10b:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c10e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c111:	8b 40 14             	mov    0x14(%eax),%eax
c010c114:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c11a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c11d:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c123:	8b 45 08             	mov    0x8(%ebp),%eax
c010c126:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c12c:	85 c0                	test   %eax,%eax
c010c12e:	74 12                	je     c010c142 <set_links+0x9c>
        proc->optr->yptr = proc;
c010c130:	8b 45 08             	mov    0x8(%ebp),%eax
c010c133:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c139:	8b 55 08             	mov    0x8(%ebp),%edx
c010c13c:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c142:	8b 45 08             	mov    0x8(%ebp),%eax
c010c145:	8b 40 14             	mov    0x14(%eax),%eax
c010c148:	8b 55 08             	mov    0x8(%ebp),%edx
c010c14b:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c151:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c156:	83 c0 01             	add    $0x1,%eax
c010c159:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010c15e:	c9                   	leave  
c010c15f:	c3                   	ret    

c010c160 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c160:	55                   	push   %ebp
c010c161:	89 e5                	mov    %esp,%ebp
c010c163:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c166:	8b 45 08             	mov    0x8(%ebp),%eax
c010c169:	83 c0 7c             	add    $0x7c,%eax
c010c16c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c16f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c172:	8b 40 04             	mov    0x4(%eax),%eax
c010c175:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c178:	8b 12                	mov    (%edx),%edx
c010c17a:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c17d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c180:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c183:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c186:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c189:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c18c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c18f:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c191:	8b 45 08             	mov    0x8(%ebp),%eax
c010c194:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c19a:	85 c0                	test   %eax,%eax
c010c19c:	74 18                	je     c010c1b6 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c19e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1a1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c1a7:	8b 55 08             	mov    0x8(%ebp),%edx
c010c1aa:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c1b0:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c1b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b9:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c1bf:	85 c0                	test   %eax,%eax
c010c1c1:	74 1a                	je     c010c1dd <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c1c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1c6:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c1cc:	8b 55 08             	mov    0x8(%ebp),%edx
c010c1cf:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c1d5:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c1db:	eb 15                	jmp    c010c1f2 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c1dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1e0:	8b 40 14             	mov    0x14(%eax),%eax
c010c1e3:	8b 55 08             	mov    0x8(%ebp),%edx
c010c1e6:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c1ec:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c1f2:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c1f7:	83 e8 01             	sub    $0x1,%eax
c010c1fa:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010c1ff:	c9                   	leave  
c010c200:	c3                   	ret    

c010c201 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c201:	55                   	push   %ebp
c010c202:	89 e5                	mov    %esp,%ebp
c010c204:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c207:	c7 45 f8 fc 31 15 c0 	movl   $0xc01531fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c20e:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c213:	83 c0 01             	add    $0x1,%eax
c010c216:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010c21b:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c220:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c225:	7e 0c                	jle    c010c233 <get_pid+0x32>
        last_pid = 1;
c010c227:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010c22e:	00 00 00 
        goto inside;
c010c231:	eb 13                	jmp    c010c246 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c233:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010c239:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c23e:	39 c2                	cmp    %eax,%edx
c010c240:	0f 8c ac 00 00 00    	jl     c010c2f2 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c246:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010c24d:	20 00 00 
    repeat:
        le = list;
c010c250:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c253:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c256:	eb 7f                	jmp    c010c2d7 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c258:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c25b:	83 e8 7c             	sub    $0x7c,%eax
c010c25e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c261:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c264:	8b 50 04             	mov    0x4(%eax),%edx
c010c267:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c26c:	39 c2                	cmp    %eax,%edx
c010c26e:	75 3e                	jne    c010c2ae <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c270:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c275:	83 c0 01             	add    $0x1,%eax
c010c278:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010c27d:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010c283:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c288:	39 c2                	cmp    %eax,%edx
c010c28a:	7c 4b                	jl     c010c2d7 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c28c:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c291:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c296:	7e 0a                	jle    c010c2a2 <get_pid+0xa1>
                        last_pid = 1;
c010c298:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010c29f:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c2a2:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010c2a9:	20 00 00 
                    goto repeat;
c010c2ac:	eb a2                	jmp    c010c250 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c2ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2b1:	8b 50 04             	mov    0x4(%eax),%edx
c010c2b4:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c2b9:	39 c2                	cmp    %eax,%edx
c010c2bb:	7e 1a                	jle    c010c2d7 <get_pid+0xd6>
c010c2bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2c0:	8b 50 04             	mov    0x4(%eax),%edx
c010c2c3:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c2c8:	39 c2                	cmp    %eax,%edx
c010c2ca:	7d 0b                	jge    c010c2d7 <get_pid+0xd6>
                next_safe = proc->pid;
c010c2cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2cf:	8b 40 04             	mov    0x4(%eax),%eax
c010c2d2:	a3 88 ea 14 c0       	mov    %eax,0xc014ea88
c010c2d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c2da:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c2dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2e0:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010c2e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c2e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c2e9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c2ec:	0f 85 66 ff ff ff    	jne    c010c258 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010c2f2:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
}
c010c2f7:	c9                   	leave  
c010c2f8:	c3                   	ret    

c010c2f9 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c2f9:	55                   	push   %ebp
c010c2fa:	89 e5                	mov    %esp,%ebp
c010c2fc:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c2ff:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c304:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c307:	74 63                	je     c010c36c <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c309:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c30e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c311:	8b 45 08             	mov    0x8(%ebp),%eax
c010c314:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c317:	e8 66 f9 ff ff       	call   c010bc82 <__intr_save>
c010c31c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c31f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c322:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28
            load_esp0(next->kstack + KSTACKSIZE);
c010c327:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c32a:	8b 40 0c             	mov    0xc(%eax),%eax
c010c32d:	05 00 20 00 00       	add    $0x2000,%eax
c010c332:	89 04 24             	mov    %eax,(%esp)
c010c335:	e8 99 8c ff ff       	call   c0104fd3 <load_esp0>
            lcr3(next->cr3);
c010c33a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c33d:	8b 40 40             	mov    0x40(%eax),%eax
c010c340:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c343:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c346:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c349:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c34c:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c34f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c352:	83 c0 1c             	add    $0x1c,%eax
c010c355:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c359:	89 04 24             	mov    %eax,(%esp)
c010c35c:	e8 42 1c 00 00       	call   c010dfa3 <switch_to>
        }
        local_intr_restore(intr_flag);
c010c361:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c364:	89 04 24             	mov    %eax,(%esp)
c010c367:	e8 40 f9 ff ff       	call   c010bcac <__intr_restore>
    }
}
c010c36c:	c9                   	leave  
c010c36d:	c3                   	ret    

c010c36e <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c36e:	55                   	push   %ebp
c010c36f:	89 e5                	mov    %esp,%ebp
c010c371:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c374:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c379:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c37c:	89 04 24             	mov    %eax,(%esp)
c010c37f:	e8 af 67 ff ff       	call   c0102b33 <forkrets>
}
c010c384:	c9                   	leave  
c010c385:	c3                   	ret    

c010c386 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c386:	55                   	push   %ebp
c010c387:	89 e5                	mov    %esp,%ebp
c010c389:	53                   	push   %ebx
c010c38a:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c38d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c390:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c396:	8b 45 08             	mov    0x8(%ebp),%eax
c010c399:	8b 40 04             	mov    0x4(%eax),%eax
c010c39c:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c3a3:	00 
c010c3a4:	89 04 24             	mov    %eax,(%esp)
c010c3a7:	e8 f2 84 00 00       	call   c011489e <hash32>
c010c3ac:	c1 e0 03             	shl    $0x3,%eax
c010c3af:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c3b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c3b7:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c3ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c3c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c3c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c3c9:	8b 40 04             	mov    0x4(%eax),%eax
c010c3cc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c3cf:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c3d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c3d5:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c3d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c3db:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c3de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c3e1:	89 10                	mov    %edx,(%eax)
c010c3e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c3e6:	8b 10                	mov    (%eax),%edx
c010c3e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c3eb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c3ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c3f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c3f4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c3f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c3fa:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c3fd:	89 10                	mov    %edx,(%eax)
}
c010c3ff:	83 c4 34             	add    $0x34,%esp
c010c402:	5b                   	pop    %ebx
c010c403:	5d                   	pop    %ebp
c010c404:	c3                   	ret    

c010c405 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c405:	55                   	push   %ebp
c010c406:	89 e5                	mov    %esp,%ebp
c010c408:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c40b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c40e:	05 84 00 00 00       	add    $0x84,%eax
c010c413:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c416:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c419:	8b 40 04             	mov    0x4(%eax),%eax
c010c41c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c41f:	8b 12                	mov    (%edx),%edx
c010c421:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c424:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c427:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c42a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c42d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c430:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c433:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c436:	89 10                	mov    %edx,(%eax)
}
c010c438:	c9                   	leave  
c010c439:	c3                   	ret    

c010c43a <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c43a:	55                   	push   %ebp
c010c43b:	89 e5                	mov    %esp,%ebp
c010c43d:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c440:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c444:	7e 61                	jle    c010c4a7 <find_proc+0x6d>
c010c446:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c44d:	7f 58                	jg     c010c4a7 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c44f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c452:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c459:	00 
c010c45a:	89 04 24             	mov    %eax,(%esp)
c010c45d:	e8 3c 84 00 00       	call   c011489e <hash32>
c010c462:	c1 e0 03             	shl    $0x3,%eax
c010c465:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c46a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c46d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c470:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c473:	eb 1b                	jmp    c010c490 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c475:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c478:	2d 84 00 00 00       	sub    $0x84,%eax
c010c47d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c480:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c483:	8b 40 04             	mov    0x4(%eax),%eax
c010c486:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c489:	75 05                	jne    c010c490 <find_proc+0x56>
                return proc;
c010c48b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c48e:	eb 1c                	jmp    c010c4ac <find_proc+0x72>
c010c490:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c493:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c496:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c499:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c49c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c49f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4a2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c4a5:	75 ce                	jne    c010c475 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c4a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c4ac:	c9                   	leave  
c010c4ad:	c3                   	ret    

c010c4ae <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c4ae:	55                   	push   %ebp
c010c4af:	89 e5                	mov    %esp,%ebp
c010c4b1:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c4b4:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c4bb:	00 
c010c4bc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c4c3:	00 
c010c4c4:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c4c7:	89 04 24             	mov    %eax,(%esp)
c010c4ca:	e8 29 8f 00 00       	call   c01153f8 <memset>
    tf.tf_cs = KERNEL_CS;
c010c4cf:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c4d5:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c4db:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c4df:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c4e3:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c4e7:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c4eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4ee:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c4f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4f4:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c4f7:	b8 40 bc 10 c0       	mov    $0xc010bc40,%eax
c010c4fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c4ff:	8b 45 10             	mov    0x10(%ebp),%eax
c010c502:	80 cc 01             	or     $0x1,%ah
c010c505:	89 c2                	mov    %eax,%edx
c010c507:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c50a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c50e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c515:	00 
c010c516:	89 14 24             	mov    %edx,(%esp)
c010c519:	e8 0e 04 00 00       	call   c010c92c <do_fork>
}
c010c51e:	c9                   	leave  
c010c51f:	c3                   	ret    

c010c520 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c520:	55                   	push   %ebp
c010c521:	89 e5                	mov    %esp,%ebp
c010c523:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c526:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c52d:	e8 ef 8b ff ff       	call   c0105121 <alloc_pages>
c010c532:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c535:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c539:	74 1a                	je     c010c555 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c53b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c53e:	89 04 24             	mov    %eax,(%esp)
c010c541:	e8 e8 f7 ff ff       	call   c010bd2e <page2kva>
c010c546:	89 c2                	mov    %eax,%edx
c010c548:	8b 45 08             	mov    0x8(%ebp),%eax
c010c54b:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c54e:	b8 00 00 00 00       	mov    $0x0,%eax
c010c553:	eb 05                	jmp    c010c55a <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c555:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c55a:	c9                   	leave  
c010c55b:	c3                   	ret    

c010c55c <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c55c:	55                   	push   %ebp
c010c55d:	89 e5                	mov    %esp,%ebp
c010c55f:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c562:	8b 45 08             	mov    0x8(%ebp),%eax
c010c565:	8b 40 0c             	mov    0xc(%eax),%eax
c010c568:	89 04 24             	mov    %eax,(%esp)
c010c56b:	e8 12 f8 ff ff       	call   c010bd82 <kva2page>
c010c570:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c577:	00 
c010c578:	89 04 24             	mov    %eax,(%esp)
c010c57b:	e8 0c 8c ff ff       	call   c010518c <free_pages>
}
c010c580:	c9                   	leave  
c010c581:	c3                   	ret    

c010c582 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c582:	55                   	push   %ebp
c010c583:	89 e5                	mov    %esp,%ebp
c010c585:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c588:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c58f:	e8 8d 8b ff ff       	call   c0105121 <alloc_pages>
c010c594:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c597:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c59b:	75 0a                	jne    c010c5a7 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c59d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c5a2:	e9 80 00 00 00       	jmp    c010c627 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c5a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5aa:	89 04 24             	mov    %eax,(%esp)
c010c5ad:	e8 7c f7 ff ff       	call   c010bd2e <page2kva>
c010c5b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c5b5:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010c5ba:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c5c1:	00 
c010c5c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c5c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5c9:	89 04 24             	mov    %eax,(%esp)
c010c5cc:	e8 09 8f 00 00       	call   c01154da <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c5d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5d4:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c5da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c5e0:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c5e7:	77 23                	ja     c010c60c <setup_pgdir+0x8a>
c010c5e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c5f0:	c7 44 24 08 88 7e 11 	movl   $0xc0117e88,0x8(%esp)
c010c5f7:	c0 
c010c5f8:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c010c5ff:	00 
c010c600:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010c607:	e8 a8 48 ff ff       	call   c0100eb4 <__panic>
c010c60c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c60f:	05 00 00 00 40       	add    $0x40000000,%eax
c010c614:	83 c8 03             	or     $0x3,%eax
c010c617:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c619:	8b 45 08             	mov    0x8(%ebp),%eax
c010c61c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c61f:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c622:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c627:	c9                   	leave  
c010c628:	c3                   	ret    

c010c629 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c629:	55                   	push   %ebp
c010c62a:	89 e5                	mov    %esp,%ebp
c010c62c:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c62f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c632:	8b 40 0c             	mov    0xc(%eax),%eax
c010c635:	89 04 24             	mov    %eax,(%esp)
c010c638:	e8 45 f7 ff ff       	call   c010bd82 <kva2page>
c010c63d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c644:	00 
c010c645:	89 04 24             	mov    %eax,(%esp)
c010c648:	e8 3f 8b ff ff       	call   c010518c <free_pages>
}
c010c64d:	c9                   	leave  
c010c64e:	c3                   	ret    

c010c64f <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c64f:	55                   	push   %ebp
c010c650:	89 e5                	mov    %esp,%ebp
c010c652:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c655:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c65a:	8b 40 18             	mov    0x18(%eax),%eax
c010c65d:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c660:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c664:	75 0a                	jne    c010c670 <copy_mm+0x21>
        return 0;
c010c666:	b8 00 00 00 00       	mov    $0x0,%eax
c010c66b:	e9 f9 00 00 00       	jmp    c010c769 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c670:	8b 45 08             	mov    0x8(%ebp),%eax
c010c673:	25 00 01 00 00       	and    $0x100,%eax
c010c678:	85 c0                	test   %eax,%eax
c010c67a:	74 08                	je     c010c684 <copy_mm+0x35>
        mm = oldmm;
c010c67c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c67f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c682:	eb 78                	jmp    c010c6fc <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c684:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c68b:	e8 2f b8 ff ff       	call   c0107ebf <mm_create>
c010c690:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c693:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c697:	75 05                	jne    c010c69e <copy_mm+0x4f>
        goto bad_mm;
c010c699:	e9 c8 00 00 00       	jmp    c010c766 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c69e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6a1:	89 04 24             	mov    %eax,(%esp)
c010c6a4:	e8 d9 fe ff ff       	call   c010c582 <setup_pgdir>
c010c6a9:	85 c0                	test   %eax,%eax
c010c6ab:	74 05                	je     c010c6b2 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c6ad:	e9 a9 00 00 00       	jmp    c010c75b <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c6b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6b5:	89 04 24             	mov    %eax,(%esp)
c010c6b8:	e8 43 f7 ff ff       	call   c010be00 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c6bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6c7:	89 04 24             	mov    %eax,(%esp)
c010c6ca:	e8 13 bd ff ff       	call   c01083e2 <dup_mmap>
c010c6cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c6d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6d5:	89 04 24             	mov    %eax,(%esp)
c010c6d8:	e8 56 f7 ff ff       	call   c010be33 <unlock_mm>

    if (ret != 0) {
c010c6dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c6e1:	74 19                	je     c010c6fc <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c6e3:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c6e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6e7:	89 04 24             	mov    %eax,(%esp)
c010c6ea:	e8 f4 bd ff ff       	call   c01084e3 <exit_mmap>
    put_pgdir(mm);
c010c6ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6f2:	89 04 24             	mov    %eax,(%esp)
c010c6f5:	e8 2f ff ff ff       	call   c010c629 <put_pgdir>
c010c6fa:	eb 5f                	jmp    c010c75b <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c6fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6ff:	89 04 24             	mov    %eax,(%esp)
c010c702:	e8 c5 f6 ff ff       	call   c010bdcc <mm_count_inc>
    proc->mm = mm;
c010c707:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c70a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c70d:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c710:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c713:	8b 40 0c             	mov    0xc(%eax),%eax
c010c716:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c719:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c720:	77 23                	ja     c010c745 <copy_mm+0xf6>
c010c722:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c725:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c729:	c7 44 24 08 88 7e 11 	movl   $0xc0117e88,0x8(%esp)
c010c730:	c0 
c010c731:	c7 44 24 04 63 01 00 	movl   $0x163,0x4(%esp)
c010c738:	00 
c010c739:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010c740:	e8 6f 47 ff ff       	call   c0100eb4 <__panic>
c010c745:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c748:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c74e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c751:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c754:	b8 00 00 00 00       	mov    $0x0,%eax
c010c759:	eb 0e                	jmp    c010c769 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c75e:	89 04 24             	mov    %eax,(%esp)
c010c761:	e8 be ba ff ff       	call   c0108224 <mm_destroy>
bad_mm:
    return ret;
c010c766:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c769:	c9                   	leave  
c010c76a:	c3                   	ret    

c010c76b <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c76b:	55                   	push   %ebp
c010c76c:	89 e5                	mov    %esp,%ebp
c010c76e:	57                   	push   %edi
c010c76f:	56                   	push   %esi
c010c770:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c771:	8b 45 08             	mov    0x8(%ebp),%eax
c010c774:	8b 40 0c             	mov    0xc(%eax),%eax
c010c777:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c77c:	89 c2                	mov    %eax,%edx
c010c77e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c781:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c784:	8b 45 08             	mov    0x8(%ebp),%eax
c010c787:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c78a:	8b 55 10             	mov    0x10(%ebp),%edx
c010c78d:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c792:	89 c1                	mov    %eax,%ecx
c010c794:	83 e1 01             	and    $0x1,%ecx
c010c797:	85 c9                	test   %ecx,%ecx
c010c799:	74 0e                	je     c010c7a9 <copy_thread+0x3e>
c010c79b:	0f b6 0a             	movzbl (%edx),%ecx
c010c79e:	88 08                	mov    %cl,(%eax)
c010c7a0:	83 c0 01             	add    $0x1,%eax
c010c7a3:	83 c2 01             	add    $0x1,%edx
c010c7a6:	83 eb 01             	sub    $0x1,%ebx
c010c7a9:	89 c1                	mov    %eax,%ecx
c010c7ab:	83 e1 02             	and    $0x2,%ecx
c010c7ae:	85 c9                	test   %ecx,%ecx
c010c7b0:	74 0f                	je     c010c7c1 <copy_thread+0x56>
c010c7b2:	0f b7 0a             	movzwl (%edx),%ecx
c010c7b5:	66 89 08             	mov    %cx,(%eax)
c010c7b8:	83 c0 02             	add    $0x2,%eax
c010c7bb:	83 c2 02             	add    $0x2,%edx
c010c7be:	83 eb 02             	sub    $0x2,%ebx
c010c7c1:	89 d9                	mov    %ebx,%ecx
c010c7c3:	c1 e9 02             	shr    $0x2,%ecx
c010c7c6:	89 c7                	mov    %eax,%edi
c010c7c8:	89 d6                	mov    %edx,%esi
c010c7ca:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c7cc:	89 f2                	mov    %esi,%edx
c010c7ce:	89 f8                	mov    %edi,%eax
c010c7d0:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c7d5:	89 de                	mov    %ebx,%esi
c010c7d7:	83 e6 02             	and    $0x2,%esi
c010c7da:	85 f6                	test   %esi,%esi
c010c7dc:	74 0b                	je     c010c7e9 <copy_thread+0x7e>
c010c7de:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c7e2:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c7e6:	83 c1 02             	add    $0x2,%ecx
c010c7e9:	83 e3 01             	and    $0x1,%ebx
c010c7ec:	85 db                	test   %ebx,%ebx
c010c7ee:	74 07                	je     c010c7f7 <copy_thread+0x8c>
c010c7f0:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c7f4:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c7f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7fa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c7fd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c804:	8b 45 08             	mov    0x8(%ebp),%eax
c010c807:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c80a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c80d:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c810:	8b 45 08             	mov    0x8(%ebp),%eax
c010c813:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c816:	8b 55 08             	mov    0x8(%ebp),%edx
c010c819:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c81c:	8b 52 40             	mov    0x40(%edx),%edx
c010c81f:	80 ce 02             	or     $0x2,%dh
c010c822:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c825:	ba 6e c3 10 c0       	mov    $0xc010c36e,%edx
c010c82a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c82d:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c830:	8b 45 08             	mov    0x8(%ebp),%eax
c010c833:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c836:	89 c2                	mov    %eax,%edx
c010c838:	8b 45 08             	mov    0x8(%ebp),%eax
c010c83b:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c83e:	5b                   	pop    %ebx
c010c83f:	5e                   	pop    %esi
c010c840:	5f                   	pop    %edi
c010c841:	5d                   	pop    %ebp
c010c842:	c3                   	ret    

c010c843 <copy_files>:

//copy_files&put_files function used by do_fork in LAB8
//copy the files_struct from current to proc
static int
copy_files(uint32_t clone_flags, struct proc_struct *proc) {
c010c843:	55                   	push   %ebp
c010c844:	89 e5                	mov    %esp,%ebp
c010c846:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c849:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c84e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c854:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c857:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c85b:	75 24                	jne    c010c881 <copy_files+0x3e>
c010c85d:	c7 44 24 0c c0 7e 11 	movl   $0xc0117ec0,0xc(%esp)
c010c864:	c0 
c010c865:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010c86c:	c0 
c010c86d:	c7 44 24 04 81 01 00 	movl   $0x181,0x4(%esp)
c010c874:	00 
c010c875:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010c87c:	e8 33 46 ff ff       	call   c0100eb4 <__panic>

    if (clone_flags & CLONE_FS) {
c010c881:	8b 45 08             	mov    0x8(%ebp),%eax
c010c884:	25 00 08 00 00       	and    $0x800,%eax
c010c889:	85 c0                	test   %eax,%eax
c010c88b:	74 08                	je     c010c895 <copy_files+0x52>
        filesp = old_filesp;
c010c88d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c890:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010c893:	eb 40                	jmp    c010c8d5 <copy_files+0x92>
    }

    int ret = -E_NO_MEM;
c010c895:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010c89c:	e8 1f e7 ff ff       	call   c010afc0 <files_create>
c010c8a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c8a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c8a8:	75 02                	jne    c010c8ac <copy_files+0x69>
        goto bad_files_struct;
c010c8aa:	eb 47                	jmp    c010c8f3 <copy_files+0xb0>
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c010c8ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8b6:	89 04 24             	mov    %eax,(%esp)
c010c8b9:	e8 ab e8 ff ff       	call   c010b169 <dup_files>
c010c8be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c8c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c8c5:	74 0e                	je     c010c8d5 <copy_files+0x92>
        goto bad_dup_cleanup_fs;
c010c8c7:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010c8c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8cb:	89 04 24             	mov    %eax,(%esp)
c010c8ce:	e8 50 e7 ff ff       	call   c010b023 <files_destroy>
c010c8d3:	eb 1e                	jmp    c010c8f3 <copy_files+0xb0>
    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010c8d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8d8:	89 04 24             	mov    %eax,(%esp)
c010c8db:	e8 79 f5 ff ff       	call   c010be59 <files_count_inc>
    proc->filesp = filesp;
c010c8e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c8e6:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010c8ec:	b8 00 00 00 00       	mov    $0x0,%eax
c010c8f1:	eb 03                	jmp    c010c8f6 <copy_files+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010c8f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c8f6:	c9                   	leave  
c010c8f7:	c3                   	ret    

c010c8f8 <put_files>:

//decrease the ref_count of files, and if ref_count==0, then destroy files_struct
static void
put_files(struct proc_struct *proc) {
c010c8f8:	55                   	push   %ebp
c010c8f9:	89 e5                	mov    %esp,%ebp
c010c8fb:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010c8fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010c901:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c907:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010c90a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c90e:	74 1a                	je     c010c92a <put_files+0x32>
        if (files_count_dec(filesp) == 0) {
c010c910:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c913:	89 04 24             	mov    %eax,(%esp)
c010c916:	e8 58 f5 ff ff       	call   c010be73 <files_count_dec>
c010c91b:	85 c0                	test   %eax,%eax
c010c91d:	75 0b                	jne    c010c92a <put_files+0x32>
            files_destroy(filesp);
c010c91f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c922:	89 04 24             	mov    %eax,(%esp)
c010c925:	e8 f9 e6 ff ff       	call   c010b023 <files_destroy>
        }
    }
}
c010c92a:	c9                   	leave  
c010c92b:	c3                   	ret    

c010c92c <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010c92c:	55                   	push   %ebp
c010c92d:	89 e5                	mov    %esp,%ebp
c010c92f:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010c932:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010c939:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c93e:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010c943:	7e 05                	jle    c010c94a <do_fork+0x1e>
        goto fork_out;
c010c945:	e9 fe 00 00 00       	jmp    c010ca48 <do_fork+0x11c>
    }
    ret = -E_NO_MEM;
c010c94a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
    //第一步：申请内存块，如果失败，直接返回处理  
    if ((proc = alloc_proc()) == NULL) {  
c010c951:	e8 37 f5 ff ff       	call   c010be8d <alloc_proc>
c010c956:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c959:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c95d:	75 05                	jne    c010c964 <do_fork+0x38>
        goto fork_out;  
c010c95f:	e9 e4 00 00 00       	jmp    c010ca48 <do_fork+0x11c>
    }  
    //将子进程的父节点设置为当前进程  
    proc->parent = current;  
c010c964:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010c96a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c96d:	89 50 14             	mov    %edx,0x14(%eax)
    // 添加这行，确保当前进程正在等待    
    assert(current->wait_state == 0);
c010c970:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c975:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c97b:	85 c0                	test   %eax,%eax
c010c97d:	74 24                	je     c010c9a3 <do_fork+0x77>
c010c97f:	c7 44 24 0c e8 7e 11 	movl   $0xc0117ee8,0xc(%esp)
c010c986:	c0 
c010c987:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010c98e:	c0 
c010c98f:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c010c996:	00 
c010c997:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010c99e:	e8 11 45 ff ff       	call   c0100eb4 <__panic>
    //第二步：为进程分配一个内核栈  
    if (setup_kstack(proc) != 0) {  
c010c9a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9a6:	89 04 24             	mov    %eax,(%esp)
c010c9a9:	e8 72 fb ff ff       	call   c010c520 <setup_kstack>
c010c9ae:	85 c0                	test   %eax,%eax
c010c9b0:	74 05                	je     c010c9b7 <do_fork+0x8b>
        goto bad_fork_cleanup_proc;  
c010c9b2:	e9 a1 00 00 00       	jmp    c010ca58 <do_fork+0x12c>
    } 
    // 使用 copy_files()函数复制父进程的fs到子进程中
    if (copy_files(clone_flags, proc) != 0) {
c010c9b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9be:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9c1:	89 04 24             	mov    %eax,(%esp)
c010c9c4:	e8 7a fe ff ff       	call   c010c843 <copy_files>
c010c9c9:	85 c0                	test   %eax,%eax
c010c9cb:	74 02                	je     c010c9cf <do_fork+0xa3>
        goto bad_fork_cleanup_kstack;
c010c9cd:	eb 7e                	jmp    c010ca4d <do_fork+0x121>
    } 
    //第三步：复制父进程的内存信息到子进程  
    if (copy_mm(clone_flags, proc) != 0) {  
c010c9cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9d9:	89 04 24             	mov    %eax,(%esp)
c010c9dc:	e8 6e fc ff ff       	call   c010c64f <copy_mm>
c010c9e1:	85 c0                	test   %eax,%eax
c010c9e3:	74 02                	je     c010c9e7 <do_fork+0xbb>
         goto bad_fork_cleanup_kstack;  
c010c9e5:	eb 66                	jmp    c010ca4d <do_fork+0x121>
    }  
    //第四步：复制父进程相关寄存器信息（上下文）  
    copy_thread(proc, stack, tf);  
c010c9e7:	8b 45 10             	mov    0x10(%ebp),%eax
c010c9ea:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c9ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c9f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9f8:	89 04 24             	mov    %eax,(%esp)
c010c9fb:	e8 6b fd ff ff       	call   c010c76b <copy_thread>
    //第五步：将新进程添加到进程列表（此过程需要加保护锁）  
    bool intr_flag;  
    local_intr_save(intr_flag);  
c010ca00:	e8 7d f2 ff ff       	call   c010bc82 <__intr_save>
c010ca05:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {  
        proc->pid = get_pid();  
c010ca08:	e8 f4 f7 ff ff       	call   c010c201 <get_pid>
c010ca0d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ca10:	89 42 04             	mov    %eax,0x4(%edx)
        //建立散列映射方便查找  
        hash_proc(proc);  
c010ca13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca16:	89 04 24             	mov    %eax,(%esp)
c010ca19:	e8 68 f9 ff ff       	call   c010c386 <hash_proc>
        //list_add(&proc_list, &(proc->list_link));  
        //进程数+1 
        //nr_process ++;  
        // 删除加入链表和nr_process++
        // 将原来的简单计数改成设置进程的相关链接
        set_links(proc);
c010ca1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca21:	89 04 24             	mov    %eax,(%esp)
c010ca24:	e8 7d f6 ff ff       	call   c010c0a6 <set_links>
 
    }  
    local_intr_restore(intr_flag);  
c010ca29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca2c:	89 04 24             	mov    %eax,(%esp)
c010ca2f:	e8 78 f2 ff ff       	call   c010bcac <__intr_restore>
    //第六步：唤醒子进程  
    wakeup_proc(proc);  
c010ca34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca37:	89 04 24             	mov    %eax,(%esp)
c010ca3a:	e8 58 1a 00 00       	call   c010e497 <wakeup_proc>
    //第七步：设置返回的子进程号  
    ret = proc->pid;  
c010ca3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca42:	8b 40 04             	mov    0x4(%eax),%eax
c010ca45:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010ca48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca4b:	eb 18                	jmp    c010ca65 <do_fork+0x139>

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010ca4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca50:	89 04 24             	mov    %eax,(%esp)
c010ca53:	e8 04 fb ff ff       	call   c010c55c <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010ca58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca5b:	89 04 24             	mov    %eax,(%esp)
c010ca5e:	e8 64 82 ff ff       	call   c0104cc7 <kfree>
    goto fork_out;
c010ca63:	eb e3                	jmp    c010ca48 <do_fork+0x11c>
}
c010ca65:	c9                   	leave  
c010ca66:	c3                   	ret    

c010ca67 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010ca67:	55                   	push   %ebp
c010ca68:	89 e5                	mov    %esp,%ebp
c010ca6a:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010ca6d:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010ca73:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ca78:	39 c2                	cmp    %eax,%edx
c010ca7a:	75 1c                	jne    c010ca98 <do_exit+0x31>
        panic("idleproc exit.\n");
c010ca7c:	c7 44 24 08 01 7f 11 	movl   $0xc0117f01,0x8(%esp)
c010ca83:	c0 
c010ca84:	c7 44 24 04 0c 02 00 	movl   $0x20c,0x4(%esp)
c010ca8b:	00 
c010ca8c:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010ca93:	e8 1c 44 ff ff       	call   c0100eb4 <__panic>
    }
    if (current == initproc) {
c010ca98:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010ca9e:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010caa3:	39 c2                	cmp    %eax,%edx
c010caa5:	75 1c                	jne    c010cac3 <do_exit+0x5c>
        panic("initproc exit.\n");
c010caa7:	c7 44 24 08 11 7f 11 	movl   $0xc0117f11,0x8(%esp)
c010caae:	c0 
c010caaf:	c7 44 24 04 0f 02 00 	movl   $0x20f,0x4(%esp)
c010cab6:	00 
c010cab7:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010cabe:	e8 f1 43 ff ff       	call   c0100eb4 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010cac3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cac8:	8b 40 18             	mov    0x18(%eax),%eax
c010cacb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010cace:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cad2:	74 4a                	je     c010cb1e <do_exit+0xb7>
        lcr3(boot_cr3);
c010cad4:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010cad9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cadc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cadf:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cae5:	89 04 24             	mov    %eax,(%esp)
c010cae8:	e8 f9 f2 ff ff       	call   c010bde6 <mm_count_dec>
c010caed:	85 c0                	test   %eax,%eax
c010caef:	75 21                	jne    c010cb12 <do_exit+0xab>
            exit_mmap(mm);
c010caf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010caf4:	89 04 24             	mov    %eax,(%esp)
c010caf7:	e8 e7 b9 ff ff       	call   c01084e3 <exit_mmap>
            put_pgdir(mm);
c010cafc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010caff:	89 04 24             	mov    %eax,(%esp)
c010cb02:	e8 22 fb ff ff       	call   c010c629 <put_pgdir>
            mm_destroy(mm);
c010cb07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb0a:	89 04 24             	mov    %eax,(%esp)
c010cb0d:	e8 12 b7 ff ff       	call   c0108224 <mm_destroy>
        }
        current->mm = NULL;
c010cb12:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb17:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_files(current); //for LAB8
c010cb1e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb23:	89 04 24             	mov    %eax,(%esp)
c010cb26:	e8 cd fd ff ff       	call   c010c8f8 <put_files>
    current->state = PROC_ZOMBIE;
c010cb2b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb30:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010cb36:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb3b:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb3e:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010cb44:	e8 39 f1 ff ff       	call   c010bc82 <__intr_save>
c010cb49:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010cb4c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb51:	8b 40 14             	mov    0x14(%eax),%eax
c010cb54:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010cb57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb5a:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cb60:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cb65:	75 10                	jne    c010cb77 <do_exit+0x110>
            wakeup_proc(proc);
c010cb67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb6a:	89 04 24             	mov    %eax,(%esp)
c010cb6d:	e8 25 19 00 00       	call   c010e497 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010cb72:	e9 ac 00 00 00       	jmp    c010cc23 <do_exit+0x1bc>
c010cb77:	e9 a7 00 00 00       	jmp    c010cc23 <do_exit+0x1bc>
            proc = current->cptr;
c010cb7c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb81:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cb87:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010cb8a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cb92:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010cb98:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010cb9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cba1:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010cba8:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010cbab:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cbb0:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010cbb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbb9:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010cbbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbc2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cbc8:	85 c0                	test   %eax,%eax
c010cbca:	74 14                	je     c010cbe0 <do_exit+0x179>
                initproc->cptr->yptr = proc;
c010cbcc:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cbd1:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cbd7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cbda:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010cbe0:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010cbe6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbe9:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010cbec:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cbf1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cbf4:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010cbfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbfd:	8b 00                	mov    (%eax),%eax
c010cbff:	83 f8 03             	cmp    $0x3,%eax
c010cc02:	75 1f                	jne    c010cc23 <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c010cc04:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc09:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cc0f:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cc14:	75 0d                	jne    c010cc23 <do_exit+0x1bc>
                    wakeup_proc(initproc);
c010cc16:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc1b:	89 04 24             	mov    %eax,(%esp)
c010cc1e:	e8 74 18 00 00       	call   c010e497 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010cc23:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc28:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cc2e:	85 c0                	test   %eax,%eax
c010cc30:	0f 85 46 ff ff ff    	jne    c010cb7c <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010cc36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc39:	89 04 24             	mov    %eax,(%esp)
c010cc3c:	e8 6b f0 ff ff       	call   c010bcac <__intr_restore>
    
    schedule();
c010cc41:	e8 ed 18 00 00       	call   c010e533 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010cc46:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc4b:	8b 40 04             	mov    0x4(%eax),%eax
c010cc4e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cc52:	c7 44 24 08 24 7f 11 	movl   $0xc0117f24,0x8(%esp)
c010cc59:	c0 
c010cc5a:	c7 44 24 04 3c 02 00 	movl   $0x23c,0x4(%esp)
c010cc61:	00 
c010cc62:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010cc69:	e8 46 42 ff ff       	call   c0100eb4 <__panic>

c010cc6e <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010cc6e:	55                   	push   %ebp
c010cc6f:	89 e5                	mov    %esp,%ebp
c010cc71:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010cc74:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010cc7b:	00 
c010cc7c:	8b 45 14             	mov    0x14(%ebp),%eax
c010cc7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc83:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc86:	89 04 24             	mov    %eax,(%esp)
c010cc89:	e8 bd eb ff ff       	call   c010b84b <sysfile_seek>
c010cc8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cc91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cc95:	74 05                	je     c010cc9c <load_icode_read+0x2e>
        return ret;
c010cc97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc9a:	eb 38                	jmp    c010ccd4 <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010cc9c:	8b 45 10             	mov    0x10(%ebp),%eax
c010cc9f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cca3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cca6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ccaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccad:	89 04 24             	mov    %eax,(%esp)
c010ccb0:	e8 a4 e8 ff ff       	call   c010b559 <sysfile_read>
c010ccb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ccb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccbb:	3b 45 10             	cmp    0x10(%ebp),%eax
c010ccbe:	74 0f                	je     c010cccf <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010ccc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010ccc5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ccc9:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010cccd:	eb 05                	jmp    c010ccd4 <load_icode_read+0x66>
    }
    return 0;
c010cccf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ccd4:	c9                   	leave  
c010ccd5:	c3                   	ret    

c010ccd6 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010ccd6:	55                   	push   %ebp
c010ccd7:	89 e5                	mov    %esp,%ebp
c010ccd9:	81 ec e8 00 00 00    	sub    $0xe8,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010ccdf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cce3:	78 06                	js     c010cceb <load_icode+0x15>
c010cce5:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010cce9:	7e 24                	jle    c010cd0f <load_icode+0x39>
c010cceb:	c7 44 24 0c 44 7f 11 	movl   $0xc0117f44,0xc(%esp)
c010ccf2:	c0 
c010ccf3:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010ccfa:	c0 
c010ccfb:	c7 44 24 04 68 02 00 	movl   $0x268,0x4(%esp)
c010cd02:	00 
c010cd03:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010cd0a:	e8 a5 41 ff ff       	call   c0100eb4 <__panic>
    //(1)建立内存管理器
    if (current->mm != NULL) {//要求当前内存管理器为空
c010cd0f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cd14:	8b 40 18             	mov    0x18(%eax),%eax
c010cd17:	85 c0                	test   %eax,%eax
c010cd19:	74 1c                	je     c010cd37 <load_icode+0x61>
        panic("load_icode: current->mm must be empty.\n");
c010cd1b:	c7 44 24 08 6c 7f 11 	movl   $0xc0117f6c,0x8(%esp)
c010cd22:	c0 
c010cd23:	c7 44 24 04 6b 02 00 	movl   $0x26b,0x4(%esp)
c010cd2a:	00 
c010cd2b:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010cd32:	e8 7d 41 ff ff       	call   c0100eb4 <__panic>
    }

    int ret = -E_NO_MEM;// E_NO_MEM代表因为存储设备产生的请求错误
c010cd37:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;//建立内存管理器
    if ((mm = mm_create()) == NULL) {
c010cd3e:	e8 7c b1 ff ff       	call   c0107ebf <mm_create>
c010cd43:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010cd46:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c010cd4a:	75 06                	jne    c010cd52 <load_icode+0x7c>
        goto bad_mm;
c010cd4c:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010cd4d:	e9 6f 07 00 00       	jmp    c010d4c1 <load_icode+0x7eb>
    struct mm_struct *mm;//建立内存管理器
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2)建立页目录
    if (setup_pgdir(mm) != 0) {
c010cd52:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cd55:	89 04 24             	mov    %eax,(%esp)
c010cd58:	e8 25 f8 ff ff       	call   c010c582 <setup_pgdir>
c010cd5d:	85 c0                	test   %eax,%eax
c010cd5f:	74 05                	je     c010cd66 <load_icode+0x90>
        goto bad_pgdir_cleanup_mm;
c010cd61:	e9 76 07 00 00       	jmp    c010d4dc <load_icode+0x806>
    }
    struct Page *page;//建立页表
    //(3)从文件加载程序到内存
 //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr __elf, *elf = &__elf;//读取elf文件头
c010cd66:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
c010cd6c:	89 45 bc             	mov    %eax,-0x44(%ebp)
//(3.2) get the entry of the program section headers of the bianry program (ELF format)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010cd6f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010cd76:	00 
c010cd77:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010cd7e:	00 
c010cd7f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cd82:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd86:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd89:	89 04 24             	mov    %eax,(%esp)
c010cd8c:	e8 dd fe ff ff       	call   c010cc6e <load_icode_read>
c010cd91:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cd94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cd98:	74 05                	je     c010cd9f <load_icode+0xc9>
        goto bad_elf_cleanup_pgdir;
c010cd9a:	e9 32 07 00 00       	jmp    c010d4d1 <load_icode+0x7fb>
    }
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010cd9f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cda2:	8b 00                	mov    (%eax),%eax
c010cda4:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010cda9:	74 0c                	je     c010cdb7 <load_icode+0xe1>
        ret = -E_INVAL_ELF;
c010cdab:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010cdb2:	e9 1a 07 00 00       	jmp    c010d4d1 <load_icode+0x7fb>
    }

    struct proghdr __ph, *ph = &__ph;
c010cdb7:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
c010cdbd:	89 45 b8             	mov    %eax,-0x48(%ebp)
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {//e_phnum代表程序段入口地址数目，即多少各段
c010cdc0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010cdc7:	e9 76 03 00 00       	jmp    c010d142 <load_icode+0x46c>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;//循环读取程序的每个段的头部   
c010cdcc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cdcf:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cdd2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cdd5:	c1 e2 05             	shl    $0x5,%edx
c010cdd8:	01 d0                	add    %edx,%eax
c010cdda:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010cddd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010cde0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cde4:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010cdeb:	00 
c010cdec:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cdef:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cdf3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdf6:	89 04 24             	mov    %eax,(%esp)
c010cdf9:	e8 70 fe ff ff       	call   c010cc6e <load_icode_read>
c010cdfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce05:	74 05                	je     c010ce0c <load_icode+0x136>
            goto bad_elf_cleanup_pgdir;
c010ce07:	e9 c5 06 00 00       	jmp    c010d4d1 <load_icode+0x7fb>
        }
  //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010ce0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce0f:	8b 00                	mov    (%eax),%eax
c010ce11:	83 f8 01             	cmp    $0x1,%eax
c010ce14:	74 05                	je     c010ce1b <load_icode+0x145>
            continue ;
c010ce16:	e9 23 03 00 00       	jmp    c010d13e <load_icode+0x468>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010ce1b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce1e:	8b 50 10             	mov    0x10(%eax),%edx
c010ce21:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce24:	8b 40 14             	mov    0x14(%eax),%eax
c010ce27:	39 c2                	cmp    %eax,%edx
c010ce29:	76 0c                	jbe    c010ce37 <load_icode+0x161>
            ret = -E_INVAL_ELF;
c010ce2b:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010ce32:	e9 8f 06 00 00       	jmp    c010d4c6 <load_icode+0x7f0>
        }
        if (ph->p_filesz == 0) {
c010ce37:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce3a:	8b 40 10             	mov    0x10(%eax),%eax
c010ce3d:	85 c0                	test   %eax,%eax
c010ce3f:	75 05                	jne    c010ce46 <load_icode+0x170>
            continue ;
c010ce41:	e9 f8 02 00 00       	jmp    c010d13e <load_icode+0x468>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;//建立虚拟地址与物理地址之间的映射
c010ce46:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010ce4d:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010ce54:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce57:	8b 40 18             	mov    0x18(%eax),%eax
c010ce5a:	83 e0 01             	and    $0x1,%eax
c010ce5d:	85 c0                	test   %eax,%eax
c010ce5f:	74 04                	je     c010ce65 <load_icode+0x18f>
c010ce61:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010ce65:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce68:	8b 40 18             	mov    0x18(%eax),%eax
c010ce6b:	83 e0 02             	and    $0x2,%eax
c010ce6e:	85 c0                	test   %eax,%eax
c010ce70:	74 04                	je     c010ce76 <load_icode+0x1a0>
c010ce72:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010ce76:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce79:	8b 40 18             	mov    0x18(%eax),%eax
c010ce7c:	83 e0 04             	and    $0x4,%eax
c010ce7f:	85 c0                	test   %eax,%eax
c010ce81:	74 04                	je     c010ce87 <load_icode+0x1b1>
c010ce83:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010ce87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce8a:	83 e0 02             	and    $0x2,%eax
c010ce8d:	85 c0                	test   %eax,%eax
c010ce8f:	74 04                	je     c010ce95 <load_icode+0x1bf>
c010ce91:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010ce95:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce98:	8b 50 14             	mov    0x14(%eax),%edx
c010ce9b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ce9e:	8b 40 08             	mov    0x8(%eax),%eax
c010cea1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010cea8:	00 
c010cea9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ceac:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010ceb0:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ceb4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ceb8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cebb:	89 04 24             	mov    %eax,(%esp)
c010cebe:	e8 03 b4 ff ff       	call   c01082c6 <mm_map>
c010cec3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cec6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ceca:	74 05                	je     c010ced1 <load_icode+0x1fb>
            goto bad_cleanup_mmap;
c010cecc:	e9 f5 05 00 00       	jmp    c010d4c6 <load_icode+0x7f0>
        }
        off_t offset = ph->p_offset;
c010ced1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ced4:	8b 40 04             	mov    0x4(%eax),%eax
c010ced7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010ceda:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cedd:	8b 40 08             	mov    0x8(%eax),%eax
c010cee0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cee3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cee6:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010cee9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ceec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010cef1:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010cef4:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
	//复制数据段和代码段
        end = ph->p_va + ph->p_filesz;//计算数据段和代码段终止地址
c010cefb:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cefe:	8b 50 08             	mov    0x8(%eax),%edx
c010cf01:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cf04:	8b 40 10             	mov    0x10(%eax),%eax
c010cf07:	01 d0                	add    %edx,%eax
c010cf09:	89 45 ac             	mov    %eax,-0x54(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010cf0c:	e9 b1 00 00 00       	jmp    c010cfc2 <load_icode+0x2ec>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010cf11:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf14:	8b 40 0c             	mov    0xc(%eax),%eax
c010cf17:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cf1a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cf1e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cf21:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cf25:	89 04 24             	mov    %eax,(%esp)
c010cf28:	e8 c5 90 ff ff       	call   c0105ff2 <pgdir_alloc_page>
c010cf2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cf34:	75 0c                	jne    c010cf42 <load_icode+0x26c>
                ret = -E_NO_MEM;
c010cf36:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010cf3d:	e9 84 05 00 00       	jmp    c010d4c6 <load_icode+0x7f0>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010cf42:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cf45:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cf48:	29 c2                	sub    %eax,%edx
c010cf4a:	89 d0                	mov    %edx,%eax
c010cf4c:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010cf4f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010cf54:	2b 45 a8             	sub    -0x58(%ebp),%eax
c010cf57:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010cf5a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010cf61:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010cf64:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cf67:	73 0d                	jae    c010cf76 <load_icode+0x2a0>
                size -= la - end;
c010cf69:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cf6c:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010cf6f:	29 c2                	sub    %eax,%edx
c010cf71:	89 d0                	mov    %edx,%eax
c010cf73:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
	    //每次读取size大小的块，直至全部读完
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010cf76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf79:	89 04 24             	mov    %eax,(%esp)
c010cf7c:	e8 ad ed ff ff       	call   c010bd2e <page2kva>
c010cf81:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010cf84:	01 c2                	add    %eax,%edx
c010cf86:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cf89:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cf8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cf90:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cf94:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cf98:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf9b:	89 04 24             	mov    %eax,(%esp)
c010cf9e:	e8 cb fc ff ff       	call   c010cc6e <load_icode_read>
c010cfa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cfa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cfaa:	74 05                	je     c010cfb1 <load_icode+0x2db>
                goto bad_cleanup_mmap;
c010cfac:	e9 15 05 00 00       	jmp    c010d4c6 <load_icode+0x7f0>
            }
            start += size, offset += size;
c010cfb1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cfb4:	01 45 d8             	add    %eax,-0x28(%ebp)
c010cfb7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010cfba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cfbd:	01 d0                	add    %edx,%eax
c010cfbf:	89 45 e0             	mov    %eax,-0x20(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
	//复制数据段和代码段
        end = ph->p_va + ph->p_filesz;//计算数据段和代码段终止地址
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010cfc2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfc5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
c010cfc8:	0f 82 43 ff ff ff    	jb     c010cf11 <load_icode+0x23b>
            start += size, offset += size;
        }

      //(3.6.2) build BSS section of binary program
      //建立BSS段
        end = ph->p_va + ph->p_memsz;//计算终止地址
c010cfce:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cfd1:	8b 50 08             	mov    0x8(%eax),%edx
c010cfd4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cfd7:	8b 40 14             	mov    0x14(%eax),%eax
c010cfda:	01 d0                	add    %edx,%eax
c010cfdc:	89 45 ac             	mov    %eax,-0x54(%ebp)

        if (start < la) {
c010cfdf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfe2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cfe5:	0f 83 b0 00 00 00    	jae    c010d09b <load_icode+0x3c5>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010cfeb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfee:	3b 45 ac             	cmp    -0x54(%ebp),%eax
c010cff1:	75 05                	jne    c010cff8 <load_icode+0x322>
                continue ;
c010cff3:	e9 46 01 00 00       	jmp    c010d13e <load_icode+0x468>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010cff8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cffb:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cffe:	29 c2                	sub    %eax,%edx
c010d000:	89 d0                	mov    %edx,%eax
c010d002:	05 00 10 00 00       	add    $0x1000,%eax
c010d007:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d00a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d00f:	2b 45 a8             	sub    -0x58(%ebp),%eax
c010d012:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010d015:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d018:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d01b:	73 0d                	jae    c010d02a <load_icode+0x354>
                size -= la - end;
c010d01d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d020:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d023:	29 c2                	sub    %eax,%edx
c010d025:	89 d0                	mov    %edx,%eax
c010d027:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d02a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d02d:	89 04 24             	mov    %eax,(%esp)
c010d030:	e8 f9 ec ff ff       	call   c010bd2e <page2kva>
c010d035:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010d038:	01 c2                	add    %eax,%edx
c010d03a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d03d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d041:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d048:	00 
c010d049:	89 14 24             	mov    %edx,(%esp)
c010d04c:	e8 a7 83 00 00       	call   c01153f8 <memset>
            start += size;
c010d051:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d054:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010d057:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d05a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d05d:	73 08                	jae    c010d067 <load_icode+0x391>
c010d05f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d062:	3b 45 ac             	cmp    -0x54(%ebp),%eax
c010d065:	74 34                	je     c010d09b <load_icode+0x3c5>
c010d067:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d06a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d06d:	72 08                	jb     c010d077 <load_icode+0x3a1>
c010d06f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d072:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d075:	74 24                	je     c010d09b <load_icode+0x3c5>
c010d077:	c7 44 24 0c 94 7f 11 	movl   $0xc0117f94,0xc(%esp)
c010d07e:	c0 
c010d07f:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010d086:	c0 
c010d087:	c7 44 24 04 c9 02 00 	movl   $0x2c9,0x4(%esp)
c010d08e:	00 
c010d08f:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d096:	e8 19 3e ff ff       	call   c0100eb4 <__panic>
        }
        while (start < end) {
c010d09b:	e9 92 00 00 00       	jmp    c010d132 <load_icode+0x45c>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d0a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0a3:	8b 40 0c             	mov    0xc(%eax),%eax
c010d0a6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d0a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d0ad:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d0b0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d0b4:	89 04 24             	mov    %eax,(%esp)
c010d0b7:	e8 36 8f ff ff       	call   c0105ff2 <pgdir_alloc_page>
c010d0bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d0bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d0c3:	75 0c                	jne    c010d0d1 <load_icode+0x3fb>
                ret = -E_NO_MEM;
c010d0c5:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d0cc:	e9 f5 03 00 00       	jmp    c010d4c6 <load_icode+0x7f0>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d0d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0d4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d0d7:	29 c2                	sub    %eax,%edx
c010d0d9:	89 d0                	mov    %edx,%eax
c010d0db:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d0de:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d0e3:	2b 45 a8             	sub    -0x58(%ebp),%eax
c010d0e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d0e9:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d0f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d0f3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0f6:	73 0d                	jae    c010d105 <load_icode+0x42f>
                size -= la - end;
c010d0f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0fb:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d0fe:	29 c2                	sub    %eax,%edx
c010d100:	89 d0                	mov    %edx,%eax
c010d102:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
	    //每次操作size大小的块
            memset(page2kva(page) + off, 0, size);
c010d105:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d108:	89 04 24             	mov    %eax,(%esp)
c010d10b:	e8 1e ec ff ff       	call   c010bd2e <page2kva>
c010d110:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010d113:	01 c2                	add    %eax,%edx
c010d115:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d118:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d11c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d123:	00 
c010d124:	89 14 24             	mov    %edx,(%esp)
c010d127:	e8 cc 82 00 00       	call   c01153f8 <memset>
            start += size;
c010d12c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d12f:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010d132:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d135:	3b 45 ac             	cmp    -0x54(%ebp),%eax
c010d138:	0f 82 62 ff ff ff    	jb     c010d0a0 <load_icode+0x3ca>
        goto bad_elf_cleanup_pgdir;
    }

    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {//e_phnum代表程序段入口地址数目，即多少各段
c010d13e:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010d142:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010d145:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010d149:	0f b7 c0             	movzwl %ax,%eax
c010d14c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d14f:	0f 87 77 fc ff ff    	ja     c010cdcc <load_icode+0xf6>
	    //每次操作size大小的块
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);//关闭文件，加载程序结束
c010d155:	8b 45 08             	mov    0x8(%ebp),%eax
c010d158:	89 04 24             	mov    %eax,(%esp)
c010d15b:	e8 e6 e3 ff ff       	call   c010b546 <sysfile_close>
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d160:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d167:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d16e:	00 
c010d16f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d172:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d176:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d17d:	00 
c010d17e:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d185:	af 
c010d186:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d189:	89 04 24             	mov    %eax,(%esp)
c010d18c:	e8 35 b1 ff ff       	call   c01082c6 <mm_map>
c010d191:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d194:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d198:	74 05                	je     c010d19f <load_icode+0x4c9>
        goto bad_cleanup_mmap;
c010d19a:	e9 27 03 00 00       	jmp    c010d4c6 <load_icode+0x7f0>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d19f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d1a2:	8b 40 0c             	mov    0xc(%eax),%eax
c010d1a5:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d1ac:	00 
c010d1ad:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d1b4:	af 
c010d1b5:	89 04 24             	mov    %eax,(%esp)
c010d1b8:	e8 35 8e ff ff       	call   c0105ff2 <pgdir_alloc_page>
c010d1bd:	85 c0                	test   %eax,%eax
c010d1bf:	75 24                	jne    c010d1e5 <load_icode+0x50f>
c010d1c1:	c7 44 24 0c d0 7f 11 	movl   $0xc0117fd0,0xc(%esp)
c010d1c8:	c0 
c010d1c9:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010d1d0:	c0 
c010d1d1:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
c010d1d8:	00 
c010d1d9:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d1e0:	e8 cf 3c ff ff       	call   c0100eb4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d1e5:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d1e8:	8b 40 0c             	mov    0xc(%eax),%eax
c010d1eb:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d1f2:	00 
c010d1f3:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d1fa:	af 
c010d1fb:	89 04 24             	mov    %eax,(%esp)
c010d1fe:	e8 ef 8d ff ff       	call   c0105ff2 <pgdir_alloc_page>
c010d203:	85 c0                	test   %eax,%eax
c010d205:	75 24                	jne    c010d22b <load_icode+0x555>
c010d207:	c7 44 24 0c 14 80 11 	movl   $0xc0118014,0xc(%esp)
c010d20e:	c0 
c010d20f:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010d216:	c0 
c010d217:	c7 44 24 04 e0 02 00 	movl   $0x2e0,0x4(%esp)
c010d21e:	00 
c010d21f:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d226:	e8 89 3c ff ff       	call   c0100eb4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d22b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d22e:	8b 40 0c             	mov    0xc(%eax),%eax
c010d231:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d238:	00 
c010d239:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d240:	af 
c010d241:	89 04 24             	mov    %eax,(%esp)
c010d244:	e8 a9 8d ff ff       	call   c0105ff2 <pgdir_alloc_page>
c010d249:	85 c0                	test   %eax,%eax
c010d24b:	75 24                	jne    c010d271 <load_icode+0x59b>
c010d24d:	c7 44 24 0c 58 80 11 	movl   $0xc0118058,0xc(%esp)
c010d254:	c0 
c010d255:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010d25c:	c0 
c010d25d:	c7 44 24 04 e1 02 00 	movl   $0x2e1,0x4(%esp)
c010d264:	00 
c010d265:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d26c:	e8 43 3c ff ff       	call   c0100eb4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d271:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d274:	8b 40 0c             	mov    0xc(%eax),%eax
c010d277:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d27e:	00 
c010d27f:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d286:	af 
c010d287:	89 04 24             	mov    %eax,(%esp)
c010d28a:	e8 63 8d ff ff       	call   c0105ff2 <pgdir_alloc_page>
c010d28f:	85 c0                	test   %eax,%eax
c010d291:	75 24                	jne    c010d2b7 <load_icode+0x5e1>
c010d293:	c7 44 24 0c 9c 80 11 	movl   $0xc011809c,0xc(%esp)
c010d29a:	c0 
c010d29b:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010d2a2:	c0 
c010d2a3:	c7 44 24 04 e2 02 00 	movl   $0x2e2,0x4(%esp)
c010d2aa:	00 
c010d2ab:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d2b2:	e8 fd 3b ff ff       	call   c0100eb4 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010d2b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d2ba:	89 04 24             	mov    %eax,(%esp)
c010d2bd:	e8 0a eb ff ff       	call   c010bdcc <mm_count_inc>
    current->mm = mm;
c010d2c2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d2c7:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010d2ca:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010d2cd:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d2d2:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010d2d5:	8b 52 0c             	mov    0xc(%edx),%edx
c010d2d8:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c010d2db:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010d2e2:	77 23                	ja     c010d307 <load_icode+0x631>
c010d2e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d2e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d2eb:	c7 44 24 08 88 7e 11 	movl   $0xc0117e88,0x8(%esp)
c010d2f2:	c0 
c010d2f3:	c7 44 24 04 e7 02 00 	movl   $0x2e7,0x4(%esp)
c010d2fa:	00 
c010d2fb:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d302:	e8 ad 3b ff ff       	call   c0100eb4 <__panic>
c010d307:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010d30a:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d310:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010d313:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d316:	8b 40 0c             	mov    0xc(%eax),%eax
c010d319:	89 45 a0             	mov    %eax,-0x60(%ebp)
c010d31c:	81 7d a0 ff ff ff bf 	cmpl   $0xbfffffff,-0x60(%ebp)
c010d323:	77 23                	ja     c010d348 <load_icode+0x672>
c010d325:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d328:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d32c:	c7 44 24 08 88 7e 11 	movl   $0xc0117e88,0x8(%esp)
c010d333:	c0 
c010d334:	c7 44 24 04 e8 02 00 	movl   $0x2e8,0x4(%esp)
c010d33b:	00 
c010d33c:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d343:	e8 6c 3b ff ff       	call   c0100eb4 <__panic>
c010d348:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d34b:	05 00 00 00 40       	add    $0x40000000,%eax
c010d350:	89 45 90             	mov    %eax,-0x70(%ebp)
c010d353:	8b 45 90             	mov    -0x70(%ebp),%eax
c010d356:	0f 22 d8             	mov    %eax,%cr3

    // 先算出所有参数加起来的长度
    uint32_t total_len = 0,i;
c010d359:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; ++i) {
c010d360:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d367:	eb 30                	jmp    c010d399 <load_icode+0x6c3>
        total_len += strnlen(kargv[i], EXEC_MAX_ARG_LEN) + 1;
c010d369:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d36c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d373:	8b 45 10             	mov    0x10(%ebp),%eax
c010d376:	01 d0                	add    %edx,%eax
c010d378:	8b 00                	mov    (%eax),%eax
c010d37a:	c7 44 24 04 ff 0f 00 	movl   $0xfff,0x4(%esp)
c010d381:	00 
c010d382:	89 04 24             	mov    %eax,(%esp)
c010d385:	e8 40 7d 00 00       	call   c01150ca <strnlen>
c010d38a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d38d:	01 d0                	add    %edx,%eax
c010d38f:	83 c0 01             	add    $0x1,%eax
c010d392:	89 45 d0             	mov    %eax,-0x30(%ebp)
    current->cr3 = PADDR(mm->pgdir);
    lcr3(PADDR(mm->pgdir));

    // 先算出所有参数加起来的长度
    uint32_t total_len = 0,i;
    for (i = 0; i < argc; ++i) {
c010d395:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d399:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d39c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d39f:	77 c8                	ja     c010d369 <load_icode+0x693>
        total_len += strnlen(kargv[i], EXEC_MAX_ARG_LEN) + 1;
    }
    
    // 用户栈顶 减去所有参数加起来的长度 再 4字节对齐 找到 真正存放字符串参数的栈的位置
    char *arg_str = (USTACKTOP - total_len) & 0xfffffffc;
c010d3a1:	b8 00 00 00 b0       	mov    $0xb0000000,%eax
c010d3a6:	2b 45 d0             	sub    -0x30(%ebp),%eax
c010d3a9:	83 e0 fc             	and    $0xfffffffc,%eax
c010d3ac:	89 45 c8             	mov    %eax,-0x38(%ebp)
    // 放字符串参数的栈的位置的下面 是存放指向字符串参数的指针
    int32_t *arg_ptr = (int32_t *)arg_str - argc;
c010d3af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3b2:	c1 e0 02             	shl    $0x2,%eax
c010d3b5:	f7 d8                	neg    %eax
c010d3b7:	89 c2                	mov    %eax,%edx
c010d3b9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d3bc:	01 d0                	add    %edx,%eax
c010d3be:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    // 指向字符串参数的指针下面 是参数的个数
    int32_t *stacktop = arg_ptr - 1;
c010d3c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d3c4:	83 e8 04             	sub    $0x4,%eax
c010d3c7:	89 45 9c             	mov    %eax,-0x64(%ebp)
    *stacktop = argc;
c010d3ca:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d3cd:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d3d0:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < argc; ++i) {
c010d3d2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d3d9:	eb 64                	jmp    c010d43f <load_icode+0x769>
        uint32_t arg_len = strnlen(kargv[i], EXEC_MAX_ARG_LEN);
c010d3db:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d3de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d3e5:	8b 45 10             	mov    0x10(%ebp),%eax
c010d3e8:	01 d0                	add    %edx,%eax
c010d3ea:	8b 00                	mov    (%eax),%eax
c010d3ec:	c7 44 24 04 ff 0f 00 	movl   $0xfff,0x4(%esp)
c010d3f3:	00 
c010d3f4:	89 04 24             	mov    %eax,(%esp)
c010d3f7:	e8 ce 7c 00 00       	call   c01150ca <strnlen>
c010d3fc:	89 45 98             	mov    %eax,-0x68(%ebp)
        strncpy(arg_str, kargv[i], arg_len);
c010d3ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d402:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d409:	8b 45 10             	mov    0x10(%ebp),%eax
c010d40c:	01 d0                	add    %edx,%eax
c010d40e:	8b 00                	mov    (%eax),%eax
c010d410:	8b 55 98             	mov    -0x68(%ebp),%edx
c010d413:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d417:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d41b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d41e:	89 04 24             	mov    %eax,(%esp)
c010d421:	e8 3a 7d 00 00       	call   c0115160 <strncpy>
        *arg_ptr = arg_str;
c010d426:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d429:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d42c:	89 10                	mov    %edx,(%eax)
        arg_str += arg_len + 1;
c010d42e:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d431:	83 c0 01             	add    $0x1,%eax
c010d434:	01 45 c8             	add    %eax,-0x38(%ebp)
        ++arg_ptr;
c010d437:	83 45 c4 04          	addl   $0x4,-0x3c(%ebp)
    // 放字符串参数的栈的位置的下面 是存放指向字符串参数的指针
    int32_t *arg_ptr = (int32_t *)arg_str - argc;
    // 指向字符串参数的指针下面 是参数的个数
    int32_t *stacktop = arg_ptr - 1;
    *stacktop = argc;
    for (i = 0; i < argc; ++i) {
c010d43b:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d43f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d442:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d445:	77 94                	ja     c010d3db <load_icode+0x705>
        *arg_ptr = arg_str;
        arg_str += arg_len + 1;
        ++arg_ptr;
    }
    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010d447:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d44c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d44f:	89 45 94             	mov    %eax,-0x6c(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d452:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d459:	00 
c010d45a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d461:	00 
c010d462:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d465:	89 04 24             	mov    %eax,(%esp)
c010d468:	e8 8b 7f 00 00       	call   c01153f8 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010d46d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d470:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d476:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d479:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d47f:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d482:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d486:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d489:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d48d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d490:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d494:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d497:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c010d49b:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010d49e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d4a1:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010d4a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010d4a7:	8b 50 18             	mov    0x18(%eax),%edx
c010d4aa:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d4ad:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010d4b0:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d4b3:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010d4ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010d4c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4c4:	eb 23                	jmp    c010d4e9 <load_icode+0x813>
bad_cleanup_mmap:
    exit_mmap(mm);
c010d4c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d4c9:	89 04 24             	mov    %eax,(%esp)
c010d4cc:	e8 12 b0 ff ff       	call   c01084e3 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010d4d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d4d4:	89 04 24             	mov    %eax,(%esp)
c010d4d7:	e8 4d f1 ff ff       	call   c010c629 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010d4dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d4df:	89 04 24             	mov    %eax,(%esp)
c010d4e2:	e8 3d ad ff ff       	call   c0108224 <mm_destroy>
bad_mm:
    goto out;
c010d4e7:	eb d8                	jmp    c010d4c1 <load_icode+0x7eb>
}
c010d4e9:	c9                   	leave  
c010d4ea:	c3                   	ret    

c010d4eb <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d4eb:	55                   	push   %ebp
c010d4ec:	89 e5                	mov    %esp,%ebp
c010d4ee:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d4f1:	eb 1d                	jmp    c010d510 <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d4f3:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d4f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4fa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d501:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d504:	01 d0                	add    %edx,%eax
c010d506:	8b 00                	mov    (%eax),%eax
c010d508:	89 04 24             	mov    %eax,(%esp)
c010d50b:	e8 b7 77 ff ff       	call   c0104cc7 <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d510:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d514:	7f dd                	jg     c010d4f3 <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d516:	c9                   	leave  
c010d517:	c3                   	ret    

c010d518 <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d518:	55                   	push   %ebp
c010d519:	89 e5                	mov    %esp,%ebp
c010d51b:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d51e:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d525:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d528:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d52f:	8b 45 14             	mov    0x14(%ebp),%eax
c010d532:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d539:	00 
c010d53a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d53e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d542:	8b 45 08             	mov    0x8(%ebp),%eax
c010d545:	89 04 24             	mov    %eax,(%esp)
c010d548:	e8 2d ba ff ff       	call   c0108f7a <user_mem_check>
c010d54d:	85 c0                	test   %eax,%eax
c010d54f:	75 08                	jne    c010d559 <copy_kargv+0x41>
        return ret;
c010d551:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d554:	e9 a4 00 00 00       	jmp    c010d5fd <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d559:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d560:	eb 77                	jmp    c010d5d9 <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d562:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d569:	e8 3e 77 ff ff       	call   c0104cac <kmalloc>
c010d56e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d571:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d575:	75 0a                	jne    c010d581 <copy_kargv+0x69>
            goto failed_nomem;
c010d577:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d578:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d57f:	eb 67                	jmp    c010d5e8 <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d581:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d584:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d58b:	8b 45 14             	mov    0x14(%ebp),%eax
c010d58e:	01 d0                	add    %edx,%eax
c010d590:	8b 00                	mov    (%eax),%eax
c010d592:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d599:	00 
c010d59a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d59e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d5a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d5a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5a8:	89 04 24             	mov    %eax,(%esp)
c010d5ab:	e8 ed ba ff ff       	call   c010909d <copy_string>
c010d5b0:	85 c0                	test   %eax,%eax
c010d5b2:	75 0d                	jne    c010d5c1 <copy_kargv+0xa9>
            kfree(buffer);
c010d5b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d5b7:	89 04 24             	mov    %eax,(%esp)
c010d5ba:	e8 08 77 ff ff       	call   c0104cc7 <kfree>
            goto failed_cleanup;
c010d5bf:	eb 27                	jmp    c010d5e8 <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c010d5c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5cb:	8b 45 10             	mov    0x10(%ebp),%eax
c010d5ce:	01 c2                	add    %eax,%edx
c010d5d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d5d3:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d5d5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d5d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5dc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d5df:	7c 81                	jl     c010d562 <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d5e1:	b8 00 00 00 00       	mov    $0x0,%eax
c010d5e6:	eb 15                	jmp    c010d5fd <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c010d5e8:	8b 45 10             	mov    0x10(%ebp),%eax
c010d5eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d5ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5f2:	89 04 24             	mov    %eax,(%esp)
c010d5f5:	e8 f1 fe ff ff       	call   c010d4eb <put_kargv>
    return ret;
c010d5fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d5fd:	c9                   	leave  
c010d5fe:	c3                   	ret    

c010d5ff <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d5ff:	55                   	push   %ebp
c010d600:	89 e5                	mov    %esp,%ebp
c010d602:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d608:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d60d:	8b 40 18             	mov    0x18(%eax),%eax
c010d610:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d613:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d617:	7e 06                	jle    c010d61f <do_execve+0x20>
c010d619:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d61d:	7e 0a                	jle    c010d629 <do_execve+0x2a>
        return -E_INVAL;
c010d61f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d624:	e9 11 02 00 00       	jmp    c010d83a <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d629:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d630:	00 
c010d631:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d638:	00 
c010d639:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d63c:	89 04 24             	mov    %eax,(%esp)
c010d63f:	e8 b4 7d 00 00       	call   c01153f8 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d644:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d64b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d64e:	89 04 24             	mov    %eax,(%esp)
c010d651:	e8 aa e7 ff ff       	call   c010be00 <lock_mm>
    if (name == NULL) {
c010d656:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d65a:	75 29                	jne    c010d685 <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d65c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d661:	8b 40 04             	mov    0x4(%eax),%eax
c010d664:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d668:	c7 44 24 08 df 80 11 	movl   $0xc01180df,0x8(%esp)
c010d66f:	c0 
c010d670:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d677:	00 
c010d678:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d67b:	89 04 24             	mov    %eax,(%esp)
c010d67e:	e8 a7 78 00 00       	call   c0114f2a <snprintf>
c010d683:	eb 38                	jmp    c010d6bd <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d685:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d68c:	00 
c010d68d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d690:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d694:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d697:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d69b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d69e:	89 04 24             	mov    %eax,(%esp)
c010d6a1:	e8 f7 b9 ff ff       	call   c010909d <copy_string>
c010d6a6:	85 c0                	test   %eax,%eax
c010d6a8:	75 13                	jne    c010d6bd <do_execve+0xbe>
            unlock_mm(mm);
c010d6aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6ad:	89 04 24             	mov    %eax,(%esp)
c010d6b0:	e8 7e e7 ff ff       	call   c010be33 <unlock_mm>
            return ret;
c010d6b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6b8:	e9 7d 01 00 00       	jmp    c010d83a <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d6bd:	8b 45 10             	mov    0x10(%ebp),%eax
c010d6c0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d6c4:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d6ca:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d6ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6d8:	89 04 24             	mov    %eax,(%esp)
c010d6db:	e8 38 fe ff ff       	call   c010d518 <copy_kargv>
c010d6e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d6e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d6e7:	74 13                	je     c010d6fc <do_execve+0xfd>
        unlock_mm(mm);
c010d6e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6ec:	89 04 24             	mov    %eax,(%esp)
c010d6ef:	e8 3f e7 ff ff       	call   c010be33 <unlock_mm>
        return ret;
c010d6f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6f7:	e9 3e 01 00 00       	jmp    c010d83a <do_execve+0x23b>
    }
    path = argv[0];
c010d6fc:	8b 45 10             	mov    0x10(%ebp),%eax
c010d6ff:	8b 00                	mov    (%eax),%eax
c010d701:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d704:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d707:	89 04 24             	mov    %eax,(%esp)
c010d70a:	e8 24 e7 ff ff       	call   c010be33 <unlock_mm>
    files_closeall(current->filesp);
c010d70f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d714:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d71a:	89 04 24             	mov    %eax,(%esp)
c010d71d:	e8 c9 d9 ff ff       	call   c010b0eb <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d722:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d729:	00 
c010d72a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d72d:	89 04 24             	mov    %eax,(%esp)
c010d730:	e8 c6 dd ff ff       	call   c010b4fb <sysfile_open>
c010d735:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d738:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d73b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d73e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d742:	79 05                	jns    c010d749 <do_execve+0x14a>
        goto execve_exit;
c010d744:	e9 ae 00 00 00       	jmp    c010d7f7 <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010d749:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d74d:	74 4a                	je     c010d799 <do_execve+0x19a>
        lcr3(boot_cr3);
c010d74f:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010d754:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d757:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d75a:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d75d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d760:	89 04 24             	mov    %eax,(%esp)
c010d763:	e8 7e e6 ff ff       	call   c010bde6 <mm_count_dec>
c010d768:	85 c0                	test   %eax,%eax
c010d76a:	75 21                	jne    c010d78d <do_execve+0x18e>
            exit_mmap(mm);
c010d76c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d76f:	89 04 24             	mov    %eax,(%esp)
c010d772:	e8 6c ad ff ff       	call   c01084e3 <exit_mmap>
            put_pgdir(mm);
c010d777:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d77a:	89 04 24             	mov    %eax,(%esp)
c010d77d:	e8 a7 ee ff ff       	call   c010c629 <put_pgdir>
            mm_destroy(mm);
c010d782:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d785:	89 04 24             	mov    %eax,(%esp)
c010d788:	e8 97 aa ff ff       	call   c0108224 <mm_destroy>
        }
        current->mm = NULL;
c010d78d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d792:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d799:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d7a0:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d7a6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d7aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d7b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d7b4:	89 04 24             	mov    %eax,(%esp)
c010d7b7:	e8 1a f5 ff ff       	call   c010ccd6 <load_icode>
c010d7bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d7bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d7c3:	74 02                	je     c010d7c7 <do_execve+0x1c8>
        goto execve_exit;
c010d7c5:	eb 30                	jmp    c010d7f7 <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010d7c7:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d7cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d7d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7d4:	89 04 24             	mov    %eax,(%esp)
c010d7d7:	e8 0f fd ff ff       	call   c010d4eb <put_kargv>
    set_proc_name(current, local_name);
c010d7dc:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d7e1:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d7e4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d7e8:	89 04 24             	mov    %eax,(%esp)
c010d7eb:	e8 31 e8 ff ff       	call   c010c021 <set_proc_name>
    return 0;
c010d7f0:	b8 00 00 00 00       	mov    $0x0,%eax
c010d7f5:	eb 43                	jmp    c010d83a <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010d7f7:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d7fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d801:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d804:	89 04 24             	mov    %eax,(%esp)
c010d807:	e8 df fc ff ff       	call   c010d4eb <put_kargv>
    do_exit(ret);
c010d80c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d80f:	89 04 24             	mov    %eax,(%esp)
c010d812:	e8 50 f2 ff ff       	call   c010ca67 <do_exit>
    panic("already exit: %e.\n", ret);
c010d817:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d81a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d81e:	c7 44 24 08 e9 80 11 	movl   $0xc01180e9,0x8(%esp)
c010d825:	c0 
c010d826:	c7 44 24 04 7b 03 00 	movl   $0x37b,0x4(%esp)
c010d82d:	00 
c010d82e:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d835:	e8 7a 36 ff ff       	call   c0100eb4 <__panic>
}
c010d83a:	c9                   	leave  
c010d83b:	c3                   	ret    

c010d83c <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010d83c:	55                   	push   %ebp
c010d83d:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010d83f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d844:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010d84b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d850:	5d                   	pop    %ebp
c010d851:	c3                   	ret    

c010d852 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010d852:	55                   	push   %ebp
c010d853:	89 e5                	mov    %esp,%ebp
c010d855:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010d858:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d85d:	8b 40 18             	mov    0x18(%eax),%eax
c010d860:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010d863:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d867:	74 30                	je     c010d899 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010d869:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d86c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010d873:	00 
c010d874:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010d87b:	00 
c010d87c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d880:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d883:	89 04 24             	mov    %eax,(%esp)
c010d886:	e8 ef b6 ff ff       	call   c0108f7a <user_mem_check>
c010d88b:	85 c0                	test   %eax,%eax
c010d88d:	75 0a                	jne    c010d899 <do_wait+0x47>
            return -E_INVAL;
c010d88f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d894:	e9 57 01 00 00       	jmp    c010d9f0 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010d899:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010d8a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d8a4:	74 39                	je     c010d8df <do_wait+0x8d>
        proc = find_proc(pid);
c010d8a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8a9:	89 04 24             	mov    %eax,(%esp)
c010d8ac:	e8 89 eb ff ff       	call   c010c43a <find_proc>
c010d8b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010d8b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d8b8:	74 5a                	je     c010d914 <do_wait+0xc2>
c010d8ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8bd:	8b 50 14             	mov    0x14(%eax),%edx
c010d8c0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d8c5:	39 c2                	cmp    %eax,%edx
c010d8c7:	75 4b                	jne    c010d914 <do_wait+0xc2>
            haskid = 1;
c010d8c9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d8d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8d3:	8b 00                	mov    (%eax),%eax
c010d8d5:	83 f8 03             	cmp    $0x3,%eax
c010d8d8:	75 3a                	jne    c010d914 <do_wait+0xc2>
                goto found;
c010d8da:	e9 89 00 00 00       	jmp    c010d968 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010d8df:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d8e4:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d8ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010d8ed:	eb 1f                	jmp    c010d90e <do_wait+0xbc>
            haskid = 1;
c010d8ef:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d8f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8f9:	8b 00                	mov    (%eax),%eax
c010d8fb:	83 f8 03             	cmp    $0x3,%eax
c010d8fe:	75 02                	jne    c010d902 <do_wait+0xb0>
                goto found;
c010d900:	eb 66                	jmp    c010d968 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010d902:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d905:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d90b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d90e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d912:	75 db                	jne    c010d8ef <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010d914:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d918:	74 44                	je     c010d95e <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010d91a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d91f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010d925:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d92a:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010d931:	00 00 80 
        schedule();
c010d934:	e8 fa 0b 00 00       	call   c010e533 <schedule>
        if (current->flags & PF_EXITING) {
c010d939:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d93e:	8b 40 44             	mov    0x44(%eax),%eax
c010d941:	83 e0 01             	and    $0x1,%eax
c010d944:	85 c0                	test   %eax,%eax
c010d946:	74 11                	je     c010d959 <do_wait+0x107>
            do_exit(-E_KILLED);
c010d948:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010d94f:	e8 13 f1 ff ff       	call   c010ca67 <do_exit>
        }
        goto repeat;
c010d954:	e9 40 ff ff ff       	jmp    c010d899 <do_wait+0x47>
c010d959:	e9 3b ff ff ff       	jmp    c010d899 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010d95e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010d963:	e9 88 00 00 00       	jmp    c010d9f0 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010d968:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d96d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d970:	74 0a                	je     c010d97c <do_wait+0x12a>
c010d972:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010d977:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d97a:	75 1c                	jne    c010d998 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010d97c:	c7 44 24 08 fc 80 11 	movl   $0xc01180fc,0x8(%esp)
c010d983:	c0 
c010d984:	c7 44 24 04 b4 03 00 	movl   $0x3b4,0x4(%esp)
c010d98b:	00 
c010d98c:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010d993:	e8 1c 35 ff ff       	call   c0100eb4 <__panic>
    }
    if (code_store != NULL) {
c010d998:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d99c:	74 0e                	je     c010d9ac <do_wait+0x15a>
        *code_store = proc->exit_code;
c010d99e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9a1:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010d9a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9aa:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010d9ac:	e8 d1 e2 ff ff       	call   c010bc82 <__intr_save>
c010d9b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010d9b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9b7:	89 04 24             	mov    %eax,(%esp)
c010d9ba:	e8 46 ea ff ff       	call   c010c405 <unhash_proc>
        remove_links(proc);
c010d9bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9c2:	89 04 24             	mov    %eax,(%esp)
c010d9c5:	e8 96 e7 ff ff       	call   c010c160 <remove_links>
    }
    local_intr_restore(intr_flag);
c010d9ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9cd:	89 04 24             	mov    %eax,(%esp)
c010d9d0:	e8 d7 e2 ff ff       	call   c010bcac <__intr_restore>
    put_kstack(proc);
c010d9d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9d8:	89 04 24             	mov    %eax,(%esp)
c010d9db:	e8 7c eb ff ff       	call   c010c55c <put_kstack>
    kfree(proc);
c010d9e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9e3:	89 04 24             	mov    %eax,(%esp)
c010d9e6:	e8 dc 72 ff ff       	call   c0104cc7 <kfree>
    return 0;
c010d9eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d9f0:	c9                   	leave  
c010d9f1:	c3                   	ret    

c010d9f2 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010d9f2:	55                   	push   %ebp
c010d9f3:	89 e5                	mov    %esp,%ebp
c010d9f5:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010d9f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9fb:	89 04 24             	mov    %eax,(%esp)
c010d9fe:	e8 37 ea ff ff       	call   c010c43a <find_proc>
c010da03:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da0a:	74 44                	je     c010da50 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010da0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da0f:	8b 40 44             	mov    0x44(%eax),%eax
c010da12:	83 e0 01             	and    $0x1,%eax
c010da15:	85 c0                	test   %eax,%eax
c010da17:	75 30                	jne    c010da49 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010da19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da1c:	8b 40 44             	mov    0x44(%eax),%eax
c010da1f:	83 c8 01             	or     $0x1,%eax
c010da22:	89 c2                	mov    %eax,%edx
c010da24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da27:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010da2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da2d:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010da33:	85 c0                	test   %eax,%eax
c010da35:	79 0b                	jns    c010da42 <do_kill+0x50>
                wakeup_proc(proc);
c010da37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da3a:	89 04 24             	mov    %eax,(%esp)
c010da3d:	e8 55 0a 00 00       	call   c010e497 <wakeup_proc>
            }
            return 0;
c010da42:	b8 00 00 00 00       	mov    $0x0,%eax
c010da47:	eb 0c                	jmp    c010da55 <do_kill+0x63>
        }
        return -E_KILLED;
c010da49:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010da4e:	eb 05                	jmp    c010da55 <do_kill+0x63>
    }
    return -E_INVAL;
c010da50:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010da55:	c9                   	leave  
c010da56:	c3                   	ret    

c010da57 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010da57:	55                   	push   %ebp
c010da58:	89 e5                	mov    %esp,%ebp
c010da5a:	53                   	push   %ebx
c010da5b:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010da5e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010da65:	eb 04                	jmp    c010da6b <kernel_execve+0x14>
        argc ++;
c010da67:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010da6b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010da6e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010da75:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da78:	01 d0                	add    %edx,%eax
c010da7a:	8b 00                	mov    (%eax),%eax
c010da7c:	85 c0                	test   %eax,%eax
c010da7e:	75 e7                	jne    c010da67 <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010da80:	b8 04 00 00 00       	mov    $0x4,%eax
c010da85:	8b 55 08             	mov    0x8(%ebp),%edx
c010da88:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010da8b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010da8e:	cd 80                	int    $0x80
c010da90:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010da93:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010da96:	83 c4 10             	add    $0x10,%esp
c010da99:	5b                   	pop    %ebx
c010da9a:	5d                   	pop    %ebp
c010da9b:	c3                   	ret    

c010da9c <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010da9c:	55                   	push   %ebp
c010da9d:	89 e5                	mov    %esp,%ebp
c010da9f:	83 ec 28             	sub    $0x28,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c010daa2:	c7 45 f0 18 81 11 c0 	movl   $0xc0118118,-0x10(%ebp)
c010daa9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dab0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010dab5:	8b 40 04             	mov    0x4(%eax),%eax
c010dab8:	c7 44 24 08 18 81 11 	movl   $0xc0118118,0x8(%esp)
c010dabf:	c0 
c010dac0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dac4:	c7 04 24 1c 81 11 c0 	movl   $0xc011811c,(%esp)
c010dacb:	e8 95 28 ff ff       	call   c0100365 <cprintf>
c010dad0:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010dad3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dad7:	c7 04 24 18 81 11 c0 	movl   $0xc0118118,(%esp)
c010dade:	e8 74 ff ff ff       	call   c010da57 <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010dae3:	c7 44 24 08 43 81 11 	movl   $0xc0118143,0x8(%esp)
c010daea:	c0 
c010daeb:	c7 44 24 04 ff 03 00 	movl   $0x3ff,0x4(%esp)
c010daf2:	00 
c010daf3:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010dafa:	e8 b5 33 ff ff       	call   c0100eb4 <__panic>

c010daff <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010daff:	55                   	push   %ebp
c010db00:	89 e5                	mov    %esp,%ebp
c010db02:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010db05:	c7 04 24 5d 81 11 c0 	movl   $0xc011815d,(%esp)
c010db0c:	e8 27 18 00 00       	call   c010f338 <vfs_set_bootfs>
c010db11:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010db14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010db18:	74 23                	je     c010db3d <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010db1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db1d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010db21:	c7 44 24 08 64 81 11 	movl   $0xc0118164,0x8(%esp)
c010db28:	c0 
c010db29:	c7 44 24 04 07 04 00 	movl   $0x407,0x4(%esp)
c010db30:	00 
c010db31:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010db38:	e8 77 33 ff ff       	call   c0100eb4 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010db3d:	e8 7c 76 ff ff       	call   c01051be <nr_free_pages>
c010db42:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010db45:	e8 45 70 ff ff       	call   c0104b8f <kallocated>
c010db4a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010db4d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010db54:	00 
c010db55:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010db5c:	00 
c010db5d:	c7 04 24 9c da 10 c0 	movl   $0xc010da9c,(%esp)
c010db64:	e8 45 e9 ff ff       	call   c010c4ae <kernel_thread>
c010db69:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010db6c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010db70:	7f 1c                	jg     c010db8e <init_main+0x8f>
        panic("create user_main failed.\n");
c010db72:	c7 44 24 08 7d 81 11 	movl   $0xc011817d,0x8(%esp)
c010db79:	c0 
c010db7a:	c7 44 24 04 0f 04 00 	movl   $0x40f,0x4(%esp)
c010db81:	00 
c010db82:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010db89:	e8 26 33 ff ff       	call   c0100eb4 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010db8e:	e8 cb ba ff ff       	call   c010965e <check_sync>

    while (do_wait(0, NULL) == 0) {
c010db93:	eb 05                	jmp    c010db9a <init_main+0x9b>
        schedule();
c010db95:	e8 99 09 00 00       	call   c010e533 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010db9a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dba1:	00 
c010dba2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dba9:	e8 a4 fc ff ff       	call   c010d852 <do_wait>
c010dbae:	85 c0                	test   %eax,%eax
c010dbb0:	74 e3                	je     c010db95 <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010dbb2:	e8 d0 d3 ff ff       	call   c010af87 <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010dbb7:	c7 04 24 98 81 11 c0 	movl   $0xc0118198,(%esp)
c010dbbe:	e8 a2 27 ff ff       	call   c0100365 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010dbc3:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dbc8:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dbce:	85 c0                	test   %eax,%eax
c010dbd0:	75 1e                	jne    c010dbf0 <init_main+0xf1>
c010dbd2:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dbd7:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010dbdd:	85 c0                	test   %eax,%eax
c010dbdf:	75 0f                	jne    c010dbf0 <init_main+0xf1>
c010dbe1:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dbe6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dbec:	85 c0                	test   %eax,%eax
c010dbee:	74 24                	je     c010dc14 <init_main+0x115>
c010dbf0:	c7 44 24 0c bc 81 11 	movl   $0xc01181bc,0xc(%esp)
c010dbf7:	c0 
c010dbf8:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010dbff:	c0 
c010dc00:	c7 44 24 04 1b 04 00 	movl   $0x41b,0x4(%esp)
c010dc07:	00 
c010dc08:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010dc0f:	e8 a0 32 ff ff       	call   c0100eb4 <__panic>
    assert(nr_process == 2);
c010dc14:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010dc19:	83 f8 02             	cmp    $0x2,%eax
c010dc1c:	74 24                	je     c010dc42 <init_main+0x143>
c010dc1e:	c7 44 24 0c 07 82 11 	movl   $0xc0118207,0xc(%esp)
c010dc25:	c0 
c010dc26:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010dc2d:	c0 
c010dc2e:	c7 44 24 04 1c 04 00 	movl   $0x41c,0x4(%esp)
c010dc35:	00 
c010dc36:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010dc3d:	e8 72 32 ff ff       	call   c0100eb4 <__panic>
c010dc42:	c7 45 e4 fc 31 15 c0 	movl   $0xc01531fc,-0x1c(%ebp)
c010dc49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dc4c:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010dc4f:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010dc55:	83 c2 7c             	add    $0x7c,%edx
c010dc58:	39 d0                	cmp    %edx,%eax
c010dc5a:	74 24                	je     c010dc80 <init_main+0x181>
c010dc5c:	c7 44 24 0c 18 82 11 	movl   $0xc0118218,0xc(%esp)
c010dc63:	c0 
c010dc64:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010dc6b:	c0 
c010dc6c:	c7 44 24 04 1d 04 00 	movl   $0x41d,0x4(%esp)
c010dc73:	00 
c010dc74:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010dc7b:	e8 34 32 ff ff       	call   c0100eb4 <__panic>
c010dc80:	c7 45 e0 fc 31 15 c0 	movl   $0xc01531fc,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010dc87:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dc8a:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010dc8c:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010dc92:	83 c2 7c             	add    $0x7c,%edx
c010dc95:	39 d0                	cmp    %edx,%eax
c010dc97:	74 24                	je     c010dcbd <init_main+0x1be>
c010dc99:	c7 44 24 0c 48 82 11 	movl   $0xc0118248,0xc(%esp)
c010dca0:	c0 
c010dca1:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010dca8:	c0 
c010dca9:	c7 44 24 04 1e 04 00 	movl   $0x41e,0x4(%esp)
c010dcb0:	00 
c010dcb1:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010dcb8:	e8 f7 31 ff ff       	call   c0100eb4 <__panic>

    cprintf("init check memory pass.\n");
c010dcbd:	c7 04 24 78 82 11 c0 	movl   $0xc0118278,(%esp)
c010dcc4:	e8 9c 26 ff ff       	call   c0100365 <cprintf>
    return 0;
c010dcc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dcce:	c9                   	leave  
c010dccf:	c3                   	ret    

c010dcd0 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010dcd0:	55                   	push   %ebp
c010dcd1:	89 e5                	mov    %esp,%ebp
c010dcd3:	53                   	push   %ebx
c010dcd4:	83 ec 24             	sub    $0x24,%esp
c010dcd7:	c7 45 ec fc 31 15 c0 	movl   $0xc01531fc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010dcde:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dce1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010dce4:	89 50 04             	mov    %edx,0x4(%eax)
c010dce7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dcea:	8b 50 04             	mov    0x4(%eax),%edx
c010dced:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dcf0:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010dcf2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dcf9:	eb 26                	jmp    c010dd21 <proc_init+0x51>
        list_init(hash_list + i);
c010dcfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcfe:	c1 e0 03             	shl    $0x3,%eax
c010dd01:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010dd06:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dd09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd0c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010dd0f:	89 50 04             	mov    %edx,0x4(%eax)
c010dd12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd15:	8b 50 04             	mov    0x4(%eax),%edx
c010dd18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd1b:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010dd1d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010dd21:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010dd28:	7e d1                	jle    c010dcfb <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010dd2a:	e8 5e e1 ff ff       	call   c010be8d <alloc_proc>
c010dd2f:	a3 20 ff 14 c0       	mov    %eax,0xc014ff20
c010dd34:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd39:	85 c0                	test   %eax,%eax
c010dd3b:	75 1c                	jne    c010dd59 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010dd3d:	c7 44 24 08 91 82 11 	movl   $0xc0118291,0x8(%esp)
c010dd44:	c0 
c010dd45:	c7 44 24 04 30 04 00 	movl   $0x430,0x4(%esp)
c010dd4c:	00 
c010dd4d:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010dd54:	e8 5b 31 ff ff       	call   c0100eb4 <__panic>
    }

    idleproc->pid = 0;
c010dd59:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd5e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010dd65:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd6a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010dd70:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd75:	ba 00 c0 14 c0       	mov    $0xc014c000,%edx
c010dd7a:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010dd7d:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd82:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010dd89:	8b 1d 20 ff 14 c0    	mov    0xc014ff20,%ebx
c010dd8f:	e8 2c d2 ff ff       	call   c010afc0 <files_create>
c010dd94:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010dd9a:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010dda0:	85 c0                	test   %eax,%eax
c010dda2:	75 1c                	jne    c010ddc0 <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010dda4:	c7 44 24 08 ac 82 11 	movl   $0xc01182ac,0x8(%esp)
c010ddab:	c0 
c010ddac:	c7 44 24 04 39 04 00 	movl   $0x439,0x4(%esp)
c010ddb3:	00 
c010ddb4:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010ddbb:	e8 f4 30 ff ff       	call   c0100eb4 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010ddc0:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ddc5:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ddcb:	89 04 24             	mov    %eax,(%esp)
c010ddce:	e8 86 e0 ff ff       	call   c010be59 <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010ddd3:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ddd8:	c7 44 24 04 ce 82 11 	movl   $0xc01182ce,0x4(%esp)
c010dddf:	c0 
c010dde0:	89 04 24             	mov    %eax,(%esp)
c010dde3:	e8 39 e2 ff ff       	call   c010c021 <set_proc_name>
    nr_process ++;
c010dde8:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010dded:	83 c0 01             	add    $0x1,%eax
c010ddf0:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40

    current = idleproc;
c010ddf5:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ddfa:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28

    int pid = kernel_thread(init_main, NULL, 0);
c010ddff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010de06:	00 
c010de07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010de0e:	00 
c010de0f:	c7 04 24 ff da 10 c0 	movl   $0xc010daff,(%esp)
c010de16:	e8 93 e6 ff ff       	call   c010c4ae <kernel_thread>
c010de1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010de1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010de22:	7f 1c                	jg     c010de40 <proc_init+0x170>
        panic("create init_main failed.\n");
c010de24:	c7 44 24 08 d3 82 11 	movl   $0xc01182d3,0x8(%esp)
c010de2b:	c0 
c010de2c:	c7 44 24 04 44 04 00 	movl   $0x444,0x4(%esp)
c010de33:	00 
c010de34:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010de3b:	e8 74 30 ff ff       	call   c0100eb4 <__panic>
    }

    initproc = find_proc(pid);
c010de40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de43:	89 04 24             	mov    %eax,(%esp)
c010de46:	e8 ef e5 ff ff       	call   c010c43a <find_proc>
c010de4b:	a3 24 ff 14 c0       	mov    %eax,0xc014ff24
    set_proc_name(initproc, "init");
c010de50:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010de55:	c7 44 24 04 ed 82 11 	movl   $0xc01182ed,0x4(%esp)
c010de5c:	c0 
c010de5d:	89 04 24             	mov    %eax,(%esp)
c010de60:	e8 bc e1 ff ff       	call   c010c021 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010de65:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de6a:	85 c0                	test   %eax,%eax
c010de6c:	74 0c                	je     c010de7a <proc_init+0x1aa>
c010de6e:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de73:	8b 40 04             	mov    0x4(%eax),%eax
c010de76:	85 c0                	test   %eax,%eax
c010de78:	74 24                	je     c010de9e <proc_init+0x1ce>
c010de7a:	c7 44 24 0c f4 82 11 	movl   $0xc01182f4,0xc(%esp)
c010de81:	c0 
c010de82:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010de89:	c0 
c010de8a:	c7 44 24 04 4a 04 00 	movl   $0x44a,0x4(%esp)
c010de91:	00 
c010de92:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010de99:	e8 16 30 ff ff       	call   c0100eb4 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010de9e:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dea3:	85 c0                	test   %eax,%eax
c010dea5:	74 0d                	je     c010deb4 <proc_init+0x1e4>
c010dea7:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010deac:	8b 40 04             	mov    0x4(%eax),%eax
c010deaf:	83 f8 01             	cmp    $0x1,%eax
c010deb2:	74 24                	je     c010ded8 <proc_init+0x208>
c010deb4:	c7 44 24 0c 1c 83 11 	movl   $0xc011831c,0xc(%esp)
c010debb:	c0 
c010debc:	c7 44 24 08 d3 7e 11 	movl   $0xc0117ed3,0x8(%esp)
c010dec3:	c0 
c010dec4:	c7 44 24 04 4b 04 00 	movl   $0x44b,0x4(%esp)
c010decb:	00 
c010decc:	c7 04 24 ac 7e 11 c0 	movl   $0xc0117eac,(%esp)
c010ded3:	e8 dc 2f ff ff       	call   c0100eb4 <__panic>
}
c010ded8:	83 c4 24             	add    $0x24,%esp
c010dedb:	5b                   	pop    %ebx
c010dedc:	5d                   	pop    %ebp
c010dedd:	c3                   	ret    

c010dede <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010dede:	55                   	push   %ebp
c010dedf:	89 e5                	mov    %esp,%ebp
c010dee1:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010dee4:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010dee9:	8b 40 10             	mov    0x10(%eax),%eax
c010deec:	85 c0                	test   %eax,%eax
c010deee:	74 07                	je     c010def7 <cpu_idle+0x19>
            schedule();
c010def0:	e8 3e 06 00 00       	call   c010e533 <schedule>
        }
    }
c010def5:	eb ed                	jmp    c010dee4 <cpu_idle+0x6>
c010def7:	eb eb                	jmp    c010dee4 <cpu_idle+0x6>

c010def9 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010def9:	55                   	push   %ebp
c010defa:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010defc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010df00:	75 11                	jne    c010df13 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010df02:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df07:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010df0e:	00 00 00 
c010df11:	eb 0e                	jmp    c010df21 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010df13:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df18:	8b 55 08             	mov    0x8(%ebp),%edx
c010df1b:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010df21:	5d                   	pop    %ebp
c010df22:	c3                   	ret    

c010df23 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010df23:	55                   	push   %ebp
c010df24:	89 e5                	mov    %esp,%ebp
c010df26:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010df29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010df2d:	75 07                	jne    c010df36 <do_sleep+0x13>
        return 0;
c010df2f:	b8 00 00 00 00       	mov    $0x0,%eax
c010df34:	eb 6b                	jmp    c010dfa1 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010df36:	e8 47 dd ff ff       	call   c010bc82 <__intr_save>
c010df3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010df3e:	8b 55 08             	mov    0x8(%ebp),%edx
c010df41:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df46:	89 54 24 08          	mov    %edx,0x8(%esp)
c010df4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010df4e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010df51:	89 04 24             	mov    %eax,(%esp)
c010df54:	e8 f0 dc ff ff       	call   c010bc49 <timer_init>
c010df59:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010df5c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df61:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010df67:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df6c:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010df73:	00 00 80 
    add_timer(timer);
c010df76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df79:	89 04 24             	mov    %eax,(%esp)
c010df7c:	e8 3d 06 00 00       	call   c010e5be <add_timer>
    local_intr_restore(intr_flag);
c010df81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df84:	89 04 24             	mov    %eax,(%esp)
c010df87:	e8 20 dd ff ff       	call   c010bcac <__intr_restore>

    schedule();
c010df8c:	e8 a2 05 00 00       	call   c010e533 <schedule>

    del_timer(timer);
c010df91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df94:	89 04 24             	mov    %eax,(%esp)
c010df97:	e8 60 07 00 00       	call   c010e6fc <del_timer>
    return 0;
c010df9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dfa1:	c9                   	leave  
c010dfa2:	c3                   	ret    

c010dfa3 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010dfa3:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010dfa7:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010dfa9:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010dfac:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010dfaf:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010dfb2:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010dfb5:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010dfb8:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010dfbb:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010dfbe:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010dfc2:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010dfc5:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010dfc8:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010dfcb:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010dfce:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010dfd1:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010dfd4:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010dfd7:	ff 30                	pushl  (%eax)

    ret
c010dfd9:	c3                   	ret    

c010dfda <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010dfda:	55                   	push   %ebp
c010dfdb:	89 e5                	mov    %esp,%ebp
c010dfdd:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010dfe0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010dfe4:	75 08                	jne    c010dfee <skew_heap_merge+0x14>
c010dfe6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dfe9:	e9 bd 00 00 00       	jmp    c010e0ab <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010dfee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010dff2:	75 08                	jne    c010dffc <skew_heap_merge+0x22>
c010dff4:	8b 45 08             	mov    0x8(%ebp),%eax
c010dff7:	e9 af 00 00 00       	jmp    c010e0ab <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010dffc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dfff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e003:	8b 45 08             	mov    0x8(%ebp),%eax
c010e006:	89 04 24             	mov    %eax,(%esp)
c010e009:	8b 45 10             	mov    0x10(%ebp),%eax
c010e00c:	ff d0                	call   *%eax
c010e00e:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e011:	75 4d                	jne    c010e060 <skew_heap_merge+0x86>
     {
          r = a->left;
c010e013:	8b 45 08             	mov    0x8(%ebp),%eax
c010e016:	8b 40 04             	mov    0x4(%eax),%eax
c010e019:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e01c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e01f:	8b 40 08             	mov    0x8(%eax),%eax
c010e022:	8b 55 10             	mov    0x10(%ebp),%edx
c010e025:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e029:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e02c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e030:	89 04 24             	mov    %eax,(%esp)
c010e033:	e8 a2 ff ff ff       	call   c010dfda <skew_heap_merge>
c010e038:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e03b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e03e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e041:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e044:	8b 45 08             	mov    0x8(%ebp),%eax
c010e047:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e04a:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e04d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e051:	74 08                	je     c010e05b <skew_heap_merge+0x81>
c010e053:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e056:	8b 55 08             	mov    0x8(%ebp),%edx
c010e059:	89 10                	mov    %edx,(%eax)

          return a;
c010e05b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e05e:	eb 4b                	jmp    c010e0ab <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e060:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e063:	8b 40 04             	mov    0x4(%eax),%eax
c010e066:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e069:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e06c:	8b 40 08             	mov    0x8(%eax),%eax
c010e06f:	8b 55 10             	mov    0x10(%ebp),%edx
c010e072:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e076:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e07a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e07d:	89 04 24             	mov    %eax,(%esp)
c010e080:	e8 55 ff ff ff       	call   c010dfda <skew_heap_merge>
c010e085:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e088:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e08b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e08e:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e091:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e094:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e097:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e09a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e09e:	74 08                	je     c010e0a8 <skew_heap_merge+0xce>
c010e0a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e0a3:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e0a6:	89 10                	mov    %edx,(%eax)

          return b;
c010e0a8:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e0ab:	c9                   	leave  
c010e0ac:	c3                   	ret    

c010e0ad <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e0ad:	55                   	push   %ebp
c010e0ae:	89 e5                	mov    %esp,%ebp
c010e0b0:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e0b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0b6:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e0bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e0be:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0c1:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e0c6:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e0c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e0cc:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e0d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e0d5:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e0db:	29 c2                	sub    %eax,%edx
c010e0dd:	89 d0                	mov    %edx,%eax
c010e0df:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e0e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e0e6:	7e 07                	jle    c010e0ef <proc_stride_comp_f+0x42>
c010e0e8:	b8 01 00 00 00       	mov    $0x1,%eax
c010e0ed:	eb 12                	jmp    c010e101 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010e0ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e0f3:	75 07                	jne    c010e0fc <proc_stride_comp_f+0x4f>
c010e0f5:	b8 00 00 00 00       	mov    $0x0,%eax
c010e0fa:	eb 05                	jmp    c010e101 <proc_stride_comp_f+0x54>
     else return -1;
c010e0fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e101:	c9                   	leave  
c010e102:	c3                   	ret    

c010e103 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e103:	55                   	push   %ebp
c010e104:	89 e5                	mov    %esp,%ebp
c010e106:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE 
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
     list_init(&(rq->run_list)); //初始化调度器类
c010e109:	8b 45 08             	mov    0x8(%ebp),%eax
c010e10c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e10f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e112:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e115:	89 50 04             	mov    %edx,0x4(%eax)
c010e118:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e11b:	8b 50 04             	mov    0x4(%eax),%edx
c010e11e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e121:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL; //初始化当前进程运行队列为空
c010e123:	8b 45 08             	mov    0x8(%ebp),%eax
c010e126:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0; //设置运行队列为空
c010e12d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e130:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e137:	c9                   	leave  
c010e138:	c3                   	ret    

c010e139 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e139:	55                   	push   %ebp
c010e13a:	89 e5                	mov    %esp,%ebp
c010e13c:	83 ec 28             	sub    $0x28,%esp
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
    //在使用优先队列的实现中表示当前优先队列的头元素
    //比较队头元素与当前进程的步数大小，选择步数最小的运行 
     rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e13f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e142:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e148:	8b 45 08             	mov    0x8(%ebp),%eax
c010e14b:	8b 40 10             	mov    0x10(%eax),%eax
c010e14e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e151:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e154:	c7 45 ec ad e0 10 c0 	movl   $0xc010e0ad,-0x14(%ebp)
c010e15b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e15e:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010e161:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e164:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e16a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e16d:	8b 10                	mov    (%eax),%edx
c010e16f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e172:	89 50 08             	mov    %edx,0x8(%eax)
c010e175:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e178:	8b 50 08             	mov    0x8(%eax),%edx
c010e17b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e17e:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e181:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e184:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e188:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e18b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e18f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e192:	89 04 24             	mov    %eax,(%esp)
c010e195:	e8 40 fe ff ff       	call   c010dfda <skew_heap_merge>
c010e19a:	89 c2                	mov    %eax,%edx
c010e19c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e19f:	89 50 10             	mov    %edx,0x10(%eax)
#else
     assert(list_empty(&(proc->run_link)));
     //将 proc插入放入运行队列中去  
     list_add_before(&(rq->run_list), &(proc->run_link));  
#endif  
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010e1a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1a5:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e1ab:	85 c0                	test   %eax,%eax
c010e1ad:	74 13                	je     c010e1c2 <stride_enqueue+0x89>
c010e1af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1b2:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e1b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1bb:	8b 40 0c             	mov    0xc(%eax),%eax
c010e1be:	39 c2                	cmp    %eax,%edx
c010e1c0:	7e 0f                	jle    c010e1d1 <stride_enqueue+0x98>
        //初始化时间片  
        proc->time_slice = rq->max_time_slice;  
c010e1c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1c5:	8b 50 0c             	mov    0xc(%eax),%edx
c010e1c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1cb:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }  
     proc->rq = rq;  
c010e1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1d4:	8b 55 08             	mov    0x8(%ebp),%edx
c010e1d7:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;//初始化时间片 
c010e1dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1e0:	8b 40 08             	mov    0x8(%eax),%eax
c010e1e3:	8d 50 01             	lea    0x1(%eax),%edx
c010e1e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1e9:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e1ec:	c9                   	leave  
c010e1ed:	c3                   	ret    

c010e1ee <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e1ee:	55                   	push   %ebp
c010e1ef:	89 e5                	mov    %esp,%ebp
c010e1f1:	83 ec 38             	sub    $0x38,%esp
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
    // 在斜堆中删除相应元素  
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);  
c010e1f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1f7:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e1fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e200:	8b 40 10             	mov    0x10(%eax),%eax
c010e203:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e206:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e209:	c7 45 ec ad e0 10 c0 	movl   $0xc010e0ad,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010e210:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e213:	8b 00                	mov    (%eax),%eax
c010e215:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010e218:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e21b:	8b 50 08             	mov    0x8(%eax),%edx
c010e21e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e221:	8b 40 04             	mov    0x4(%eax),%eax
c010e224:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e227:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e22b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e22f:	89 04 24             	mov    %eax,(%esp)
c010e232:	e8 a3 fd ff ff       	call   c010dfda <skew_heap_merge>
c010e237:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010e23a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e23e:	74 08                	je     c010e248 <stride_dequeue+0x5a>
c010e240:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e243:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e246:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010e248:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e24c:	74 24                	je     c010e272 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010e24e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e251:	8b 40 04             	mov    0x4(%eax),%eax
c010e254:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e257:	75 0b                	jne    c010e264 <stride_dequeue+0x76>
               p->left = rep;
c010e259:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e25c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e25f:	89 50 04             	mov    %edx,0x4(%eax)
c010e262:	eb 09                	jmp    c010e26d <stride_dequeue+0x7f>
          else p->right = rep;
c010e264:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e267:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e26a:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010e26d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e270:	eb 03                	jmp    c010e275 <stride_dequeue+0x87>
     }
     else return rep;
c010e272:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e275:	89 c2                	mov    %eax,%edx
c010e277:	8b 45 08             	mov    0x8(%ebp),%eax
c010e27a:	89 50 10             	mov    %edx,0x10(%eax)
#else  
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq); 
    // 在斜堆中删除相应元素 
    list_del_init(&(proc->run_link));  
#endif  
     rq->proc_num --;  
c010e27d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e280:	8b 40 08             	mov    0x8(%eax),%eax
c010e283:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e286:	8b 45 08             	mov    0x8(%ebp),%eax
c010e289:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e28c:	c9                   	leave  
c010e28d:	c3                   	ret    

c010e28e <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010e28e:	55                   	push   %ebp
c010e28f:	89 e5                	mov    %esp,%ebp
c010e291:	53                   	push   %ebx
c010e292:	83 ec 10             	sub    $0x10,%esp
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010e295:	8b 45 08             	mov    0x8(%ebp),%eax
c010e298:	8b 40 10             	mov    0x10(%eax),%eax
c010e29b:	85 c0                	test   %eax,%eax
c010e29d:	75 07                	jne    c010e2a6 <stride_pick_next+0x18>
c010e29f:	b8 00 00 00 00       	mov    $0x0,%eax
c010e2a4:	eb 62                	jmp    c010e308 <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010e2a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2a9:	8b 40 10             	mov    0x10(%eax),%eax
c010e2ac:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e2b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
               p = q;
          le = list_next(le);
     }
#endif
    //更新对应进程的stride值
     if (p->lab6_priority == 0)//优先级设置  
c010e2b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2b7:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e2bd:	85 c0                	test   %eax,%eax
c010e2bf:	75 1a                	jne    c010e2db <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;//步长为0则设置为最大步长保持相减的有效性  
c010e2c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2c4:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e2ca:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010e2d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2d3:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010e2d9:	eb 2a                	jmp    c010e305 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;//步长设置为优先级的倒数  
c010e2db:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2de:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010e2e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2e7:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010e2ed:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e2f2:	ba 00 00 00 00       	mov    $0x0,%edx
c010e2f7:	f7 f3                	div    %ebx
c010e2f9:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010e2fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2ff:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010e305:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010e308:	83 c4 10             	add    $0x10,%esp
c010e30b:	5b                   	pop    %ebx
c010e30c:	5d                   	pop    %ebp
c010e30d:	c3                   	ret    

c010e30e <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e30e:	55                   	push   %ebp
c010e30f:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
    if (proc->time_slice > 0) {  //到达时间片
c010e311:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e314:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e31a:	85 c0                	test   %eax,%eax
c010e31c:	7e 15                	jle    c010e333 <stride_proc_tick+0x25>
        proc->time_slice --; //执行进程的时间片time_slice减一
c010e31e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e321:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e327:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e32a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e32d:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }  
    if (proc->time_slice == 0) { //时间片为0
c010e333:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e336:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e33c:	85 c0                	test   %eax,%eax
c010e33e:	75 0a                	jne    c010e34a <stride_proc_tick+0x3c>
     //设置此进程成员变量need_resched标识为1,进程需要调度
        proc->need_resched = 1; 
c010e340:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e343:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }  
}
c010e34a:	5d                   	pop    %ebp
c010e34b:	c3                   	ret    

c010e34c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e34c:	55                   	push   %ebp
c010e34d:	89 e5                	mov    %esp,%ebp
c010e34f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e352:	9c                   	pushf  
c010e353:	58                   	pop    %eax
c010e354:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e357:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e35a:	25 00 02 00 00       	and    $0x200,%eax
c010e35f:	85 c0                	test   %eax,%eax
c010e361:	74 0c                	je     c010e36f <__intr_save+0x23>
        intr_disable();
c010e363:	e8 ae 3d ff ff       	call   c0102116 <intr_disable>
        return 1;
c010e368:	b8 01 00 00 00       	mov    $0x1,%eax
c010e36d:	eb 05                	jmp    c010e374 <__intr_save+0x28>
    }
    return 0;
c010e36f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e374:	c9                   	leave  
c010e375:	c3                   	ret    

c010e376 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e376:	55                   	push   %ebp
c010e377:	89 e5                	mov    %esp,%ebp
c010e379:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e37c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e380:	74 05                	je     c010e387 <__intr_restore+0x11>
        intr_enable();
c010e382:	e8 89 3d ff ff       	call   c0102110 <intr_enable>
    }
}
c010e387:	c9                   	leave  
c010e388:	c3                   	ret    

c010e389 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e389:	55                   	push   %ebp
c010e38a:	89 e5                	mov    %esp,%ebp
c010e38c:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e38f:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e394:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e397:	74 1a                	je     c010e3b3 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010e399:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e39e:	8b 40 08             	mov    0x8(%eax),%eax
c010e3a1:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e3a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e3aa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e3ae:	89 14 24             	mov    %edx,(%esp)
c010e3b1:	ff d0                	call   *%eax
    }
}
c010e3b3:	c9                   	leave  
c010e3b4:	c3                   	ret    

c010e3b5 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e3b5:	55                   	push   %ebp
c010e3b6:	89 e5                	mov    %esp,%ebp
c010e3b8:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e3bb:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e3c0:	8b 40 0c             	mov    0xc(%eax),%eax
c010e3c3:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e3c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e3cc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e3d0:	89 14 24             	mov    %edx,(%esp)
c010e3d3:	ff d0                	call   *%eax
}
c010e3d5:	c9                   	leave  
c010e3d6:	c3                   	ret    

c010e3d7 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e3d7:	55                   	push   %ebp
c010e3d8:	89 e5                	mov    %esp,%ebp
c010e3da:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e3dd:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e3e2:	8b 40 10             	mov    0x10(%eax),%eax
c010e3e5:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e3eb:	89 14 24             	mov    %edx,(%esp)
c010e3ee:	ff d0                	call   *%eax
}
c010e3f0:	c9                   	leave  
c010e3f1:	c3                   	ret    

c010e3f2 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010e3f2:	55                   	push   %ebp
c010e3f3:	89 e5                	mov    %esp,%ebp
c010e3f5:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e3f8:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e3fd:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e400:	74 1c                	je     c010e41e <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010e402:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e407:	8b 40 14             	mov    0x14(%eax),%eax
c010e40a:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e410:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e413:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e417:	89 14 24             	mov    %edx,(%esp)
c010e41a:	ff d0                	call   *%eax
c010e41c:	eb 0a                	jmp    c010e428 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e41e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e421:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e428:	c9                   	leave  
c010e429:	c3                   	ret    

c010e42a <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e42a:	55                   	push   %ebp
c010e42b:	89 e5                	mov    %esp,%ebp
c010e42d:	83 ec 28             	sub    $0x28,%esp
c010e430:	c7 45 f4 94 1f 15 c0 	movl   $0xc0151f94,-0xc(%ebp)
c010e437:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e43a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e43d:	89 50 04             	mov    %edx,0x4(%eax)
c010e440:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e443:	8b 50 04             	mov    0x4(%eax),%edx
c010e446:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e449:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e44b:	c7 05 9c 1f 15 c0 8c 	movl   $0xc014ea8c,0xc0151f9c
c010e452:	ea 14 c0 

    rq = &__rq;
c010e455:	c7 05 a0 1f 15 c0 a4 	movl   $0xc0151fa4,0xc0151fa0
c010e45c:	1f 15 c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010e45f:	a1 a0 1f 15 c0       	mov    0xc0151fa0,%eax
c010e464:	c7 40 0c 14 00 00 00 	movl   $0x14,0xc(%eax)
    sched_class->init(rq);
c010e46b:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e470:	8b 40 04             	mov    0x4(%eax),%eax
c010e473:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e479:	89 14 24             	mov    %edx,(%esp)
c010e47c:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e47e:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e483:	8b 00                	mov    (%eax),%eax
c010e485:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e489:	c7 04 24 54 83 11 c0 	movl   $0xc0118354,(%esp)
c010e490:	e8 d0 1e ff ff       	call   c0100365 <cprintf>
}
c010e495:	c9                   	leave  
c010e496:	c3                   	ret    

c010e497 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e497:	55                   	push   %ebp
c010e498:	89 e5                	mov    %esp,%ebp
c010e49a:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e49d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4a0:	8b 00                	mov    (%eax),%eax
c010e4a2:	83 f8 03             	cmp    $0x3,%eax
c010e4a5:	75 24                	jne    c010e4cb <wakeup_proc+0x34>
c010e4a7:	c7 44 24 0c 65 83 11 	movl   $0xc0118365,0xc(%esp)
c010e4ae:	c0 
c010e4af:	c7 44 24 08 80 83 11 	movl   $0xc0118380,0x8(%esp)
c010e4b6:	c0 
c010e4b7:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010e4be:	00 
c010e4bf:	c7 04 24 95 83 11 c0 	movl   $0xc0118395,(%esp)
c010e4c6:	e8 e9 29 ff ff       	call   c0100eb4 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e4cb:	e8 7c fe ff ff       	call   c010e34c <__intr_save>
c010e4d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e4d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4d6:	8b 00                	mov    (%eax),%eax
c010e4d8:	83 f8 02             	cmp    $0x2,%eax
c010e4db:	74 2d                	je     c010e50a <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e4dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4e0:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e4e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4e9:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e4f0:	00 00 00 
            if (proc != current) {
c010e4f3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e4f8:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e4fb:	74 29                	je     c010e526 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e4fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e500:	89 04 24             	mov    %eax,(%esp)
c010e503:	e8 81 fe ff ff       	call   c010e389 <sched_class_enqueue>
c010e508:	eb 1c                	jmp    c010e526 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e50a:	c7 44 24 08 ab 83 11 	movl   $0xc01183ab,0x8(%esp)
c010e511:	c0 
c010e512:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010e519:	00 
c010e51a:	c7 04 24 95 83 11 c0 	movl   $0xc0118395,(%esp)
c010e521:	e8 fa 29 ff ff       	call   c0100f20 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e526:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e529:	89 04 24             	mov    %eax,(%esp)
c010e52c:	e8 45 fe ff ff       	call   c010e376 <__intr_restore>
}
c010e531:	c9                   	leave  
c010e532:	c3                   	ret    

c010e533 <schedule>:

void
schedule(void) {
c010e533:	55                   	push   %ebp
c010e534:	89 e5                	mov    %esp,%ebp
c010e536:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e539:	e8 0e fe ff ff       	call   c010e34c <__intr_save>
c010e53e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e541:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e546:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e54d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e552:	8b 00                	mov    (%eax),%eax
c010e554:	83 f8 02             	cmp    $0x2,%eax
c010e557:	75 0d                	jne    c010e566 <schedule+0x33>
            sched_class_enqueue(current);
c010e559:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e55e:	89 04 24             	mov    %eax,(%esp)
c010e561:	e8 23 fe ff ff       	call   c010e389 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e566:	e8 6c fe ff ff       	call   c010e3d7 <sched_class_pick_next>
c010e56b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e56e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e572:	74 0b                	je     c010e57f <schedule+0x4c>
            sched_class_dequeue(next);
c010e574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e577:	89 04 24             	mov    %eax,(%esp)
c010e57a:	e8 36 fe ff ff       	call   c010e3b5 <sched_class_dequeue>
        }
        if (next == NULL) {
c010e57f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e583:	75 08                	jne    c010e58d <schedule+0x5a>
            next = idleproc;
c010e585:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e58a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e58d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e590:	8b 40 08             	mov    0x8(%eax),%eax
c010e593:	8d 50 01             	lea    0x1(%eax),%edx
c010e596:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e599:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e59c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e5a1:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e5a4:	74 0b                	je     c010e5b1 <schedule+0x7e>
            proc_run(next);
c010e5a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5a9:	89 04 24             	mov    %eax,(%esp)
c010e5ac:	e8 48 dd ff ff       	call   c010c2f9 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e5b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e5b4:	89 04 24             	mov    %eax,(%esp)
c010e5b7:	e8 ba fd ff ff       	call   c010e376 <__intr_restore>
}
c010e5bc:	c9                   	leave  
c010e5bd:	c3                   	ret    

c010e5be <add_timer>:

void
add_timer(timer_t *timer) {
c010e5be:	55                   	push   %ebp
c010e5bf:	89 e5                	mov    %esp,%ebp
c010e5c1:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e5c4:	e8 83 fd ff ff       	call   c010e34c <__intr_save>
c010e5c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e5cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5cf:	8b 00                	mov    (%eax),%eax
c010e5d1:	85 c0                	test   %eax,%eax
c010e5d3:	74 0a                	je     c010e5df <add_timer+0x21>
c010e5d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5d8:	8b 40 04             	mov    0x4(%eax),%eax
c010e5db:	85 c0                	test   %eax,%eax
c010e5dd:	75 24                	jne    c010e603 <add_timer+0x45>
c010e5df:	c7 44 24 0c c8 83 11 	movl   $0xc01183c8,0xc(%esp)
c010e5e6:	c0 
c010e5e7:	c7 44 24 08 80 83 11 	movl   $0xc0118380,0x8(%esp)
c010e5ee:	c0 
c010e5ef:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e5f6:	00 
c010e5f7:	c7 04 24 95 83 11 c0 	movl   $0xc0118395,(%esp)
c010e5fe:	e8 b1 28 ff ff       	call   c0100eb4 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e603:	8b 45 08             	mov    0x8(%ebp),%eax
c010e606:	83 c0 08             	add    $0x8,%eax
c010e609:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e60c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e60f:	8b 40 04             	mov    0x4(%eax),%eax
c010e612:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e615:	0f 94 c0             	sete   %al
c010e618:	0f b6 c0             	movzbl %al,%eax
c010e61b:	85 c0                	test   %eax,%eax
c010e61d:	75 24                	jne    c010e643 <add_timer+0x85>
c010e61f:	c7 44 24 0c f4 83 11 	movl   $0xc01183f4,0xc(%esp)
c010e626:	c0 
c010e627:	c7 44 24 08 80 83 11 	movl   $0xc0118380,0x8(%esp)
c010e62e:	c0 
c010e62f:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010e636:	00 
c010e637:	c7 04 24 95 83 11 c0 	movl   $0xc0118395,(%esp)
c010e63e:	e8 71 28 ff ff       	call   c0100eb4 <__panic>
c010e643:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e64a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e64d:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e650:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e653:	eb 4a                	jmp    c010e69f <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e655:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e658:	83 e8 08             	sub    $0x8,%eax
c010e65b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e65e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e661:	8b 10                	mov    (%eax),%edx
c010e663:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e666:	8b 00                	mov    (%eax),%eax
c010e668:	39 c2                	cmp    %eax,%edx
c010e66a:	73 13                	jae    c010e67f <add_timer+0xc1>
                next->expires -= timer->expires;
c010e66c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e66f:	8b 10                	mov    (%eax),%edx
c010e671:	8b 45 08             	mov    0x8(%ebp),%eax
c010e674:	8b 00                	mov    (%eax),%eax
c010e676:	29 c2                	sub    %eax,%edx
c010e678:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e67b:	89 10                	mov    %edx,(%eax)
                break;
c010e67d:	eb 29                	jmp    c010e6a8 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e67f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e682:	8b 10                	mov    (%eax),%edx
c010e684:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e687:	8b 00                	mov    (%eax),%eax
c010e689:	29 c2                	sub    %eax,%edx
c010e68b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e68e:	89 10                	mov    %edx,(%eax)
c010e690:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e693:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e696:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e699:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e69c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e69f:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e6a6:	75 ad                	jne    c010e655 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e6a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6ab:	8d 50 08             	lea    0x8(%eax),%edx
c010e6ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e6b4:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e6b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e6ba:	8b 00                	mov    (%eax),%eax
c010e6bc:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e6bf:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e6c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e6c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e6c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e6cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e6ce:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e6d1:	89 10                	mov    %edx,(%eax)
c010e6d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e6d6:	8b 10                	mov    (%eax),%edx
c010e6d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e6db:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e6de:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e6e1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e6e4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e6e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e6ea:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e6ed:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e6ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e6f2:	89 04 24             	mov    %eax,(%esp)
c010e6f5:	e8 7c fc ff ff       	call   c010e376 <__intr_restore>
}
c010e6fa:	c9                   	leave  
c010e6fb:	c3                   	ret    

c010e6fc <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010e6fc:	55                   	push   %ebp
c010e6fd:	89 e5                	mov    %esp,%ebp
c010e6ff:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e702:	e8 45 fc ff ff       	call   c010e34c <__intr_save>
c010e707:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e70a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e70d:	83 c0 08             	add    $0x8,%eax
c010e710:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e713:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e716:	8b 40 04             	mov    0x4(%eax),%eax
c010e719:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e71c:	0f 94 c0             	sete   %al
c010e71f:	0f b6 c0             	movzbl %al,%eax
c010e722:	85 c0                	test   %eax,%eax
c010e724:	0f 85 89 00 00 00    	jne    c010e7b3 <del_timer+0xb7>
            if (timer->expires != 0) {
c010e72a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e72d:	8b 00                	mov    (%eax),%eax
c010e72f:	85 c0                	test   %eax,%eax
c010e731:	74 35                	je     c010e768 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e733:	8b 45 08             	mov    0x8(%ebp),%eax
c010e736:	83 c0 08             	add    $0x8,%eax
c010e739:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e73c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e73f:	8b 40 04             	mov    0x4(%eax),%eax
c010e742:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e745:	81 7d f0 94 1f 15 c0 	cmpl   $0xc0151f94,-0x10(%ebp)
c010e74c:	74 1a                	je     c010e768 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e74e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e751:	83 e8 08             	sub    $0x8,%eax
c010e754:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e757:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e75a:	8b 10                	mov    (%eax),%edx
c010e75c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e75f:	8b 00                	mov    (%eax),%eax
c010e761:	01 c2                	add    %eax,%edx
c010e763:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e766:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e768:	8b 45 08             	mov    0x8(%ebp),%eax
c010e76b:	83 c0 08             	add    $0x8,%eax
c010e76e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e771:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e774:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e777:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e77a:	8b 40 04             	mov    0x4(%eax),%eax
c010e77d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e780:	8b 12                	mov    (%edx),%edx
c010e782:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e785:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e788:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e78b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e78e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e791:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e794:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e797:	89 10                	mov    %edx,(%eax)
c010e799:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e79c:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e79f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e7a2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e7a5:	89 50 04             	mov    %edx,0x4(%eax)
c010e7a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e7ab:	8b 50 04             	mov    0x4(%eax),%edx
c010e7ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e7b1:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010e7b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7b6:	89 04 24             	mov    %eax,(%esp)
c010e7b9:	e8 b8 fb ff ff       	call   c010e376 <__intr_restore>
}
c010e7be:	c9                   	leave  
c010e7bf:	c3                   	ret    

c010e7c0 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010e7c0:	55                   	push   %ebp
c010e7c1:	89 e5                	mov    %esp,%ebp
c010e7c3:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e7c6:	e8 81 fb ff ff       	call   c010e34c <__intr_save>
c010e7cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e7ce:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e7d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e7d8:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010e7db:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010e7de:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e7e5:	0f 84 fb 00 00 00    	je     c010e8e6 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010e7eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7ee:	83 e8 08             	sub    $0x8,%eax
c010e7f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010e7f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e7f7:	8b 00                	mov    (%eax),%eax
c010e7f9:	85 c0                	test   %eax,%eax
c010e7fb:	75 24                	jne    c010e821 <run_timer_list+0x61>
c010e7fd:	c7 44 24 0c 15 84 11 	movl   $0xc0118415,0xc(%esp)
c010e804:	c0 
c010e805:	c7 44 24 08 80 83 11 	movl   $0xc0118380,0x8(%esp)
c010e80c:	c0 
c010e80d:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010e814:	00 
c010e815:	c7 04 24 95 83 11 c0 	movl   $0xc0118395,(%esp)
c010e81c:	e8 93 26 ff ff       	call   c0100eb4 <__panic>
            timer->expires --;
c010e821:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e824:	8b 00                	mov    (%eax),%eax
c010e826:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e829:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e82c:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010e82e:	e9 a6 00 00 00       	jmp    c010e8d9 <run_timer_list+0x119>
c010e833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e836:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e839:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e83c:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010e83f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010e842:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e845:	8b 40 04             	mov    0x4(%eax),%eax
c010e848:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010e84b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e84e:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e854:	85 c0                	test   %eax,%eax
c010e856:	74 31                	je     c010e889 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010e858:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e85b:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e861:	85 c0                	test   %eax,%eax
c010e863:	78 4a                	js     c010e8af <run_timer_list+0xef>
c010e865:	c7 44 24 0c 2c 84 11 	movl   $0xc011842c,0xc(%esp)
c010e86c:	c0 
c010e86d:	c7 44 24 08 80 83 11 	movl   $0xc0118380,0x8(%esp)
c010e874:	c0 
c010e875:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010e87c:	00 
c010e87d:	c7 04 24 95 83 11 c0 	movl   $0xc0118395,(%esp)
c010e884:	e8 2b 26 ff ff       	call   c0100eb4 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010e889:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e88c:	8b 40 04             	mov    0x4(%eax),%eax
c010e88f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e893:	c7 44 24 08 50 84 11 	movl   $0xc0118450,0x8(%esp)
c010e89a:	c0 
c010e89b:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
c010e8a2:	00 
c010e8a3:	c7 04 24 95 83 11 c0 	movl   $0xc0118395,(%esp)
c010e8aa:	e8 71 26 ff ff       	call   c0100f20 <__warn>
                }
                wakeup_proc(proc);
c010e8af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e8b2:	89 04 24             	mov    %eax,(%esp)
c010e8b5:	e8 dd fb ff ff       	call   c010e497 <wakeup_proc>
                del_timer(timer);
c010e8ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8bd:	89 04 24             	mov    %eax,(%esp)
c010e8c0:	e8 37 fe ff ff       	call   c010e6fc <del_timer>
                if (le == &timer_list) {
c010e8c5:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e8cc:	75 02                	jne    c010e8d0 <run_timer_list+0x110>
                    break;
c010e8ce:	eb 16                	jmp    c010e8e6 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010e8d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e8d3:	83 e8 08             	sub    $0x8,%eax
c010e8d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010e8d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8dc:	8b 00                	mov    (%eax),%eax
c010e8de:	85 c0                	test   %eax,%eax
c010e8e0:	0f 84 4d ff ff ff    	je     c010e833 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010e8e6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e8eb:	89 04 24             	mov    %eax,(%esp)
c010e8ee:	e8 ff fa ff ff       	call   c010e3f2 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010e8f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e8f6:	89 04 24             	mov    %eax,(%esp)
c010e8f9:	e8 78 fa ff ff       	call   c010e376 <__intr_restore>
}
c010e8fe:	c9                   	leave  
c010e8ff:	c3                   	ret    

c010e900 <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010e900:	55                   	push   %ebp
c010e901:	89 e5                	mov    %esp,%ebp
c010e903:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010e906:	8b 45 08             	mov    0x8(%ebp),%eax
c010e909:	8b 00                	mov    (%eax),%eax
c010e90b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010e90e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e911:	89 04 24             	mov    %eax,(%esp)
c010e914:	e8 4e e1 ff ff       	call   c010ca67 <do_exit>
}
c010e919:	c9                   	leave  
c010e91a:	c3                   	ret    

c010e91b <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010e91b:	55                   	push   %ebp
c010e91c:	89 e5                	mov    %esp,%ebp
c010e91e:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010e921:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e926:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e929:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010e92c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e92f:	8b 40 44             	mov    0x44(%eax),%eax
c010e932:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010e935:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e938:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e93c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e93f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e943:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010e94a:	e8 dd df ff ff       	call   c010c92c <do_fork>
}
c010e94f:	c9                   	leave  
c010e950:	c3                   	ret    

c010e951 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010e951:	55                   	push   %ebp
c010e952:	89 e5                	mov    %esp,%ebp
c010e954:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010e957:	8b 45 08             	mov    0x8(%ebp),%eax
c010e95a:	8b 00                	mov    (%eax),%eax
c010e95c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010e95f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e962:	83 c0 04             	add    $0x4,%eax
c010e965:	8b 00                	mov    (%eax),%eax
c010e967:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010e96a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e96d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e971:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e974:	89 04 24             	mov    %eax,(%esp)
c010e977:	e8 d6 ee ff ff       	call   c010d852 <do_wait>
}
c010e97c:	c9                   	leave  
c010e97d:	c3                   	ret    

c010e97e <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010e97e:	55                   	push   %ebp
c010e97f:	89 e5                	mov    %esp,%ebp
c010e981:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010e984:	8b 45 08             	mov    0x8(%ebp),%eax
c010e987:	8b 00                	mov    (%eax),%eax
c010e989:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010e98c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e98f:	83 c0 04             	add    $0x4,%eax
c010e992:	8b 00                	mov    (%eax),%eax
c010e994:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010e997:	8b 45 08             	mov    0x8(%ebp),%eax
c010e99a:	83 c0 08             	add    $0x8,%eax
c010e99d:	8b 00                	mov    (%eax),%eax
c010e99f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010e9a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e9a5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e9b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9b3:	89 04 24             	mov    %eax,(%esp)
c010e9b6:	e8 44 ec ff ff       	call   c010d5ff <do_execve>
}
c010e9bb:	c9                   	leave  
c010e9bc:	c3                   	ret    

c010e9bd <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010e9bd:	55                   	push   %ebp
c010e9be:	89 e5                	mov    %esp,%ebp
c010e9c0:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010e9c3:	e8 74 ee ff ff       	call   c010d83c <do_yield>
}
c010e9c8:	c9                   	leave  
c010e9c9:	c3                   	ret    

c010e9ca <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010e9ca:	55                   	push   %ebp
c010e9cb:	89 e5                	mov    %esp,%ebp
c010e9cd:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010e9d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9d3:	8b 00                	mov    (%eax),%eax
c010e9d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010e9d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9db:	89 04 24             	mov    %eax,(%esp)
c010e9de:	e8 0f f0 ff ff       	call   c010d9f2 <do_kill>
}
c010e9e3:	c9                   	leave  
c010e9e4:	c3                   	ret    

c010e9e5 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010e9e5:	55                   	push   %ebp
c010e9e6:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010e9e8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e9ed:	8b 40 04             	mov    0x4(%eax),%eax
}
c010e9f0:	5d                   	pop    %ebp
c010e9f1:	c3                   	ret    

c010e9f2 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010e9f2:	55                   	push   %ebp
c010e9f3:	89 e5                	mov    %esp,%ebp
c010e9f5:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010e9f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9fb:	8b 00                	mov    (%eax),%eax
c010e9fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ea00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea03:	89 04 24             	mov    %eax,(%esp)
c010ea06:	e8 80 19 ff ff       	call   c010038b <cputchar>
    return 0;
c010ea0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ea10:	c9                   	leave  
c010ea11:	c3                   	ret    

c010ea12 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ea12:	55                   	push   %ebp
c010ea13:	89 e5                	mov    %esp,%ebp
c010ea15:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ea18:	e8 f4 81 ff ff       	call   c0106c11 <print_pgdir>
    return 0;
c010ea1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ea22:	c9                   	leave  
c010ea23:	c3                   	ret    

c010ea24 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010ea24:	55                   	push   %ebp
c010ea25:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ea27:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c010ea2c:	5d                   	pop    %ebp
c010ea2d:	c3                   	ret    

c010ea2e <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010ea2e:	55                   	push   %ebp
c010ea2f:	89 e5                	mov    %esp,%ebp
c010ea31:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ea34:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea37:	8b 00                	mov    (%eax),%eax
c010ea39:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ea3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea3f:	89 04 24             	mov    %eax,(%esp)
c010ea42:	e8 b2 f4 ff ff       	call   c010def9 <lab6_set_priority>
    return 0;
c010ea47:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ea4c:	c9                   	leave  
c010ea4d:	c3                   	ret    

c010ea4e <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010ea4e:	55                   	push   %ebp
c010ea4f:	89 e5                	mov    %esp,%ebp
c010ea51:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010ea54:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea57:	8b 00                	mov    (%eax),%eax
c010ea59:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010ea5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea5f:	89 04 24             	mov    %eax,(%esp)
c010ea62:	e8 bc f4 ff ff       	call   c010df23 <do_sleep>
}
c010ea67:	c9                   	leave  
c010ea68:	c3                   	ret    

c010ea69 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ea69:	55                   	push   %ebp
c010ea6a:	89 e5                	mov    %esp,%ebp
c010ea6c:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c010ea6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea72:	8b 00                	mov    (%eax),%eax
c010ea74:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010ea77:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea7a:	8b 40 04             	mov    0x4(%eax),%eax
c010ea7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010ea80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea83:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ea87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea8a:	89 04 24             	mov    %eax,(%esp)
c010ea8d:	e8 69 ca ff ff       	call   c010b4fb <sysfile_open>
}
c010ea92:	c9                   	leave  
c010ea93:	c3                   	ret    

c010ea94 <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010ea94:	55                   	push   %ebp
c010ea95:	89 e5                	mov    %esp,%ebp
c010ea97:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ea9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea9d:	8b 00                	mov    (%eax),%eax
c010ea9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010eaa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eaa5:	89 04 24             	mov    %eax,(%esp)
c010eaa8:	e8 99 ca ff ff       	call   c010b546 <sysfile_close>
}
c010eaad:	c9                   	leave  
c010eaae:	c3                   	ret    

c010eaaf <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010eaaf:	55                   	push   %ebp
c010eab0:	89 e5                	mov    %esp,%ebp
c010eab2:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eab5:	8b 45 08             	mov    0x8(%ebp),%eax
c010eab8:	8b 00                	mov    (%eax),%eax
c010eaba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010eabd:	8b 45 08             	mov    0x8(%ebp),%eax
c010eac0:	83 c0 04             	add    $0x4,%eax
c010eac3:	8b 00                	mov    (%eax),%eax
c010eac5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010eac8:	8b 45 08             	mov    0x8(%ebp),%eax
c010eacb:	8b 40 08             	mov    0x8(%eax),%eax
c010eace:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010ead1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ead4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ead8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eadb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eadf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eae2:	89 04 24             	mov    %eax,(%esp)
c010eae5:	e8 6f ca ff ff       	call   c010b559 <sysfile_read>
}
c010eaea:	c9                   	leave  
c010eaeb:	c3                   	ret    

c010eaec <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010eaec:	55                   	push   %ebp
c010eaed:	89 e5                	mov    %esp,%ebp
c010eaef:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eaf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaf5:	8b 00                	mov    (%eax),%eax
c010eaf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010eafa:	8b 45 08             	mov    0x8(%ebp),%eax
c010eafd:	83 c0 04             	add    $0x4,%eax
c010eb00:	8b 00                	mov    (%eax),%eax
c010eb02:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010eb05:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb08:	8b 40 08             	mov    0x8(%eax),%eax
c010eb0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010eb0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb11:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb18:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb1f:	89 04 24             	mov    %eax,(%esp)
c010eb22:	e8 aa cb ff ff       	call   c010b6d1 <sysfile_write>
}
c010eb27:	c9                   	leave  
c010eb28:	c3                   	ret    

c010eb29 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010eb29:	55                   	push   %ebp
c010eb2a:	89 e5                	mov    %esp,%ebp
c010eb2c:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb32:	8b 00                	mov    (%eax),%eax
c010eb34:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010eb37:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb3a:	83 c0 04             	add    $0x4,%eax
c010eb3d:	8b 00                	mov    (%eax),%eax
c010eb3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010eb42:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb45:	83 c0 08             	add    $0x8,%eax
c010eb48:	8b 00                	mov    (%eax),%eax
c010eb4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010eb4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb50:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb57:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb5e:	89 04 24             	mov    %eax,(%esp)
c010eb61:	e8 e5 cc ff ff       	call   c010b84b <sysfile_seek>
}
c010eb66:	c9                   	leave  
c010eb67:	c3                   	ret    

c010eb68 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010eb68:	55                   	push   %ebp
c010eb69:	89 e5                	mov    %esp,%ebp
c010eb6b:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb71:	8b 00                	mov    (%eax),%eax
c010eb73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010eb76:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb79:	83 c0 04             	add    $0x4,%eax
c010eb7c:	8b 00                	mov    (%eax),%eax
c010eb7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010eb81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb84:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb8b:	89 04 24             	mov    %eax,(%esp)
c010eb8e:	e8 d9 cc ff ff       	call   c010b86c <sysfile_fstat>
}
c010eb93:	c9                   	leave  
c010eb94:	c3                   	ret    

c010eb95 <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010eb95:	55                   	push   %ebp
c010eb96:	89 e5                	mov    %esp,%ebp
c010eb98:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb9e:	8b 00                	mov    (%eax),%eax
c010eba0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010eba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eba6:	89 04 24             	mov    %eax,(%esp)
c010eba9:	e8 3c cd ff ff       	call   c010b8ea <sysfile_fsync>
}
c010ebae:	c9                   	leave  
c010ebaf:	c3                   	ret    

c010ebb0 <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010ebb0:	55                   	push   %ebp
c010ebb1:	89 e5                	mov    %esp,%ebp
c010ebb3:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010ebb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebb9:	8b 00                	mov    (%eax),%eax
c010ebbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ebbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebc1:	8b 40 04             	mov    0x4(%eax),%eax
c010ebc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010ebc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebd1:	89 04 24             	mov    %eax,(%esp)
c010ebd4:	e8 ae ce ff ff       	call   c010ba87 <sysfile_getcwd>
}
c010ebd9:	c9                   	leave  
c010ebda:	c3                   	ret    

c010ebdb <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010ebdb:	55                   	push   %ebp
c010ebdc:	89 e5                	mov    %esp,%ebp
c010ebde:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ebe1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebe4:	8b 00                	mov    (%eax),%eax
c010ebe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010ebe9:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebec:	83 c0 04             	add    $0x4,%eax
c010ebef:	8b 00                	mov    (%eax),%eax
c010ebf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010ebf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebf7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebfe:	89 04 24             	mov    %eax,(%esp)
c010ec01:	e8 18 cf ff ff       	call   c010bb1e <sysfile_getdirentry>
}
c010ec06:	c9                   	leave  
c010ec07:	c3                   	ret    

c010ec08 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010ec08:	55                   	push   %ebp
c010ec09:	89 e5                	mov    %esp,%ebp
c010ec0b:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010ec0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec11:	8b 00                	mov    (%eax),%eax
c010ec13:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010ec16:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec19:	83 c0 04             	add    $0x4,%eax
c010ec1c:	8b 00                	mov    (%eax),%eax
c010ec1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010ec21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec24:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec2b:	89 04 24             	mov    %eax,(%esp)
c010ec2e:	e8 df cf ff ff       	call   c010bc12 <sysfile_dup>
}
c010ec33:	c9                   	leave  
c010ec34:	c3                   	ret    

c010ec35 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ec35:	55                   	push   %ebp
c010ec36:	89 e5                	mov    %esp,%ebp
c010ec38:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010ec3b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ec40:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ec43:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ec46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec49:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ec4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ec4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ec53:	78 60                	js     c010ecb5 <syscall+0x80>
c010ec55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec58:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ec5d:	77 56                	ja     c010ecb5 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010ec5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec62:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010ec69:	85 c0                	test   %eax,%eax
c010ec6b:	74 48                	je     c010ecb5 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010ec6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec70:	8b 40 14             	mov    0x14(%eax),%eax
c010ec73:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ec76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec79:	8b 40 18             	mov    0x18(%eax),%eax
c010ec7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ec7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec82:	8b 40 10             	mov    0x10(%eax),%eax
c010ec85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ec88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec8b:	8b 00                	mov    (%eax),%eax
c010ec8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ec90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec93:	8b 40 04             	mov    0x4(%eax),%eax
c010ec96:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ec99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec9c:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010eca3:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010eca6:	89 14 24             	mov    %edx,(%esp)
c010eca9:	ff d0                	call   *%eax
c010ecab:	89 c2                	mov    %eax,%edx
c010ecad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecb0:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ecb3:	eb 46                	jmp    c010ecfb <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010ecb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecb8:	89 04 24             	mov    %eax,(%esp)
c010ecbb:	e8 13 38 ff ff       	call   c01024d3 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ecc0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ecc5:	8d 50 48             	lea    0x48(%eax),%edx
c010ecc8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010eccd:	8b 40 04             	mov    0x4(%eax),%eax
c010ecd0:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ecd4:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ecd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ecdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ecdf:	c7 44 24 08 70 84 11 	movl   $0xc0118470,0x8(%esp)
c010ece6:	c0 
c010ece7:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010ecee:	00 
c010ecef:	c7 04 24 9c 84 11 c0 	movl   $0xc011849c,(%esp)
c010ecf6:	e8 b9 21 ff ff       	call   c0100eb4 <__panic>
            num, current->pid, current->name);
}
c010ecfb:	c9                   	leave  
c010ecfc:	c3                   	ret    

c010ecfd <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ecfd:	55                   	push   %ebp
c010ecfe:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ed00:	8b 55 08             	mov    0x8(%ebp),%edx
c010ed03:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ed08:	29 c2                	sub    %eax,%edx
c010ed0a:	89 d0                	mov    %edx,%eax
c010ed0c:	c1 f8 05             	sar    $0x5,%eax
}
c010ed0f:	5d                   	pop    %ebp
c010ed10:	c3                   	ret    

c010ed11 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ed11:	55                   	push   %ebp
c010ed12:	89 e5                	mov    %esp,%ebp
c010ed14:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ed17:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed1a:	89 04 24             	mov    %eax,(%esp)
c010ed1d:	e8 db ff ff ff       	call   c010ecfd <page2ppn>
c010ed22:	c1 e0 0c             	shl    $0xc,%eax
}
c010ed25:	c9                   	leave  
c010ed26:	c3                   	ret    

c010ed27 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010ed27:	55                   	push   %ebp
c010ed28:	89 e5                	mov    %esp,%ebp
c010ed2a:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010ed2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed30:	89 04 24             	mov    %eax,(%esp)
c010ed33:	e8 d9 ff ff ff       	call   c010ed11 <page2pa>
c010ed38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ed3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed3e:	c1 e8 0c             	shr    $0xc,%eax
c010ed41:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ed44:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010ed49:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ed4c:	72 23                	jb     c010ed71 <page2kva+0x4a>
c010ed4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed51:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ed55:	c7 44 24 08 b4 84 11 	movl   $0xc01184b4,0x8(%esp)
c010ed5c:	c0 
c010ed5d:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010ed64:	00 
c010ed65:	c7 04 24 d7 84 11 c0 	movl   $0xc01184d7,(%esp)
c010ed6c:	e8 43 21 ff ff       	call   c0100eb4 <__panic>
c010ed71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed74:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010ed79:	c9                   	leave  
c010ed7a:	c3                   	ret    

c010ed7b <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010ed7b:	55                   	push   %ebp
c010ed7c:	89 e5                	mov    %esp,%ebp
c010ed7e:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010ed81:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ed88:	e8 81 2e ff ff       	call   c0101c0e <ide_device_valid>
c010ed8d:	85 c0                	test   %eax,%eax
c010ed8f:	75 1c                	jne    c010edad <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010ed91:	c7 44 24 08 e5 84 11 	movl   $0xc01184e5,0x8(%esp)
c010ed98:	c0 
c010ed99:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010eda0:	00 
c010eda1:	c7 04 24 ff 84 11 c0 	movl   $0xc01184ff,(%esp)
c010eda8:	e8 07 21 ff ff       	call   c0100eb4 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010edad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010edb4:	e8 94 2e ff ff       	call   c0101c4d <ide_device_size>
c010edb9:	c1 e8 03             	shr    $0x3,%eax
c010edbc:	a3 dc 30 15 c0       	mov    %eax,0xc01530dc
}
c010edc1:	c9                   	leave  
c010edc2:	c3                   	ret    

c010edc3 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010edc3:	55                   	push   %ebp
c010edc4:	89 e5                	mov    %esp,%ebp
c010edc6:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010edc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010edcc:	89 04 24             	mov    %eax,(%esp)
c010edcf:	e8 53 ff ff ff       	call   c010ed27 <page2kva>
c010edd4:	8b 55 08             	mov    0x8(%ebp),%edx
c010edd7:	c1 ea 08             	shr    $0x8,%edx
c010edda:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010eddd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ede1:	74 0b                	je     c010edee <swapfs_read+0x2b>
c010ede3:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010ede9:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010edec:	72 23                	jb     c010ee11 <swapfs_read+0x4e>
c010edee:	8b 45 08             	mov    0x8(%ebp),%eax
c010edf1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010edf5:	c7 44 24 08 15 85 11 	movl   $0xc0118515,0x8(%esp)
c010edfc:	c0 
c010edfd:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010ee04:	00 
c010ee05:	c7 04 24 ff 84 11 c0 	movl   $0xc01184ff,(%esp)
c010ee0c:	e8 a3 20 ff ff       	call   c0100eb4 <__panic>
c010ee11:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ee14:	c1 e2 03             	shl    $0x3,%edx
c010ee17:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010ee1e:	00 
c010ee1f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ee23:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ee27:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ee2e:	e8 59 2e ff ff       	call   c0101c8c <ide_read_secs>
}
c010ee33:	c9                   	leave  
c010ee34:	c3                   	ret    

c010ee35 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010ee35:	55                   	push   %ebp
c010ee36:	89 e5                	mov    %esp,%ebp
c010ee38:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010ee3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ee3e:	89 04 24             	mov    %eax,(%esp)
c010ee41:	e8 e1 fe ff ff       	call   c010ed27 <page2kva>
c010ee46:	8b 55 08             	mov    0x8(%ebp),%edx
c010ee49:	c1 ea 08             	shr    $0x8,%edx
c010ee4c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ee4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee53:	74 0b                	je     c010ee60 <swapfs_write+0x2b>
c010ee55:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010ee5b:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010ee5e:	72 23                	jb     c010ee83 <swapfs_write+0x4e>
c010ee60:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee63:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ee67:	c7 44 24 08 15 85 11 	movl   $0xc0118515,0x8(%esp)
c010ee6e:	c0 
c010ee6f:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010ee76:	00 
c010ee77:	c7 04 24 ff 84 11 c0 	movl   $0xc01184ff,(%esp)
c010ee7e:	e8 31 20 ff ff       	call   c0100eb4 <__panic>
c010ee83:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ee86:	c1 e2 03             	shl    $0x3,%edx
c010ee89:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010ee90:	00 
c010ee91:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ee95:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ee99:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010eea0:	e8 29 30 ff ff       	call   c0101ece <ide_write_secs>
}
c010eea5:	c9                   	leave  
c010eea6:	c3                   	ret    

c010eea7 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010eea7:	55                   	push   %ebp
c010eea8:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010eeaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010eead:	8b 40 30             	mov    0x30(%eax),%eax
}
c010eeb0:	5d                   	pop    %ebp
c010eeb1:	c3                   	ret    

c010eeb2 <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010eeb2:	55                   	push   %ebp
c010eeb3:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010eeb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010eeb8:	8b 40 34             	mov    0x34(%eax),%eax
}
c010eebb:	5d                   	pop    %ebp
c010eebc:	c3                   	ret    

c010eebd <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010eebd:	55                   	push   %ebp
c010eebe:	89 e5                	mov    %esp,%ebp
c010eec0:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010eec3:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010eeca:	e8 dd 5d ff ff       	call   c0104cac <kmalloc>
c010eecf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eed2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eed6:	74 09                	je     c010eee1 <__alloc_inode+0x24>
        node->in_type = type;
c010eed8:	8b 55 08             	mov    0x8(%ebp),%edx
c010eedb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eede:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010eee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010eee4:	c9                   	leave  
c010eee5:	c3                   	ret    

c010eee6 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010eee6:	55                   	push   %ebp
c010eee7:	89 e5                	mov    %esp,%ebp
c010eee9:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c010eeec:	8b 45 08             	mov    0x8(%ebp),%eax
c010eeef:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010eef6:	8b 45 08             	mov    0x8(%ebp),%eax
c010eef9:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010ef00:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef03:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ef06:	89 50 3c             	mov    %edx,0x3c(%eax)
c010ef09:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef0c:	8b 55 10             	mov    0x10(%ebp),%edx
c010ef0f:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010ef12:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef15:	89 04 24             	mov    %eax,(%esp)
c010ef18:	e8 7b 00 00 00       	call   c010ef98 <inode_ref_inc>
}
c010ef1d:	c9                   	leave  
c010ef1e:	c3                   	ret    

c010ef1f <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010ef1f:	55                   	push   %ebp
c010ef20:	89 e5                	mov    %esp,%ebp
c010ef22:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c010ef25:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef28:	89 04 24             	mov    %eax,(%esp)
c010ef2b:	e8 77 ff ff ff       	call   c010eea7 <inode_ref_count>
c010ef30:	85 c0                	test   %eax,%eax
c010ef32:	74 24                	je     c010ef58 <inode_kill+0x39>
c010ef34:	c7 44 24 0c 34 85 11 	movl   $0xc0118534,0xc(%esp)
c010ef3b:	c0 
c010ef3c:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010ef43:	c0 
c010ef44:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c010ef4b:	00 
c010ef4c:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010ef53:	e8 5c 1f ff ff       	call   c0100eb4 <__panic>
    assert(inode_open_count(node) == 0);
c010ef58:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef5b:	89 04 24             	mov    %eax,(%esp)
c010ef5e:	e8 4f ff ff ff       	call   c010eeb2 <inode_open_count>
c010ef63:	85 c0                	test   %eax,%eax
c010ef65:	74 24                	je     c010ef8b <inode_kill+0x6c>
c010ef67:	c7 44 24 0c 78 85 11 	movl   $0xc0118578,0xc(%esp)
c010ef6e:	c0 
c010ef6f:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010ef76:	c0 
c010ef77:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c010ef7e:	00 
c010ef7f:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010ef86:	e8 29 1f ff ff       	call   c0100eb4 <__panic>
    kfree(node);
c010ef8b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef8e:	89 04 24             	mov    %eax,(%esp)
c010ef91:	e8 31 5d ff ff       	call   c0104cc7 <kfree>
}
c010ef96:	c9                   	leave  
c010ef97:	c3                   	ret    

c010ef98 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010ef98:	55                   	push   %ebp
c010ef99:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010ef9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef9e:	8b 40 30             	mov    0x30(%eax),%eax
c010efa1:	8d 50 01             	lea    0x1(%eax),%edx
c010efa4:	8b 45 08             	mov    0x8(%ebp),%eax
c010efa7:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010efaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010efad:	8b 40 30             	mov    0x30(%eax),%eax
}
c010efb0:	5d                   	pop    %ebp
c010efb1:	c3                   	ret    

c010efb2 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010efb2:	55                   	push   %ebp
c010efb3:	89 e5                	mov    %esp,%ebp
c010efb5:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010efb8:	8b 45 08             	mov    0x8(%ebp),%eax
c010efbb:	89 04 24             	mov    %eax,(%esp)
c010efbe:	e8 e4 fe ff ff       	call   c010eea7 <inode_ref_count>
c010efc3:	85 c0                	test   %eax,%eax
c010efc5:	7f 24                	jg     c010efeb <inode_ref_dec+0x39>
c010efc7:	c7 44 24 0c 94 85 11 	movl   $0xc0118594,0xc(%esp)
c010efce:	c0 
c010efcf:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010efd6:	c0 
c010efd7:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c010efde:	00 
c010efdf:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010efe6:	e8 c9 1e ff ff       	call   c0100eb4 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010efeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010efee:	8b 40 30             	mov    0x30(%eax),%eax
c010eff1:	8d 50 ff             	lea    -0x1(%eax),%edx
c010eff4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eff7:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010effa:	8b 45 08             	mov    0x8(%ebp),%eax
c010effd:	8b 40 30             	mov    0x30(%eax),%eax
c010f000:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f003:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f007:	0f 85 8d 00 00 00    	jne    c010f09a <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f00d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f010:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f013:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f017:	74 17                	je     c010f030 <inode_ref_dec+0x7e>
c010f019:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f01c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f01f:	85 c0                	test   %eax,%eax
c010f021:	74 0d                	je     c010f030 <inode_ref_dec+0x7e>
c010f023:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f026:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f029:	8b 40 24             	mov    0x24(%eax),%eax
c010f02c:	85 c0                	test   %eax,%eax
c010f02e:	75 24                	jne    c010f054 <inode_ref_dec+0xa2>
c010f030:	c7 44 24 0c b0 85 11 	movl   $0xc01185b0,0xc(%esp)
c010f037:	c0 
c010f038:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010f03f:	c0 
c010f040:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010f047:	00 
c010f048:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010f04f:	e8 60 1e ff ff       	call   c0100eb4 <__panic>
c010f054:	c7 44 24 04 00 86 11 	movl   $0xc0118600,0x4(%esp)
c010f05b:	c0 
c010f05c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f05f:	89 04 24             	mov    %eax,(%esp)
c010f062:	e8 39 01 00 00       	call   c010f1a0 <inode_check>
c010f067:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f06a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f06d:	8b 40 24             	mov    0x24(%eax),%eax
c010f070:	8b 55 08             	mov    0x8(%ebp),%edx
c010f073:	89 14 24             	mov    %edx,(%esp)
c010f076:	ff d0                	call   *%eax
c010f078:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f07b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f07f:	74 19                	je     c010f09a <inode_ref_dec+0xe8>
c010f081:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f085:	74 13                	je     c010f09a <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f087:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f08a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f08e:	c7 04 24 08 86 11 c0 	movl   $0xc0118608,(%esp)
c010f095:	e8 cb 12 ff ff       	call   c0100365 <cprintf>
        }
    }
    return ref_count;
c010f09a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f09d:	c9                   	leave  
c010f09e:	c3                   	ret    

c010f09f <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f09f:	55                   	push   %ebp
c010f0a0:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f0a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0a5:	8b 40 34             	mov    0x34(%eax),%eax
c010f0a8:	8d 50 01             	lea    0x1(%eax),%edx
c010f0ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0ae:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f0b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0b4:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f0b7:	5d                   	pop    %ebp
c010f0b8:	c3                   	ret    

c010f0b9 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f0b9:	55                   	push   %ebp
c010f0ba:	89 e5                	mov    %esp,%ebp
c010f0bc:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010f0bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0c2:	89 04 24             	mov    %eax,(%esp)
c010f0c5:	e8 e8 fd ff ff       	call   c010eeb2 <inode_open_count>
c010f0ca:	85 c0                	test   %eax,%eax
c010f0cc:	7f 24                	jg     c010f0f2 <inode_open_dec+0x39>
c010f0ce:	c7 44 24 0c 28 86 11 	movl   $0xc0118628,0xc(%esp)
c010f0d5:	c0 
c010f0d6:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010f0dd:	c0 
c010f0de:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c010f0e5:	00 
c010f0e6:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010f0ed:	e8 c2 1d ff ff       	call   c0100eb4 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f0f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0f5:	8b 40 34             	mov    0x34(%eax),%eax
c010f0f8:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f0fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0fe:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f101:	8b 45 08             	mov    0x8(%ebp),%eax
c010f104:	8b 40 34             	mov    0x34(%eax),%eax
c010f107:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f10a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f10e:	0f 85 87 00 00 00    	jne    c010f19b <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010f114:	8b 45 08             	mov    0x8(%ebp),%eax
c010f117:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f11a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f11e:	74 17                	je     c010f137 <inode_open_dec+0x7e>
c010f120:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f123:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f126:	85 c0                	test   %eax,%eax
c010f128:	74 0d                	je     c010f137 <inode_open_dec+0x7e>
c010f12a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f12d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f130:	8b 40 08             	mov    0x8(%eax),%eax
c010f133:	85 c0                	test   %eax,%eax
c010f135:	75 24                	jne    c010f15b <inode_open_dec+0xa2>
c010f137:	c7 44 24 0c 44 86 11 	movl   $0xc0118644,0xc(%esp)
c010f13e:	c0 
c010f13f:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010f146:	c0 
c010f147:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010f14e:	00 
c010f14f:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010f156:	e8 59 1d ff ff       	call   c0100eb4 <__panic>
c010f15b:	c7 44 24 04 92 86 11 	movl   $0xc0118692,0x4(%esp)
c010f162:	c0 
c010f163:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f166:	89 04 24             	mov    %eax,(%esp)
c010f169:	e8 32 00 00 00       	call   c010f1a0 <inode_check>
c010f16e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f171:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f174:	8b 40 08             	mov    0x8(%eax),%eax
c010f177:	8b 55 08             	mov    0x8(%ebp),%edx
c010f17a:	89 14 24             	mov    %edx,(%esp)
c010f17d:	ff d0                	call   *%eax
c010f17f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f182:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f186:	74 13                	je     c010f19b <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f188:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f18b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f18f:	c7 04 24 98 86 11 c0 	movl   $0xc0118698,(%esp)
c010f196:	e8 ca 11 ff ff       	call   c0100365 <cprintf>
        }
    }
    return open_count;
c010f19b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f19e:	c9                   	leave  
c010f19f:	c3                   	ret    

c010f1a0 <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f1a0:	55                   	push   %ebp
c010f1a1:	89 e5                	mov    %esp,%ebp
c010f1a3:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f1a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f1aa:	74 0a                	je     c010f1b6 <inode_check+0x16>
c010f1ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1af:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1b2:	85 c0                	test   %eax,%eax
c010f1b4:	75 24                	jne    c010f1da <inode_check+0x3a>
c010f1b6:	c7 44 24 0c b8 86 11 	movl   $0xc01186b8,0xc(%esp)
c010f1bd:	c0 
c010f1be:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010f1c5:	c0 
c010f1c6:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010f1cd:	00 
c010f1ce:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010f1d5:	e8 da 1c ff ff       	call   c0100eb4 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f1da:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1dd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1e0:	8b 00                	mov    (%eax),%eax
c010f1e2:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f1e7:	74 24                	je     c010f20d <inode_check+0x6d>
c010f1e9:	c7 44 24 0c e0 86 11 	movl   $0xc01186e0,0xc(%esp)
c010f1f0:	c0 
c010f1f1:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010f1f8:	c0 
c010f1f9:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010f200:	00 
c010f201:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010f208:	e8 a7 1c ff ff       	call   c0100eb4 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f20d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f210:	89 04 24             	mov    %eax,(%esp)
c010f213:	e8 8f fc ff ff       	call   c010eea7 <inode_ref_count>
c010f218:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f21b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f21e:	89 04 24             	mov    %eax,(%esp)
c010f221:	e8 8c fc ff ff       	call   c010eeb2 <inode_open_count>
c010f226:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f229:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f22c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f22f:	7c 06                	jl     c010f237 <inode_check+0x97>
c010f231:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f235:	79 24                	jns    c010f25b <inode_check+0xbb>
c010f237:	c7 44 24 0c 08 87 11 	movl   $0xc0118708,0xc(%esp)
c010f23e:	c0 
c010f23f:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010f246:	c0 
c010f247:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010f24e:	00 
c010f24f:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010f256:	e8 59 1c ff ff       	call   c0100eb4 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f25b:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f262:	7f 09                	jg     c010f26d <inode_check+0xcd>
c010f264:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f26b:	7e 24                	jle    c010f291 <inode_check+0xf1>
c010f26d:	c7 44 24 0c 34 87 11 	movl   $0xc0118734,0xc(%esp)
c010f274:	c0 
c010f275:	c7 44 24 08 4f 85 11 	movl   $0xc011854f,0x8(%esp)
c010f27c:	c0 
c010f27d:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010f284:	00 
c010f285:	c7 04 24 64 85 11 c0 	movl   $0xc0118564,(%esp)
c010f28c:	e8 23 1c ff ff       	call   c0100eb4 <__panic>
}
c010f291:	c9                   	leave  
c010f292:	c3                   	ret    

c010f293 <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f293:	55                   	push   %ebp
c010f294:	89 e5                	mov    %esp,%ebp
c010f296:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f299:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010f2a0:	e8 07 5a ff ff       	call   c0104cac <kmalloc>
c010f2a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f2a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f2ac:	74 09                	je     c010f2b7 <__alloc_fs+0x24>
        fs->fs_type = type;
c010f2ae:	8b 55 08             	mov    0x8(%ebp),%edx
c010f2b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f2b4:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f2b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f2ba:	c9                   	leave  
c010f2bb:	c3                   	ret    

c010f2bc <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f2bc:	55                   	push   %ebp
c010f2bd:	89 e5                	mov    %esp,%ebp
c010f2bf:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010f2c2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f2c9:	00 
c010f2ca:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f2d1:	e8 b3 a7 ff ff       	call   c0109a89 <sem_init>
    vfs_devlist_init();
c010f2d6:	e8 63 01 00 00       	call   c010f43e <vfs_devlist_init>
}
c010f2db:	c9                   	leave  
c010f2dc:	c3                   	ret    

c010f2dd <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f2dd:	55                   	push   %ebp
c010f2de:	89 e5                	mov    %esp,%ebp
c010f2e0:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010f2e3:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f2ea:	e8 28 a9 ff ff       	call   c0109c17 <down>
}
c010f2ef:	c9                   	leave  
c010f2f0:	c3                   	ret    

c010f2f1 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f2f1:	55                   	push   %ebp
c010f2f2:	89 e5                	mov    %esp,%ebp
c010f2f4:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010f2f7:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f2fe:	e8 f9 a8 ff ff       	call   c0109bfc <up>
}
c010f303:	c9                   	leave  
c010f304:	c3                   	ret    

c010f305 <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f305:	55                   	push   %ebp
c010f306:	89 e5                	mov    %esp,%ebp
c010f308:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010f30b:	e8 cd ff ff ff       	call   c010f2dd <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f310:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f315:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f318:	8b 45 08             	mov    0x8(%ebp),%eax
c010f31b:	a3 c4 1f 15 c0       	mov    %eax,0xc0151fc4
    }
    unlock_bootfs();
c010f320:	e8 cc ff ff ff       	call   c010f2f1 <unlock_bootfs>
    if (old != NULL) {
c010f325:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f329:	74 0b                	je     c010f336 <change_bootfs+0x31>
        vop_ref_dec(old);
c010f32b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f32e:	89 04 24             	mov    %eax,(%esp)
c010f331:	e8 7c fc ff ff       	call   c010efb2 <inode_ref_dec>
    }
}
c010f336:	c9                   	leave  
c010f337:	c3                   	ret    

c010f338 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f338:	55                   	push   %ebp
c010f339:	89 e5                	mov    %esp,%ebp
c010f33b:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f33e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f345:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f349:	74 62                	je     c010f3ad <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f34b:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010f352:	00 
c010f353:	8b 45 08             	mov    0x8(%ebp),%eax
c010f356:	89 04 24             	mov    %eax,(%esp)
c010f359:	e8 db 5e 00 00       	call   c0115239 <strchr>
c010f35e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f361:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f365:	74 0d                	je     c010f374 <vfs_set_bootfs+0x3c>
c010f367:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f36a:	83 c0 01             	add    $0x1,%eax
c010f36d:	0f b6 00             	movzbl (%eax),%eax
c010f370:	84 c0                	test   %al,%al
c010f372:	74 07                	je     c010f37b <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010f374:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f379:	eb 42                	jmp    c010f3bd <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f37b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f37e:	89 04 24             	mov    %eax,(%esp)
c010f381:	e8 99 10 00 00       	call   c011041f <vfs_chdir>
c010f386:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f389:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f38d:	74 05                	je     c010f394 <vfs_set_bootfs+0x5c>
            return ret;
c010f38f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f392:	eb 29                	jmp    c010f3bd <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f394:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f397:	89 04 24             	mov    %eax,(%esp)
c010f39a:	e8 54 0f 00 00       	call   c01102f3 <vfs_get_curdir>
c010f39f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f3a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f3a6:	74 05                	je     c010f3ad <vfs_set_bootfs+0x75>
            return ret;
c010f3a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3ab:	eb 10                	jmp    c010f3bd <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010f3ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3b0:	89 04 24             	mov    %eax,(%esp)
c010f3b3:	e8 4d ff ff ff       	call   c010f305 <change_bootfs>
    return 0;
c010f3b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f3bd:	c9                   	leave  
c010f3be:	c3                   	ret    

c010f3bf <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f3bf:	55                   	push   %ebp
c010f3c0:	89 e5                	mov    %esp,%ebp
c010f3c2:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f3c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010f3cc:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f3d1:	85 c0                	test   %eax,%eax
c010f3d3:	74 25                	je     c010f3fa <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010f3d5:	e8 03 ff ff ff       	call   c010f2dd <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010f3da:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f3df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f3e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f3e6:	74 0d                	je     c010f3f5 <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010f3e8:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f3ed:	89 04 24             	mov    %eax,(%esp)
c010f3f0:	e8 a3 fb ff ff       	call   c010ef98 <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010f3f5:	e8 f7 fe ff ff       	call   c010f2f1 <unlock_bootfs>
    }
    if (node == NULL) {
c010f3fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f3fe:	75 07                	jne    c010f407 <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010f400:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f405:	eb 0d                	jmp    c010f414 <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010f407:	8b 45 08             	mov    0x8(%ebp),%eax
c010f40a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f40d:	89 10                	mov    %edx,(%eax)
    return 0;
c010f40f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f414:	c9                   	leave  
c010f415:	c3                   	ret    

c010f416 <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f416:	55                   	push   %ebp
c010f417:	89 e5                	mov    %esp,%ebp
c010f419:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f41c:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f423:	e8 ef a7 ff ff       	call   c0109c17 <down>
}
c010f428:	c9                   	leave  
c010f429:	c3                   	ret    

c010f42a <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f42a:	55                   	push   %ebp
c010f42b:	89 e5                	mov    %esp,%ebp
c010f42d:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f430:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f437:	e8 c0 a7 ff ff       	call   c0109bfc <up>
}
c010f43c:	c9                   	leave  
c010f43d:	c3                   	ret    

c010f43e <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f43e:	55                   	push   %ebp
c010f43f:	89 e5                	mov    %esp,%ebp
c010f441:	83 ec 28             	sub    $0x28,%esp
c010f444:	c7 45 f4 c8 1f 15 c0 	movl   $0xc0151fc8,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f44b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f44e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f451:	89 50 04             	mov    %edx,0x4(%eax)
c010f454:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f457:	8b 50 04             	mov    0x4(%eax),%edx
c010f45a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f45d:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f45f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f466:	00 
c010f467:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f46e:	e8 16 a6 ff ff       	call   c0109a89 <sem_init>
}
c010f473:	c9                   	leave  
c010f474:	c3                   	ret    

c010f475 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f475:	55                   	push   %ebp
c010f476:	89 e5                	mov    %esp,%ebp
c010f478:	83 ec 38             	sub    $0x38,%esp
c010f47b:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f482:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f485:	8b 40 04             	mov    0x4(%eax),%eax
c010f488:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f48b:	0f 94 c0             	sete   %al
c010f48e:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f491:	85 c0                	test   %eax,%eax
c010f493:	75 57                	jne    c010f4ec <vfs_cleanup+0x77>
        lock_vdev_list();
c010f495:	e8 7c ff ff ff       	call   c010f416 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f49a:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f4a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f4a7:	eb 27                	jmp    c010f4d0 <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f4a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4ac:	83 e8 10             	sub    $0x10,%eax
c010f4af:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f4b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4b5:	8b 40 08             	mov    0x8(%eax),%eax
c010f4b8:	85 c0                	test   %eax,%eax
c010f4ba:	74 14                	je     c010f4d0 <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f4bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4bf:	8b 40 08             	mov    0x8(%eax),%eax
c010f4c2:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f4c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f4c8:	8b 52 08             	mov    0x8(%edx),%edx
c010f4cb:	89 14 24             	mov    %edx,(%esp)
c010f4ce:	ff d0                	call   *%eax
c010f4d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f4d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f4d9:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f4dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f4df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4e2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f4e5:	75 c2                	jne    c010f4a9 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f4e7:	e8 3e ff ff ff       	call   c010f42a <unlock_vdev_list>
    }
}
c010f4ec:	c9                   	leave  
c010f4ed:	c3                   	ret    

c010f4ee <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f4ee:	55                   	push   %ebp
c010f4ef:	89 e5                	mov    %esp,%ebp
c010f4f1:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010f4f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f4f8:	75 24                	jne    c010f51e <vfs_get_root+0x30>
c010f4fa:	c7 44 24 0c 70 87 11 	movl   $0xc0118770,0xc(%esp)
c010f501:	c0 
c010f502:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010f509:	c0 
c010f50a:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010f511:	00 
c010f512:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010f519:	e8 96 19 ff ff       	call   c0100eb4 <__panic>
    int ret = -E_NO_DEV;
c010f51e:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f525:	c7 45 e0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f52c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f52f:	8b 40 04             	mov    0x4(%eax),%eax
c010f532:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f535:	0f 94 c0             	sete   %al
c010f538:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f53b:	85 c0                	test   %eax,%eax
c010f53d:	0f 85 c3 00 00 00    	jne    c010f606 <vfs_get_root+0x118>
        lock_vdev_list();
c010f543:	e8 ce fe ff ff       	call   c010f416 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f548:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f54f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f552:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f555:	e9 8c 00 00 00       	jmp    c010f5e6 <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f55a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f55d:	83 e8 10             	sub    $0x10,%eax
c010f560:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f563:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f566:	8b 00                	mov    (%eax),%eax
c010f568:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f56c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f56f:	89 04 24             	mov    %eax,(%esp)
c010f572:	e8 23 5c 00 00       	call   c011519a <strcmp>
c010f577:	85 c0                	test   %eax,%eax
c010f579:	75 6b                	jne    c010f5e6 <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c010f57b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f582:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f585:	8b 40 08             	mov    0x8(%eax),%eax
c010f588:	85 c0                	test   %eax,%eax
c010f58a:	74 19                	je     c010f5a5 <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c010f58c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f58f:	8b 40 08             	mov    0x8(%eax),%eax
c010f592:	8b 40 74             	mov    0x74(%eax),%eax
c010f595:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f598:	8b 52 08             	mov    0x8(%edx),%edx
c010f59b:	89 14 24             	mov    %edx,(%esp)
c010f59e:	ff d0                	call   *%eax
c010f5a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f5a3:	eb 21                	jmp    c010f5c6 <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c010f5a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5a8:	8b 40 0c             	mov    0xc(%eax),%eax
c010f5ab:	85 c0                	test   %eax,%eax
c010f5ad:	75 17                	jne    c010f5c6 <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c010f5af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5b2:	8b 40 04             	mov    0x4(%eax),%eax
c010f5b5:	89 04 24             	mov    %eax,(%esp)
c010f5b8:	e8 db f9 ff ff       	call   c010ef98 <inode_ref_inc>
                        found = vdev->devnode;
c010f5bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5c0:	8b 40 04             	mov    0x4(%eax),%eax
c010f5c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f5c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f5ca:	74 11                	je     c010f5dd <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c010f5cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f5d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f5d6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f5d9:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f5db:	eb 24                	jmp    c010f601 <vfs_get_root+0x113>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f5dd:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f5e4:	eb 1b                	jmp    c010f601 <vfs_get_root+0x113>
c010f5e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f5e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f5ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f5ef:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f5f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f5f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f5f8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f5fb:	0f 85 59 ff ff ff    	jne    c010f55a <vfs_get_root+0x6c>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f601:	e8 24 fe ff ff       	call   c010f42a <unlock_vdev_list>
    }
    return ret;
c010f606:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f609:	c9                   	leave  
c010f60a:	c3                   	ret    

c010f60b <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f60b:	55                   	push   %ebp
c010f60c:	89 e5                	mov    %esp,%ebp
c010f60e:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c010f611:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f615:	75 24                	jne    c010f63b <vfs_get_devname+0x30>
c010f617:	c7 44 24 0c aa 87 11 	movl   $0xc01187aa,0xc(%esp)
c010f61e:	c0 
c010f61f:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010f626:	c0 
c010f627:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010f62e:	00 
c010f62f:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010f636:	e8 79 18 ff ff       	call   c0100eb4 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f63b:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f642:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f645:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f648:	eb 1b                	jmp    c010f665 <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f64a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f64d:	83 e8 10             	sub    $0x10,%eax
c010f650:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f653:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f656:	8b 40 08             	mov    0x8(%eax),%eax
c010f659:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f65c:	75 07                	jne    c010f665 <vfs_get_devname+0x5a>
            return vdev->devname;
c010f65e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f661:	8b 00                	mov    (%eax),%eax
c010f663:	eb 1c                	jmp    c010f681 <vfs_get_devname+0x76>
c010f665:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f668:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f66b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f66e:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f671:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f674:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f677:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f67a:	75 ce                	jne    c010f64a <vfs_get_devname+0x3f>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f67c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f681:	c9                   	leave  
c010f682:	c3                   	ret    

c010f683 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f683:	55                   	push   %ebp
c010f684:	89 e5                	mov    %esp,%ebp
c010f686:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010f689:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f690:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f693:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f696:	eb 28                	jmp    c010f6c0 <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f698:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f69b:	83 e8 10             	sub    $0x10,%eax
c010f69e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f6a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6a4:	8b 00                	mov    (%eax),%eax
c010f6a6:	8b 55 08             	mov    0x8(%ebp),%edx
c010f6a9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f6ad:	89 04 24             	mov    %eax,(%esp)
c010f6b0:	e8 e5 5a 00 00       	call   c011519a <strcmp>
c010f6b5:	85 c0                	test   %eax,%eax
c010f6b7:	75 07                	jne    c010f6c0 <check_devname_conflict+0x3d>
            return 0;
c010f6b9:	b8 00 00 00 00       	mov    $0x0,%eax
c010f6be:	eb 1c                	jmp    c010f6dc <check_devname_conflict+0x59>
c010f6c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f6c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6c9:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f6cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f6cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f6d5:	75 c1                	jne    c010f698 <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f6d7:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f6dc:	c9                   	leave  
c010f6dd:	c3                   	ret    

c010f6de <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f6de:	55                   	push   %ebp
c010f6df:	89 e5                	mov    %esp,%ebp
c010f6e1:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c010f6e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f6e8:	75 24                	jne    c010f70e <vfs_do_add+0x30>
c010f6ea:	c7 44 24 0c 70 87 11 	movl   $0xc0118770,0xc(%esp)
c010f6f1:	c0 
c010f6f2:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010f6f9:	c0 
c010f6fa:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010f701:	00 
c010f702:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010f709:	e8 a6 17 ff ff       	call   c0100eb4 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f70e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f712:	75 06                	jne    c010f71a <vfs_do_add+0x3c>
c010f714:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f718:	74 37                	je     c010f751 <vfs_do_add+0x73>
c010f71a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f71e:	74 0d                	je     c010f72d <vfs_do_add+0x4f>
c010f720:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f723:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f726:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f72b:	74 24                	je     c010f751 <vfs_do_add+0x73>
c010f72d:	c7 44 24 0c b8 87 11 	movl   $0xc01187b8,0xc(%esp)
c010f734:	c0 
c010f735:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010f73c:	c0 
c010f73d:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c010f744:	00 
c010f745:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010f74c:	e8 63 17 ff ff       	call   c0100eb4 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f751:	8b 45 08             	mov    0x8(%ebp),%eax
c010f754:	89 04 24             	mov    %eax,(%esp)
c010f757:	e8 46 59 00 00       	call   c01150a2 <strlen>
c010f75c:	83 f8 1f             	cmp    $0x1f,%eax
c010f75f:	76 0a                	jbe    c010f76b <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c010f761:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f766:	e9 00 01 00 00       	jmp    c010f86b <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c010f76b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010f772:	8b 45 08             	mov    0x8(%ebp),%eax
c010f775:	89 04 24             	mov    %eax,(%esp)
c010f778:	e8 89 0c ff ff       	call   c0100406 <strdup>
c010f77d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f780:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f784:	75 08                	jne    c010f78e <vfs_do_add+0xb0>
        return ret;
c010f786:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f789:	e9 dd 00 00 00       	jmp    c010f86b <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010f78e:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010f795:	e8 12 55 ff ff       	call   c0104cac <kmalloc>
c010f79a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f79d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f7a1:	75 05                	jne    c010f7a8 <vfs_do_add+0xca>
        goto failed_cleanup_name;
c010f7a3:	e9 b5 00 00 00       	jmp    c010f85d <vfs_do_add+0x17f>
    }

    ret = -E_EXISTS;
c010f7a8:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010f7af:	e8 62 fc ff ff       	call   c010f416 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010f7b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7b7:	89 04 24             	mov    %eax,(%esp)
c010f7ba:	e8 c4 fe ff ff       	call   c010f683 <check_devname_conflict>
c010f7bf:	85 c0                	test   %eax,%eax
c010f7c1:	75 16                	jne    c010f7d9 <vfs_do_add+0xfb>
        unlock_vdev_list();
c010f7c3:	e8 62 fc ff ff       	call   c010f42a <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010f7c8:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010f7c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7cc:	89 04 24             	mov    %eax,(%esp)
c010f7cf:	e8 f3 54 ff ff       	call   c0104cc7 <kfree>
c010f7d4:	e9 84 00 00 00       	jmp    c010f85d <vfs_do_add+0x17f>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010f7d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f7df:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010f7e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7e4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f7e7:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010f7ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7ed:	8b 55 14             	mov    0x14(%ebp),%edx
c010f7f0:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010f7f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7f6:	8b 55 10             	mov    0x10(%ebp),%edx
c010f7f9:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010f7fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7ff:	83 c0 10             	add    $0x10,%eax
c010f802:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f809:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f80c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f80f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f812:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f815:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010f818:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f81b:	8b 40 04             	mov    0x4(%eax),%eax
c010f81e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f821:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010f824:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f827:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010f82a:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010f82d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f830:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f833:	89 10                	mov    %edx,(%eax)
c010f835:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f838:	8b 10                	mov    (%eax),%edx
c010f83a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f83d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f840:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f843:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f846:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f849:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f84c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010f84f:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010f851:	e8 d4 fb ff ff       	call   c010f42a <unlock_vdev_list>
    return 0;
c010f856:	b8 00 00 00 00       	mov    $0x0,%eax
c010f85b:	eb 0e                	jmp    c010f86b <vfs_do_add+0x18d>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010f85d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f860:	89 04 24             	mov    %eax,(%esp)
c010f863:	e8 5f 54 ff ff       	call   c0104cc7 <kfree>
    return ret;
c010f868:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f86b:	c9                   	leave  
c010f86c:	c3                   	ret    

c010f86d <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010f86d:	55                   	push   %ebp
c010f86e:	89 e5                	mov    %esp,%ebp
c010f870:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010f873:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010f87a:	00 
c010f87b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f87e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f882:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010f889:	00 
c010f88a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f88d:	89 04 24             	mov    %eax,(%esp)
c010f890:	e8 49 fe ff ff       	call   c010f6de <vfs_do_add>
}
c010f895:	c9                   	leave  
c010f896:	c3                   	ret    

c010f897 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010f897:	55                   	push   %ebp
c010f898:	89 e5                	mov    %esp,%ebp
c010f89a:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010f89d:	8b 45 10             	mov    0x10(%ebp),%eax
c010f8a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f8a4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010f8ab:	00 
c010f8ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f8af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f8b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8b6:	89 04 24             	mov    %eax,(%esp)
c010f8b9:	e8 20 fe ff ff       	call   c010f6de <vfs_do_add>
}
c010f8be:	c9                   	leave  
c010f8bf:	c3                   	ret    

c010f8c0 <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010f8c0:	55                   	push   %ebp
c010f8c1:	89 e5                	mov    %esp,%ebp
c010f8c3:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010f8c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f8ca:	75 24                	jne    c010f8f0 <find_mount+0x30>
c010f8cc:	c7 44 24 0c 70 87 11 	movl   $0xc0118770,0xc(%esp)
c010f8d3:	c0 
c010f8d4:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010f8db:	c0 
c010f8dc:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010f8e3:	00 
c010f8e4:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010f8eb:	e8 c4 15 ff ff       	call   c0100eb4 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f8f0:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f8f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f8fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f8fd:	eb 3a                	jmp    c010f939 <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f8ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f902:	83 e8 10             	sub    $0x10,%eax
c010f905:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010f908:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f90b:	8b 40 0c             	mov    0xc(%eax),%eax
c010f90e:	85 c0                	test   %eax,%eax
c010f910:	74 27                	je     c010f939 <find_mount+0x79>
c010f912:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f915:	8b 00                	mov    (%eax),%eax
c010f917:	8b 55 08             	mov    0x8(%ebp),%edx
c010f91a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f91e:	89 04 24             	mov    %eax,(%esp)
c010f921:	e8 74 58 00 00       	call   c011519a <strcmp>
c010f926:	85 c0                	test   %eax,%eax
c010f928:	75 0f                	jne    c010f939 <find_mount+0x79>
            *vdev_store = vdev;
c010f92a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f92d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f930:	89 10                	mov    %edx,(%eax)
            return 0;
c010f932:	b8 00 00 00 00       	mov    $0x0,%eax
c010f937:	eb 1c                	jmp    c010f955 <find_mount+0x95>
c010f939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f93c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f93f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f942:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f945:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f94b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f94e:	75 af                	jne    c010f8ff <find_mount+0x3f>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010f950:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010f955:	c9                   	leave  
c010f956:	c3                   	ret    

c010f957 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010f957:	55                   	push   %ebp
c010f958:	89 e5                	mov    %esp,%ebp
c010f95a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010f95d:	e8 b4 fa ff ff       	call   c010f416 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010f962:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f965:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f969:	8b 45 08             	mov    0x8(%ebp),%eax
c010f96c:	89 04 24             	mov    %eax,(%esp)
c010f96f:	e8 4c ff ff ff       	call   c010f8c0 <find_mount>
c010f974:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f977:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f97b:	74 05                	je     c010f982 <vfs_mount+0x2b>
        goto out;
c010f97d:	e9 f4 00 00 00       	jmp    c010fa76 <vfs_mount+0x11f>
    }
    if (vdev->fs != NULL) {
c010f982:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f985:	8b 40 08             	mov    0x8(%eax),%eax
c010f988:	85 c0                	test   %eax,%eax
c010f98a:	74 0c                	je     c010f998 <vfs_mount+0x41>
        ret = -E_BUSY;
c010f98c:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010f993:	e9 de 00 00 00       	jmp    c010fa76 <vfs_mount+0x11f>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010f998:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f99b:	8b 00                	mov    (%eax),%eax
c010f99d:	85 c0                	test   %eax,%eax
c010f99f:	74 0a                	je     c010f9ab <vfs_mount+0x54>
c010f9a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9a4:	8b 40 0c             	mov    0xc(%eax),%eax
c010f9a7:	85 c0                	test   %eax,%eax
c010f9a9:	75 24                	jne    c010f9cf <vfs_mount+0x78>
c010f9ab:	c7 44 24 0c 14 88 11 	movl   $0xc0118814,0xc(%esp)
c010f9b2:	c0 
c010f9b3:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010f9ba:	c0 
c010f9bb:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010f9c2:	00 
c010f9c3:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010f9ca:	e8 e5 14 ff ff       	call   c0100eb4 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010f9cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9d2:	8b 40 04             	mov    0x4(%eax),%eax
c010f9d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f9d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f9dc:	74 0d                	je     c010f9eb <vfs_mount+0x94>
c010f9de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f9e1:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f9e4:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f9e9:	74 24                	je     c010fa0f <vfs_mount+0xb8>
c010f9eb:	c7 44 24 0c 40 88 11 	movl   $0xc0118840,0xc(%esp)
c010f9f2:	c0 
c010f9f3:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010f9fa:	c0 
c010f9fb:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010fa02:	00 
c010fa03:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010fa0a:	e8 a5 14 ff ff       	call   c0100eb4 <__panic>
c010fa0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa12:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010fa15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa18:	83 c0 08             	add    $0x8,%eax
c010fa1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa22:	89 04 24             	mov    %eax,(%esp)
c010fa25:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa28:	ff d0                	call   *%eax
c010fa2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fa2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fa31:	75 43                	jne    c010fa76 <vfs_mount+0x11f>
        assert(vdev->fs != NULL);
c010fa33:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa36:	8b 40 08             	mov    0x8(%eax),%eax
c010fa39:	85 c0                	test   %eax,%eax
c010fa3b:	75 24                	jne    c010fa61 <vfs_mount+0x10a>
c010fa3d:	c7 44 24 0c 73 88 11 	movl   $0xc0118873,0xc(%esp)
c010fa44:	c0 
c010fa45:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010fa4c:	c0 
c010fa4d:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010fa54:	00 
c010fa55:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010fa5c:	e8 53 14 ff ff       	call   c0100eb4 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010fa61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa64:	8b 00                	mov    (%eax),%eax
c010fa66:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa6a:	c7 04 24 84 88 11 c0 	movl   $0xc0118884,(%esp)
c010fa71:	e8 ef 08 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fa76:	e8 af f9 ff ff       	call   c010f42a <unlock_vdev_list>
    return ret;
c010fa7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fa7e:	c9                   	leave  
c010fa7f:	c3                   	ret    

c010fa80 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010fa80:	55                   	push   %ebp
c010fa81:	89 e5                	mov    %esp,%ebp
c010fa83:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010fa86:	e8 8b f9 ff ff       	call   c010f416 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fa8b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fa8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa92:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa95:	89 04 24             	mov    %eax,(%esp)
c010fa98:	e8 23 fe ff ff       	call   c010f8c0 <find_mount>
c010fa9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010faa0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010faa4:	74 05                	je     c010faab <vfs_unmount+0x2b>
        goto out;
c010faa6:	e9 a8 00 00 00       	jmp    c010fb53 <vfs_unmount+0xd3>
    }
    if (vdev->fs == NULL) {
c010faab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010faae:	8b 40 08             	mov    0x8(%eax),%eax
c010fab1:	85 c0                	test   %eax,%eax
c010fab3:	75 0c                	jne    c010fac1 <vfs_unmount+0x41>
        ret = -E_INVAL;
c010fab5:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010fabc:	e9 92 00 00 00       	jmp    c010fb53 <vfs_unmount+0xd3>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fac1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fac4:	8b 00                	mov    (%eax),%eax
c010fac6:	85 c0                	test   %eax,%eax
c010fac8:	74 0a                	je     c010fad4 <vfs_unmount+0x54>
c010faca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010facd:	8b 40 0c             	mov    0xc(%eax),%eax
c010fad0:	85 c0                	test   %eax,%eax
c010fad2:	75 24                	jne    c010faf8 <vfs_unmount+0x78>
c010fad4:	c7 44 24 0c 14 88 11 	movl   $0xc0118814,0xc(%esp)
c010fadb:	c0 
c010fadc:	c7 44 24 08 80 87 11 	movl   $0xc0118780,0x8(%esp)
c010fae3:	c0 
c010fae4:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010faeb:	00 
c010faec:	c7 04 24 95 87 11 c0 	movl   $0xc0118795,(%esp)
c010faf3:	e8 bc 13 ff ff       	call   c0100eb4 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010faf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fafb:	8b 40 08             	mov    0x8(%eax),%eax
c010fafe:	8b 40 70             	mov    0x70(%eax),%eax
c010fb01:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fb04:	8b 52 08             	mov    0x8(%edx),%edx
c010fb07:	89 14 24             	mov    %edx,(%esp)
c010fb0a:	ff d0                	call   *%eax
c010fb0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb13:	74 02                	je     c010fb17 <vfs_unmount+0x97>
        goto out;
c010fb15:	eb 3c                	jmp    c010fb53 <vfs_unmount+0xd3>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010fb17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb1a:	8b 40 08             	mov    0x8(%eax),%eax
c010fb1d:	8b 40 78             	mov    0x78(%eax),%eax
c010fb20:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fb23:	8b 52 08             	mov    0x8(%edx),%edx
c010fb26:	89 14 24             	mov    %edx,(%esp)
c010fb29:	ff d0                	call   *%eax
c010fb2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb32:	75 1f                	jne    c010fb53 <vfs_unmount+0xd3>
        vdev->fs = NULL;
c010fb34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb37:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010fb3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb41:	8b 00                	mov    (%eax),%eax
c010fb43:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb47:	c7 04 24 94 88 11 c0 	movl   $0xc0118894,(%esp)
c010fb4e:	e8 12 08 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fb53:	e8 d2 f8 ff ff       	call   c010f42a <unlock_vdev_list>
    return ret;
c010fb58:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fb5b:	c9                   	leave  
c010fb5c:	c3                   	ret    

c010fb5d <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010fb5d:	55                   	push   %ebp
c010fb5e:	89 e5                	mov    %esp,%ebp
c010fb60:	83 ec 38             	sub    $0x38,%esp
c010fb63:	c7 45 e4 c8 1f 15 c0 	movl   $0xc0151fc8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010fb6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fb6d:	8b 40 04             	mov    0x4(%eax),%eax
c010fb70:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010fb73:	0f 94 c0             	sete   %al
c010fb76:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010fb79:	85 c0                	test   %eax,%eax
c010fb7b:	0f 85 f1 00 00 00    	jne    c010fc72 <vfs_unmount_all+0x115>
        lock_vdev_list();
c010fb81:	e8 90 f8 ff ff       	call   c010f416 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010fb86:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010fb8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb90:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010fb93:	e9 ba 00 00 00       	jmp    c010fc52 <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fb98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fb9b:	83 e8 10             	sub    $0x10,%eax
c010fb9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010fba1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fba4:	8b 40 0c             	mov    0xc(%eax),%eax
c010fba7:	85 c0                	test   %eax,%eax
c010fba9:	0f 84 a3 00 00 00    	je     c010fc52 <vfs_unmount_all+0xf5>
c010fbaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbb2:	8b 40 08             	mov    0x8(%eax),%eax
c010fbb5:	85 c0                	test   %eax,%eax
c010fbb7:	0f 84 95 00 00 00    	je     c010fc52 <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fbbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbc0:	8b 40 08             	mov    0x8(%eax),%eax
c010fbc3:	8b 40 70             	mov    0x70(%eax),%eax
c010fbc6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fbc9:	8b 52 08             	mov    0x8(%edx),%edx
c010fbcc:	89 14 24             	mov    %edx,(%esp)
c010fbcf:	ff d0                	call   *%eax
c010fbd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fbd4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fbd8:	74 1e                	je     c010fbf8 <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010fbda:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbdd:	8b 00                	mov    (%eax),%eax
c010fbdf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fbe2:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fbe6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fbea:	c7 04 24 a8 88 11 c0 	movl   $0xc01188a8,(%esp)
c010fbf1:	e8 6f 07 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fbf6:	eb 5a                	jmp    c010fc52 <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010fbf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbfb:	8b 40 08             	mov    0x8(%eax),%eax
c010fbfe:	8b 40 78             	mov    0x78(%eax),%eax
c010fc01:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fc04:	8b 52 08             	mov    0x8(%edx),%edx
c010fc07:	89 14 24             	mov    %edx,(%esp)
c010fc0a:	ff d0                	call   *%eax
c010fc0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fc0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fc13:	74 1e                	je     c010fc33 <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010fc15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc18:	8b 00                	mov    (%eax),%eax
c010fc1a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fc1d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fc21:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc25:	c7 04 24 d0 88 11 c0 	movl   $0xc01188d0,(%esp)
c010fc2c:	e8 34 07 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fc31:	eb 1f                	jmp    c010fc52 <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c010fc33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc36:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010fc3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc40:	8b 00                	mov    (%eax),%eax
c010fc42:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc46:	c7 04 24 94 88 11 c0 	movl   $0xc0118894,(%esp)
c010fc4d:	e8 13 07 ff ff       	call   c0100365 <cprintf>
c010fc52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc55:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fc58:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fc5b:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010fc5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc64:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fc67:	0f 85 2b ff ff ff    	jne    c010fb98 <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010fc6d:	e8 b8 f7 ff ff       	call   c010f42a <unlock_vdev_list>
    }
    return 0;
c010fc72:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fc77:	c9                   	leave  
c010fc78:	c3                   	ret    

c010fc79 <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010fc79:	55                   	push   %ebp
c010fc7a:	89 e5                	mov    %esp,%ebp
c010fc7c:	53                   	push   %ebx
c010fc7d:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c010fc80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010fc87:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc8a:	83 e0 03             	and    $0x3,%eax
c010fc8d:	85 c0                	test   %eax,%eax
c010fc8f:	74 18                	je     c010fca9 <vfs_open+0x30>
c010fc91:	83 f8 02             	cmp    $0x2,%eax
c010fc94:	77 09                	ja     c010fc9f <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010fc96:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010fc9d:	eb 0b                	jmp    c010fcaa <vfs_open+0x31>
    default:
        return -E_INVAL;
c010fc9f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fca4:	e9 ba 02 00 00       	jmp    c010ff63 <vfs_open+0x2ea>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010fca9:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010fcaa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcad:	83 e0 10             	and    $0x10,%eax
c010fcb0:	85 c0                	test   %eax,%eax
c010fcb2:	74 10                	je     c010fcc4 <vfs_open+0x4b>
        if (!can_write) {
c010fcb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fcb8:	75 0a                	jne    c010fcc4 <vfs_open+0x4b>
            return -E_INVAL;
c010fcba:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fcbf:	e9 9f 02 00 00       	jmp    c010ff63 <vfs_open+0x2ea>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010fcc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcc7:	83 e0 08             	and    $0x8,%eax
c010fcca:	85 c0                	test   %eax,%eax
c010fccc:	0f 95 c0             	setne  %al
c010fccf:	0f b6 c0             	movzbl %al,%eax
c010fcd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010fcd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcd8:	83 e0 04             	and    $0x4,%eax
c010fcdb:	85 c0                	test   %eax,%eax
c010fcdd:	0f 95 c0             	setne  %al
c010fce0:	0f b6 c0             	movzbl %al,%eax
c010fce3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010fce6:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010fce9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fced:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcf0:	89 04 24             	mov    %eax,(%esp)
c010fcf3:	e8 7a 04 00 00       	call   c0110172 <vfs_lookup>
c010fcf8:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010fcfb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fcff:	0f 84 cc 00 00 00    	je     c010fdd1 <vfs_open+0x158>
        if (ret == -16 && (create)) {
c010fd05:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010fd09:	0f 85 ba 00 00 00    	jne    c010fdc9 <vfs_open+0x150>
c010fd0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fd13:	0f 84 b0 00 00 00    	je     c010fdc9 <vfs_open+0x150>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010fd19:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010fd1c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010fd20:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010fd23:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd27:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd2a:	89 04 24             	mov    %eax,(%esp)
c010fd2d:	e8 20 05 00 00       	call   c0110252 <vfs_lookup_parent>
c010fd32:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fd35:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fd39:	74 08                	je     c010fd43 <vfs_open+0xca>
                return ret;
c010fd3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fd3e:	e9 20 02 00 00       	jmp    c010ff63 <vfs_open+0x2ea>
            }
            ret = vop_create(dir, name, excl, &node);
c010fd43:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fd46:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010fd49:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010fd4d:	74 17                	je     c010fd66 <vfs_open+0xed>
c010fd4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fd52:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fd55:	85 c0                	test   %eax,%eax
c010fd57:	74 0d                	je     c010fd66 <vfs_open+0xed>
c010fd59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fd5c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fd5f:	8b 40 34             	mov    0x34(%eax),%eax
c010fd62:	85 c0                	test   %eax,%eax
c010fd64:	75 24                	jne    c010fd8a <vfs_open+0x111>
c010fd66:	c7 44 24 0c fc 88 11 	movl   $0xc01188fc,0xc(%esp)
c010fd6d:	c0 
c010fd6e:	c7 44 24 08 4b 89 11 	movl   $0xc011894b,0x8(%esp)
c010fd75:	c0 
c010fd76:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010fd7d:	00 
c010fd7e:	c7 04 24 60 89 11 c0 	movl   $0xc0118960,(%esp)
c010fd85:	e8 2a 11 ff ff       	call   c0100eb4 <__panic>
c010fd8a:	c7 44 24 04 76 89 11 	movl   $0xc0118976,0x4(%esp)
c010fd91:	c0 
c010fd92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fd95:	89 04 24             	mov    %eax,(%esp)
c010fd98:	e8 03 f4 ff ff       	call   c010f1a0 <inode_check>
c010fd9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fda0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fda3:	8b 40 34             	mov    0x34(%eax),%eax
c010fda6:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010fda9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fdac:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c010fdaf:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010fdb3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010fdb6:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010fdba:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fdbe:	89 14 24             	mov    %edx,(%esp)
c010fdc1:	ff d0                	call   *%eax
c010fdc3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c010fdc6:	90                   	nop
c010fdc7:	eb 1e                	jmp    c010fde7 <vfs_open+0x16e>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c010fdc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fdcc:	e9 92 01 00 00       	jmp    c010ff63 <vfs_open+0x2ea>
    } else if (excl && create) {
c010fdd1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fdd5:	74 10                	je     c010fde7 <vfs_open+0x16e>
c010fdd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fddb:	74 0a                	je     c010fde7 <vfs_open+0x16e>
        return -E_EXISTS;
c010fddd:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c010fde2:	e9 7c 01 00 00       	jmp    c010ff63 <vfs_open+0x2ea>
    }
    assert(node != NULL);
c010fde7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fdea:	85 c0                	test   %eax,%eax
c010fdec:	75 24                	jne    c010fe12 <vfs_open+0x199>
c010fdee:	c7 44 24 0c 7d 89 11 	movl   $0xc011897d,0xc(%esp)
c010fdf5:	c0 
c010fdf6:	c7 44 24 08 4b 89 11 	movl   $0xc011894b,0x8(%esp)
c010fdfd:	c0 
c010fdfe:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
c010fe05:	00 
c010fe06:	c7 04 24 60 89 11 c0 	movl   $0xc0118960,(%esp)
c010fe0d:	e8 a2 10 ff ff       	call   c0100eb4 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c010fe12:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fe15:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010fe18:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010fe1c:	74 17                	je     c010fe35 <vfs_open+0x1bc>
c010fe1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe21:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe24:	85 c0                	test   %eax,%eax
c010fe26:	74 0d                	je     c010fe35 <vfs_open+0x1bc>
c010fe28:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe2b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe2e:	8b 40 04             	mov    0x4(%eax),%eax
c010fe31:	85 c0                	test   %eax,%eax
c010fe33:	75 24                	jne    c010fe59 <vfs_open+0x1e0>
c010fe35:	c7 44 24 0c 8c 89 11 	movl   $0xc011898c,0xc(%esp)
c010fe3c:	c0 
c010fe3d:	c7 44 24 08 4b 89 11 	movl   $0xc011894b,0x8(%esp)
c010fe44:	c0 
c010fe45:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010fe4c:	00 
c010fe4d:	c7 04 24 60 89 11 c0 	movl   $0xc0118960,(%esp)
c010fe54:	e8 5b 10 ff ff       	call   c0100eb4 <__panic>
c010fe59:	c7 44 24 04 d9 89 11 	movl   $0xc01189d9,0x4(%esp)
c010fe60:	c0 
c010fe61:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe64:	89 04 24             	mov    %eax,(%esp)
c010fe67:	e8 34 f3 ff ff       	call   c010f1a0 <inode_check>
c010fe6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe6f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe72:	8b 40 04             	mov    0x4(%eax),%eax
c010fe75:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fe78:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010fe7b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fe7f:	89 14 24             	mov    %edx,(%esp)
c010fe82:	ff d0                	call   *%eax
c010fe84:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fe87:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fe8b:	74 13                	je     c010fea0 <vfs_open+0x227>
        vop_ref_dec(node);
c010fe8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fe90:	89 04 24             	mov    %eax,(%esp)
c010fe93:	e8 1a f1 ff ff       	call   c010efb2 <inode_ref_dec>
        return ret;
c010fe98:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fe9b:	e9 c3 00 00 00       	jmp    c010ff63 <vfs_open+0x2ea>
    }

    vop_open_inc(node);
c010fea0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fea3:	89 04 24             	mov    %eax,(%esp)
c010fea6:	e8 f4 f1 ff ff       	call   c010f09f <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c010feab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010feae:	83 e0 10             	and    $0x10,%eax
c010feb1:	85 c0                	test   %eax,%eax
c010feb3:	75 0a                	jne    c010febf <vfs_open+0x246>
c010feb5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010feb9:	0f 84 97 00 00 00    	je     c010ff56 <vfs_open+0x2dd>
        if ((ret = vop_truncate(node, 0)) != 0) {
c010febf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fec2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010fec5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010fec9:	74 17                	je     c010fee2 <vfs_open+0x269>
c010fecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010fece:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fed1:	85 c0                	test   %eax,%eax
c010fed3:	74 0d                	je     c010fee2 <vfs_open+0x269>
c010fed5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010fed8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fedb:	8b 40 30             	mov    0x30(%eax),%eax
c010fede:	85 c0                	test   %eax,%eax
c010fee0:	75 24                	jne    c010ff06 <vfs_open+0x28d>
c010fee2:	c7 44 24 0c e0 89 11 	movl   $0xc01189e0,0xc(%esp)
c010fee9:	c0 
c010feea:	c7 44 24 08 4b 89 11 	movl   $0xc011894b,0x8(%esp)
c010fef1:	c0 
c010fef2:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010fef9:	00 
c010fefa:	c7 04 24 60 89 11 c0 	movl   $0xc0118960,(%esp)
c010ff01:	e8 ae 0f ff ff       	call   c0100eb4 <__panic>
c010ff06:	c7 44 24 04 31 8a 11 	movl   $0xc0118a31,0x4(%esp)
c010ff0d:	c0 
c010ff0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff11:	89 04 24             	mov    %eax,(%esp)
c010ff14:	e8 87 f2 ff ff       	call   c010f1a0 <inode_check>
c010ff19:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff1c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff1f:	8b 40 30             	mov    0x30(%eax),%eax
c010ff22:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ff25:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ff2c:	00 
c010ff2d:	89 14 24             	mov    %edx,(%esp)
c010ff30:	ff d0                	call   *%eax
c010ff32:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ff35:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ff39:	74 1b                	je     c010ff56 <vfs_open+0x2dd>
            vop_open_dec(node);
c010ff3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ff3e:	89 04 24             	mov    %eax,(%esp)
c010ff41:	e8 73 f1 ff ff       	call   c010f0b9 <inode_open_dec>
            vop_ref_dec(node);
c010ff46:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ff49:	89 04 24             	mov    %eax,(%esp)
c010ff4c:	e8 61 f0 ff ff       	call   c010efb2 <inode_ref_dec>
            return ret;
c010ff51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ff54:	eb 0d                	jmp    c010ff63 <vfs_open+0x2ea>
        }
    }
    *node_store = node;
c010ff56:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ff59:	8b 45 10             	mov    0x10(%ebp),%eax
c010ff5c:	89 10                	mov    %edx,(%eax)
    return 0;
c010ff5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff63:	83 c4 44             	add    $0x44,%esp
c010ff66:	5b                   	pop    %ebx
c010ff67:	5d                   	pop    %ebp
c010ff68:	c3                   	ret    

c010ff69 <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c010ff69:	55                   	push   %ebp
c010ff6a:	89 e5                	mov    %esp,%ebp
c010ff6c:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c010ff6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff72:	89 04 24             	mov    %eax,(%esp)
c010ff75:	e8 3f f1 ff ff       	call   c010f0b9 <inode_open_dec>
    vop_ref_dec(node);
c010ff7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff7d:	89 04 24             	mov    %eax,(%esp)
c010ff80:	e8 2d f0 ff ff       	call   c010efb2 <inode_ref_dec>
    return 0;
c010ff85:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff8a:	c9                   	leave  
c010ff8b:	c3                   	ret    

c010ff8c <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c010ff8c:	55                   	push   %ebp
c010ff8d:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ff8f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ff94:	5d                   	pop    %ebp
c010ff95:	c3                   	ret    

c010ff96 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c010ff96:	55                   	push   %ebp
c010ff97:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ff99:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ff9e:	5d                   	pop    %ebp
c010ff9f:	c3                   	ret    

c010ffa0 <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c010ffa0:	55                   	push   %ebp
c010ffa1:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffa3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffa8:	5d                   	pop    %ebp
c010ffa9:	c3                   	ret    

c010ffaa <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c010ffaa:	55                   	push   %ebp
c010ffab:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffad:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffb2:	5d                   	pop    %ebp
c010ffb3:	c3                   	ret    

c010ffb4 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c010ffb4:	55                   	push   %ebp
c010ffb5:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffb7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffbc:	5d                   	pop    %ebp
c010ffbd:	c3                   	ret    

c010ffbe <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c010ffbe:	55                   	push   %ebp
c010ffbf:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffc1:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffc6:	5d                   	pop    %ebp
c010ffc7:	c3                   	ret    

c010ffc8 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c010ffc8:	55                   	push   %ebp
c010ffc9:	89 e5                	mov    %esp,%ebp
c010ffcb:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c010ffce:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c010ffd5:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c010ffdc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ffe3:	eb 32                	jmp    c0110017 <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c010ffe5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ffe8:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffeb:	01 d0                	add    %edx,%eax
c010ffed:	0f b6 00             	movzbl (%eax),%eax
c010fff0:	3c 3a                	cmp    $0x3a,%al
c010fff2:	75 08                	jne    c010fffc <get_device+0x34>
c010fff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fff7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fffa:	eb 2a                	jmp    c0110026 <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c010fffc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ffff:	8b 45 08             	mov    0x8(%ebp),%eax
c0110002:	01 d0                	add    %edx,%eax
c0110004:	0f b6 00             	movzbl (%eax),%eax
c0110007:	3c 2f                	cmp    $0x2f,%al
c0110009:	75 08                	jne    c0110013 <get_device+0x4b>
c011000b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011000e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110011:	eb 13                	jmp    c0110026 <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c0110013:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110017:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011001a:	8b 45 08             	mov    0x8(%ebp),%eax
c011001d:	01 d0                	add    %edx,%eax
c011001f:	0f b6 00             	movzbl (%eax),%eax
c0110022:	84 c0                	test   %al,%al
c0110024:	75 bf                	jne    c010ffe5 <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c0110026:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011002a:	79 1e                	jns    c011004a <get_device+0x82>
c011002c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110030:	74 18                	je     c011004a <get_device+0x82>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c0110032:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110035:	8b 55 08             	mov    0x8(%ebp),%edx
c0110038:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c011003a:	8b 45 10             	mov    0x10(%ebp),%eax
c011003d:	89 04 24             	mov    %eax,(%esp)
c0110040:	e8 ae 02 00 00       	call   c01102f3 <vfs_get_curdir>
c0110045:	e9 26 01 00 00       	jmp    c0110170 <get_device+0x1a8>
    }
    if (colon > 0) {
c011004a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011004e:	7e 42                	jle    c0110092 <get_device+0xca>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c0110050:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110053:	8b 45 08             	mov    0x8(%ebp),%eax
c0110056:	01 d0                	add    %edx,%eax
c0110058:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c011005b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c011005f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110062:	8b 45 08             	mov    0x8(%ebp),%eax
c0110065:	01 d0                	add    %edx,%eax
c0110067:	0f b6 00             	movzbl (%eax),%eax
c011006a:	3c 2f                	cmp    $0x2f,%al
c011006c:	74 ed                	je     c011005b <get_device+0x93>
        *subpath = path + colon;
c011006e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110071:	8b 45 08             	mov    0x8(%ebp),%eax
c0110074:	01 c2                	add    %eax,%edx
c0110076:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110079:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c011007b:	8b 45 10             	mov    0x10(%ebp),%eax
c011007e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110082:	8b 45 08             	mov    0x8(%ebp),%eax
c0110085:	89 04 24             	mov    %eax,(%esp)
c0110088:	e8 61 f4 ff ff       	call   c010f4ee <vfs_get_root>
c011008d:	e9 de 00 00 00       	jmp    c0110170 <get_device+0x1a8>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c0110092:	8b 45 08             	mov    0x8(%ebp),%eax
c0110095:	0f b6 00             	movzbl (%eax),%eax
c0110098:	3c 2f                	cmp    $0x2f,%al
c011009a:	75 20                	jne    c01100bc <get_device+0xf4>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c011009c:	8b 45 10             	mov    0x10(%ebp),%eax
c011009f:	89 04 24             	mov    %eax,(%esp)
c01100a2:	e8 18 f3 ff ff       	call   c010f3bf <vfs_get_bootfs>
c01100a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01100aa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01100ae:	0f 84 a1 00 00 00    	je     c0110155 <get_device+0x18d>
            return ret;
c01100b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01100b7:	e9 b4 00 00 00       	jmp    c0110170 <get_device+0x1a8>
        }
    }
    else {
        assert(*path == ':');
c01100bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01100bf:	0f b6 00             	movzbl (%eax),%eax
c01100c2:	3c 3a                	cmp    $0x3a,%al
c01100c4:	74 24                	je     c01100ea <get_device+0x122>
c01100c6:	c7 44 24 0c 3c 8a 11 	movl   $0xc0118a3c,0xc(%esp)
c01100cd:	c0 
c01100ce:	c7 44 24 08 49 8a 11 	movl   $0xc0118a49,0x8(%esp)
c01100d5:	c0 
c01100d6:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c01100dd:	00 
c01100de:	c7 04 24 5e 8a 11 c0 	movl   $0xc0118a5e,(%esp)
c01100e5:	e8 ca 0d ff ff       	call   c0100eb4 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c01100ea:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01100ed:	89 04 24             	mov    %eax,(%esp)
c01100f0:	e8 fe 01 00 00       	call   c01102f3 <vfs_get_curdir>
c01100f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01100f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01100fc:	74 05                	je     c0110103 <get_device+0x13b>
            return ret;
c01100fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110101:	eb 6d                	jmp    c0110170 <get_device+0x1a8>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c0110103:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110106:	8b 40 38             	mov    0x38(%eax),%eax
c0110109:	85 c0                	test   %eax,%eax
c011010b:	75 24                	jne    c0110131 <get_device+0x169>
c011010d:	c7 44 24 0c 76 8a 11 	movl   $0xc0118a76,0xc(%esp)
c0110114:	c0 
c0110115:	c7 44 24 08 49 8a 11 	movl   $0xc0118a49,0x8(%esp)
c011011c:	c0 
c011011d:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0110124:	00 
c0110125:	c7 04 24 5e 8a 11 c0 	movl   $0xc0118a5e,(%esp)
c011012c:	e8 83 0d ff ff       	call   c0100eb4 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c0110131:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110134:	8b 40 38             	mov    0x38(%eax),%eax
c0110137:	8b 40 74             	mov    0x74(%eax),%eax
c011013a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011013d:	8b 52 38             	mov    0x38(%edx),%edx
c0110140:	89 14 24             	mov    %edx,(%esp)
c0110143:	ff d0                	call   *%eax
c0110145:	8b 55 10             	mov    0x10(%ebp),%edx
c0110148:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c011014a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011014d:	89 04 24             	mov    %eax,(%esp)
c0110150:	e8 5d ee ff ff       	call   c010efb2 <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c0110155:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0110159:	8b 45 08             	mov    0x8(%ebp),%eax
c011015c:	0f b6 00             	movzbl (%eax),%eax
c011015f:	3c 2f                	cmp    $0x2f,%al
c0110161:	74 f2                	je     c0110155 <get_device+0x18d>
    *subpath = path;
c0110163:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110166:	8b 55 08             	mov    0x8(%ebp),%edx
c0110169:	89 10                	mov    %edx,(%eax)
    return 0;
c011016b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110170:	c9                   	leave  
c0110171:	c3                   	ret    

c0110172 <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c0110172:	55                   	push   %ebp
c0110173:	89 e5                	mov    %esp,%ebp
c0110175:	56                   	push   %esi
c0110176:	53                   	push   %ebx
c0110177:	83 ec 20             	sub    $0x20,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c011017a:	8b 45 08             	mov    0x8(%ebp),%eax
c011017d:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0110180:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110184:	8d 75 08             	lea    0x8(%ebp),%esi
c0110187:	89 74 24 04          	mov    %esi,0x4(%esp)
c011018b:	89 04 24             	mov    %eax,(%esp)
c011018e:	e8 35 fe ff ff       	call   c010ffc8 <get_device>
c0110193:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110196:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011019a:	74 08                	je     c01101a4 <vfs_lookup+0x32>
        return ret;
c011019c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011019f:	e9 a7 00 00 00       	jmp    c011024b <vfs_lookup+0xd9>
    }
    if (*path != '\0') {
c01101a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01101a7:	0f b6 00             	movzbl (%eax),%eax
c01101aa:	84 c0                	test   %al,%al
c01101ac:	0f 84 8c 00 00 00    	je     c011023e <vfs_lookup+0xcc>
        ret = vop_lookup(node, path, node_store);
c01101b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01101b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01101b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01101bc:	74 17                	je     c01101d5 <vfs_lookup+0x63>
c01101be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01101c1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101c4:	85 c0                	test   %eax,%eax
c01101c6:	74 0d                	je     c01101d5 <vfs_lookup+0x63>
c01101c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01101cb:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101ce:	8b 40 38             	mov    0x38(%eax),%eax
c01101d1:	85 c0                	test   %eax,%eax
c01101d3:	75 24                	jne    c01101f9 <vfs_lookup+0x87>
c01101d5:	c7 44 24 0c 8c 8a 11 	movl   $0xc0118a8c,0xc(%esp)
c01101dc:	c0 
c01101dd:	c7 44 24 08 49 8a 11 	movl   $0xc0118a49,0x8(%esp)
c01101e4:	c0 
c01101e5:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c01101ec:	00 
c01101ed:	c7 04 24 5e 8a 11 c0 	movl   $0xc0118a5e,(%esp)
c01101f4:	e8 bb 0c ff ff       	call   c0100eb4 <__panic>
c01101f9:	c7 44 24 04 db 8a 11 	movl   $0xc0118adb,0x4(%esp)
c0110200:	c0 
c0110201:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110204:	89 04 24             	mov    %eax,(%esp)
c0110207:	e8 94 ef ff ff       	call   c010f1a0 <inode_check>
c011020c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011020f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110212:	8b 40 38             	mov    0x38(%eax),%eax
c0110215:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0110218:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011021b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c011021e:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0110222:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110226:	89 14 24             	mov    %edx,(%esp)
c0110229:	ff d0                	call   *%eax
c011022b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c011022e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110231:	89 04 24             	mov    %eax,(%esp)
c0110234:	e8 79 ed ff ff       	call   c010efb2 <inode_ref_dec>
        return ret;
c0110239:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011023c:	eb 0d                	jmp    c011024b <vfs_lookup+0xd9>
    }
    *node_store = node;
c011023e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110241:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110244:	89 10                	mov    %edx,(%eax)
    return 0;
c0110246:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011024b:	83 c4 20             	add    $0x20,%esp
c011024e:	5b                   	pop    %ebx
c011024f:	5e                   	pop    %esi
c0110250:	5d                   	pop    %ebp
c0110251:	c3                   	ret    

c0110252 <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c0110252:	55                   	push   %ebp
c0110253:	89 e5                	mov    %esp,%ebp
c0110255:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c0110258:	8b 45 08             	mov    0x8(%ebp),%eax
c011025b:	8d 55 f0             	lea    -0x10(%ebp),%edx
c011025e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110262:	8d 4d 08             	lea    0x8(%ebp),%ecx
c0110265:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110269:	89 04 24             	mov    %eax,(%esp)
c011026c:	e8 57 fd ff ff       	call   c010ffc8 <get_device>
c0110271:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110274:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110278:	74 05                	je     c011027f <vfs_lookup_parent+0x2d>
        return ret;
c011027a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011027d:	eb 15                	jmp    c0110294 <vfs_lookup_parent+0x42>
    }
    *endp = path;
c011027f:	8b 55 08             	mov    0x8(%ebp),%edx
c0110282:	8b 45 10             	mov    0x10(%ebp),%eax
c0110285:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c0110287:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011028a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011028d:	89 10                	mov    %edx,(%eax)
    return 0;
c011028f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110294:	c9                   	leave  
c0110295:	c3                   	ret    

c0110296 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c0110296:	55                   	push   %ebp
c0110297:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c0110299:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c011029e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01102a4:	8b 00                	mov    (%eax),%eax
}
c01102a6:	5d                   	pop    %ebp
c01102a7:	c3                   	ret    

c01102a8 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c01102a8:	55                   	push   %ebp
c01102a9:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c01102ab:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01102b0:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01102b6:	8b 55 08             	mov    0x8(%ebp),%edx
c01102b9:	89 10                	mov    %edx,(%eax)
}
c01102bb:	5d                   	pop    %ebp
c01102bc:	c3                   	ret    

c01102bd <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c01102bd:	55                   	push   %ebp
c01102be:	89 e5                	mov    %esp,%ebp
c01102c0:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c01102c3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01102c8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01102ce:	89 04 24             	mov    %eax,(%esp)
c01102d1:	e8 be ac ff ff       	call   c010af94 <lock_files>
}
c01102d6:	c9                   	leave  
c01102d7:	c3                   	ret    

c01102d8 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c01102d8:	55                   	push   %ebp
c01102d9:	89 e5                	mov    %esp,%ebp
c01102db:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c01102de:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01102e3:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01102e9:	89 04 24             	mov    %eax,(%esp)
c01102ec:	e8 b9 ac ff ff       	call   c010afaa <unlock_files>
}
c01102f1:	c9                   	leave  
c01102f2:	c3                   	ret    

c01102f3 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c01102f3:	55                   	push   %ebp
c01102f4:	89 e5                	mov    %esp,%ebp
c01102f6:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c01102f9:	e8 98 ff ff ff       	call   c0110296 <get_cwd_nolock>
c01102fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110301:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110305:	74 1a                	je     c0110321 <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c0110307:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011030a:	89 04 24             	mov    %eax,(%esp)
c011030d:	e8 86 ec ff ff       	call   c010ef98 <inode_ref_inc>
        *dir_store = node;
c0110312:	8b 45 08             	mov    0x8(%ebp),%eax
c0110315:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110318:	89 10                	mov    %edx,(%eax)
        return 0;
c011031a:	b8 00 00 00 00       	mov    $0x0,%eax
c011031f:	eb 05                	jmp    c0110326 <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c0110321:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0110326:	c9                   	leave  
c0110327:	c3                   	ret    

c0110328 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c0110328:	55                   	push   %ebp
c0110329:	89 e5                	mov    %esp,%ebp
c011032b:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c011032e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c0110335:	e8 83 ff ff ff       	call   c01102bd <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c011033a:	e8 57 ff ff ff       	call   c0110296 <get_cwd_nolock>
c011033f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110342:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110345:	3b 45 08             	cmp    0x8(%ebp),%eax
c0110348:	0f 84 c7 00 00 00    	je     c0110415 <vfs_set_curdir+0xed>
        if (dir != NULL) {
c011034e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110352:	0f 84 a1 00 00 00    	je     c01103f9 <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c0110358:	8b 45 08             	mov    0x8(%ebp),%eax
c011035b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011035e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110362:	74 17                	je     c011037b <vfs_set_curdir+0x53>
c0110364:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110367:	8b 40 3c             	mov    0x3c(%eax),%eax
c011036a:	85 c0                	test   %eax,%eax
c011036c:	74 0d                	je     c011037b <vfs_set_curdir+0x53>
c011036e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110371:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110374:	8b 40 28             	mov    0x28(%eax),%eax
c0110377:	85 c0                	test   %eax,%eax
c0110379:	75 24                	jne    c011039f <vfs_set_curdir+0x77>
c011037b:	c7 44 24 0c e4 8a 11 	movl   $0xc0118ae4,0xc(%esp)
c0110382:	c0 
c0110383:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c011038a:	c0 
c011038b:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c0110392:	00 
c0110393:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c011039a:	e8 15 0b ff ff       	call   c0100eb4 <__panic>
c011039f:	c7 44 24 04 5f 8b 11 	movl   $0xc0118b5f,0x4(%esp)
c01103a6:	c0 
c01103a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01103aa:	89 04 24             	mov    %eax,(%esp)
c01103ad:	e8 ee ed ff ff       	call   c010f1a0 <inode_check>
c01103b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01103b5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01103b8:	8b 40 28             	mov    0x28(%eax),%eax
c01103bb:	8d 55 e8             	lea    -0x18(%ebp),%edx
c01103be:	89 54 24 04          	mov    %edx,0x4(%esp)
c01103c2:	8b 55 08             	mov    0x8(%ebp),%edx
c01103c5:	89 14 24             	mov    %edx,(%esp)
c01103c8:	ff d0                	call   *%eax
c01103ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01103cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01103d1:	74 02                	je     c01103d5 <vfs_set_curdir+0xad>
                goto out;
c01103d3:	eb 40                	jmp    c0110415 <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c01103d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01103d8:	25 00 70 00 00       	and    $0x7000,%eax
c01103dd:	3d 00 20 00 00       	cmp    $0x2000,%eax
c01103e2:	74 0a                	je     c01103ee <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c01103e4:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c01103eb:	90                   	nop
c01103ec:	eb 27                	jmp    c0110415 <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c01103ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01103f1:	89 04 24             	mov    %eax,(%esp)
c01103f4:	e8 9f eb ff ff       	call   c010ef98 <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c01103f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01103fc:	89 04 24             	mov    %eax,(%esp)
c01103ff:	e8 a4 fe ff ff       	call   c01102a8 <set_cwd_nolock>
        if (old_dir != NULL) {
c0110404:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110408:	74 0b                	je     c0110415 <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c011040a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011040d:	89 04 24             	mov    %eax,(%esp)
c0110410:	e8 9d eb ff ff       	call   c010efb2 <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c0110415:	e8 be fe ff ff       	call   c01102d8 <unlock_cfs>
    return ret;
c011041a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011041d:	c9                   	leave  
c011041e:	c3                   	ret    

c011041f <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c011041f:	55                   	push   %ebp
c0110420:	89 e5                	mov    %esp,%ebp
c0110422:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c0110425:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0110428:	89 44 24 04          	mov    %eax,0x4(%esp)
c011042c:	8b 45 08             	mov    0x8(%ebp),%eax
c011042f:	89 04 24             	mov    %eax,(%esp)
c0110432:	e8 3b fd ff ff       	call   c0110172 <vfs_lookup>
c0110437:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011043a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011043e:	75 19                	jne    c0110459 <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c0110440:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110443:	89 04 24             	mov    %eax,(%esp)
c0110446:	e8 dd fe ff ff       	call   c0110328 <vfs_set_curdir>
c011044b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c011044e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110451:	89 04 24             	mov    %eax,(%esp)
c0110454:	e8 59 eb ff ff       	call   c010efb2 <inode_ref_dec>
    }
    return ret;
c0110459:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011045c:	c9                   	leave  
c011045d:	c3                   	ret    

c011045e <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c011045e:	55                   	push   %ebp
c011045f:	89 e5                	mov    %esp,%ebp
c0110461:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c0110464:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110467:	89 04 24             	mov    %eax,(%esp)
c011046a:	e8 84 fe ff ff       	call   c01102f3 <vfs_get_curdir>
c011046f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110472:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110476:	74 08                	je     c0110480 <vfs_getcwd+0x22>
        return ret;
c0110478:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011047b:	e9 3a 01 00 00       	jmp    c01105ba <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c0110480:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110483:	8b 40 38             	mov    0x38(%eax),%eax
c0110486:	85 c0                	test   %eax,%eax
c0110488:	75 24                	jne    c01104ae <vfs_getcwd+0x50>
c011048a:	c7 44 24 0c 67 8b 11 	movl   $0xc0118b67,0xc(%esp)
c0110491:	c0 
c0110492:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c0110499:	c0 
c011049a:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c01104a1:	00 
c01104a2:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c01104a9:	e8 06 0a ff ff       	call   c0100eb4 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c01104ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104b1:	8b 40 38             	mov    0x38(%eax),%eax
c01104b4:	89 04 24             	mov    %eax,(%esp)
c01104b7:	e8 4f f1 ff ff       	call   c010f60b <vfs_get_devname>
c01104bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c01104bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104c2:	89 04 24             	mov    %eax,(%esp)
c01104c5:	e8 d8 4b 00 00       	call   c01150a2 <strlen>
c01104ca:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01104d1:	00 
c01104d2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01104d9:	00 
c01104da:	89 44 24 08          	mov    %eax,0x8(%esp)
c01104de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01104e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01104e8:	89 04 24             	mov    %eax,(%esp)
c01104eb:	e8 9c ad ff ff       	call   c010b28c <iobuf_move>
c01104f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104f7:	74 05                	je     c01104fe <vfs_getcwd+0xa0>
        goto out;
c01104f9:	e9 ae 00 00 00       	jmp    c01105ac <vfs_getcwd+0x14e>
    }
    char colon = ':';
c01104fe:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c0110502:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0110509:	00 
c011050a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110511:	00 
c0110512:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110519:	00 
c011051a:	8d 45 e7             	lea    -0x19(%ebp),%eax
c011051d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110521:	8b 45 08             	mov    0x8(%ebp),%eax
c0110524:	89 04 24             	mov    %eax,(%esp)
c0110527:	e8 60 ad ff ff       	call   c010b28c <iobuf_move>
c011052c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011052f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110533:	74 02                	je     c0110537 <vfs_getcwd+0xd9>
        goto out;
c0110535:	eb 75                	jmp    c01105ac <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c0110537:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011053a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011053d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110541:	74 17                	je     c011055a <vfs_getcwd+0xfc>
c0110543:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110546:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110549:	85 c0                	test   %eax,%eax
c011054b:	74 0d                	je     c011055a <vfs_getcwd+0xfc>
c011054d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110550:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110553:	8b 40 1c             	mov    0x1c(%eax),%eax
c0110556:	85 c0                	test   %eax,%eax
c0110558:	75 24                	jne    c011057e <vfs_getcwd+0x120>
c011055a:	c7 44 24 0c 7c 8b 11 	movl   $0xc0118b7c,0xc(%esp)
c0110561:	c0 
c0110562:	c7 44 24 08 34 8b 11 	movl   $0xc0118b34,0x8(%esp)
c0110569:	c0 
c011056a:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0110571:	00 
c0110572:	c7 04 24 49 8b 11 c0 	movl   $0xc0118b49,(%esp)
c0110579:	e8 36 09 ff ff       	call   c0100eb4 <__panic>
c011057e:	c7 44 24 04 cd 8b 11 	movl   $0xc0118bcd,0x4(%esp)
c0110585:	c0 
c0110586:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110589:	89 04 24             	mov    %eax,(%esp)
c011058c:	e8 0f ec ff ff       	call   c010f1a0 <inode_check>
c0110591:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110594:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110597:	8b 40 1c             	mov    0x1c(%eax),%eax
c011059a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011059d:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01105a0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01105a4:	89 14 24             	mov    %edx,(%esp)
c01105a7:	ff d0                	call   *%eax
c01105a9:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c01105ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01105af:	89 04 24             	mov    %eax,(%esp)
c01105b2:	e8 fb e9 ff ff       	call   c010efb2 <inode_ref_dec>
    return ret;
c01105b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01105ba:	c9                   	leave  
c01105bb:	c3                   	ret    

c01105bc <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c01105bc:	55                   	push   %ebp
c01105bd:	89 e5                	mov    %esp,%ebp
c01105bf:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c01105c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105c5:	83 e0 3c             	and    $0x3c,%eax
c01105c8:	85 c0                	test   %eax,%eax
c01105ca:	74 07                	je     c01105d3 <dev_open+0x17>
        return -E_INVAL;
c01105cc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01105d1:	eb 58                	jmp    c011062b <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c01105d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01105d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01105d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01105dd:	74 0d                	je     c01105ec <dev_open+0x30>
c01105df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01105e2:	8b 40 2c             	mov    0x2c(%eax),%eax
c01105e5:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01105ea:	74 24                	je     c0110610 <dev_open+0x54>
c01105ec:	c7 44 24 0c e0 8b 11 	movl   $0xc0118be0,0xc(%esp)
c01105f3:	c0 
c01105f4:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c01105fb:	c0 
c01105fc:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0110603:	00 
c0110604:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c011060b:	e8 a4 08 ff ff       	call   c0100eb4 <__panic>
c0110610:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110613:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c0110616:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110619:	8b 40 08             	mov    0x8(%eax),%eax
c011061c:	8b 55 0c             	mov    0xc(%ebp),%edx
c011061f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110623:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110626:	89 14 24             	mov    %edx,(%esp)
c0110629:	ff d0                	call   *%eax
}
c011062b:	c9                   	leave  
c011062c:	c3                   	ret    

c011062d <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c011062d:	55                   	push   %ebp
c011062e:	89 e5                	mov    %esp,%ebp
c0110630:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110633:	8b 45 08             	mov    0x8(%ebp),%eax
c0110636:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110639:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011063d:	74 0d                	je     c011064c <dev_close+0x1f>
c011063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110642:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110645:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011064a:	74 24                	je     c0110670 <dev_close+0x43>
c011064c:	c7 44 24 0c e0 8b 11 	movl   $0xc0118be0,0xc(%esp)
c0110653:	c0 
c0110654:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c011065b:	c0 
c011065c:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0110663:	00 
c0110664:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c011066b:	e8 44 08 ff ff       	call   c0100eb4 <__panic>
c0110670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110673:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c0110676:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110679:	8b 40 0c             	mov    0xc(%eax),%eax
c011067c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011067f:	89 14 24             	mov    %edx,(%esp)
c0110682:	ff d0                	call   *%eax
}
c0110684:	c9                   	leave  
c0110685:	c3                   	ret    

c0110686 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c0110686:	55                   	push   %ebp
c0110687:	89 e5                	mov    %esp,%ebp
c0110689:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011068c:	8b 45 08             	mov    0x8(%ebp),%eax
c011068f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110692:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110696:	74 0d                	je     c01106a5 <dev_read+0x1f>
c0110698:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011069b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011069e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01106a3:	74 24                	je     c01106c9 <dev_read+0x43>
c01106a5:	c7 44 24 0c e0 8b 11 	movl   $0xc0118be0,0xc(%esp)
c01106ac:	c0 
c01106ad:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c01106b4:	c0 
c01106b5:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c01106bc:	00 
c01106bd:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c01106c4:	e8 eb 07 ff ff       	call   c0100eb4 <__panic>
c01106c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c01106cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106d2:	8b 40 10             	mov    0x10(%eax),%eax
c01106d5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01106dc:	00 
c01106dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01106e0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01106e4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01106e7:	89 14 24             	mov    %edx,(%esp)
c01106ea:	ff d0                	call   *%eax
}
c01106ec:	c9                   	leave  
c01106ed:	c3                   	ret    

c01106ee <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c01106ee:	55                   	push   %ebp
c01106ef:	89 e5                	mov    %esp,%ebp
c01106f1:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01106f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01106f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106fe:	74 0d                	je     c011070d <dev_write+0x1f>
c0110700:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110703:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110706:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011070b:	74 24                	je     c0110731 <dev_write+0x43>
c011070d:	c7 44 24 0c e0 8b 11 	movl   $0xc0118be0,0xc(%esp)
c0110714:	c0 
c0110715:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c011071c:	c0 
c011071d:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0110724:	00 
c0110725:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c011072c:	e8 83 07 ff ff       	call   c0100eb4 <__panic>
c0110731:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110734:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c0110737:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011073a:	8b 40 10             	mov    0x10(%eax),%eax
c011073d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110744:	00 
c0110745:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110748:	89 54 24 04          	mov    %edx,0x4(%esp)
c011074c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011074f:	89 14 24             	mov    %edx,(%esp)
c0110752:	ff d0                	call   *%eax
}
c0110754:	c9                   	leave  
c0110755:	c3                   	ret    

c0110756 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c0110756:	55                   	push   %ebp
c0110757:	89 e5                	mov    %esp,%ebp
c0110759:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011075c:	8b 45 08             	mov    0x8(%ebp),%eax
c011075f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110762:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110766:	74 0d                	je     c0110775 <dev_ioctl+0x1f>
c0110768:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011076b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011076e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110773:	74 24                	je     c0110799 <dev_ioctl+0x43>
c0110775:	c7 44 24 0c e0 8b 11 	movl   $0xc0118be0,0xc(%esp)
c011077c:	c0 
c011077d:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c0110784:	c0 
c0110785:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c011078c:	00 
c011078d:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c0110794:	e8 1b 07 ff ff       	call   c0100eb4 <__panic>
c0110799:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011079c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c011079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107a2:	8b 40 14             	mov    0x14(%eax),%eax
c01107a5:	8b 55 10             	mov    0x10(%ebp),%edx
c01107a8:	89 54 24 08          	mov    %edx,0x8(%esp)
c01107ac:	8b 55 0c             	mov    0xc(%ebp),%edx
c01107af:	89 54 24 04          	mov    %edx,0x4(%esp)
c01107b3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01107b6:	89 14 24             	mov    %edx,(%esp)
c01107b9:	ff d0                	call   *%eax
}
c01107bb:	c9                   	leave  
c01107bc:	c3                   	ret    

c01107bd <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c01107bd:	55                   	push   %ebp
c01107be:	89 e5                	mov    %esp,%ebp
c01107c0:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c01107c3:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01107ca:	00 
c01107cb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01107d2:	00 
c01107d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01107d6:	89 04 24             	mov    %eax,(%esp)
c01107d9:	e8 1a 4c 00 00       	call   c01153f8 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c01107de:	8b 45 08             	mov    0x8(%ebp),%eax
c01107e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01107e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01107e8:	74 17                	je     c0110801 <dev_fstat+0x44>
c01107ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107ed:	8b 40 3c             	mov    0x3c(%eax),%eax
c01107f0:	85 c0                	test   %eax,%eax
c01107f2:	74 0d                	je     c0110801 <dev_fstat+0x44>
c01107f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107f7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01107fa:	8b 40 28             	mov    0x28(%eax),%eax
c01107fd:	85 c0                	test   %eax,%eax
c01107ff:	75 24                	jne    c0110825 <dev_fstat+0x68>
c0110801:	c7 44 24 0c 3c 8c 11 	movl   $0xc0118c3c,0xc(%esp)
c0110808:	c0 
c0110809:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c0110810:	c0 
c0110811:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0110818:	00 
c0110819:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c0110820:	e8 8f 06 ff ff       	call   c0100eb4 <__panic>
c0110825:	c7 44 24 04 8c 8c 11 	movl   $0xc0118c8c,0x4(%esp)
c011082c:	c0 
c011082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110830:	89 04 24             	mov    %eax,(%esp)
c0110833:	e8 68 e9 ff ff       	call   c010f1a0 <inode_check>
c0110838:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011083b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011083e:	8b 40 28             	mov    0x28(%eax),%eax
c0110841:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110844:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110848:	8b 55 08             	mov    0x8(%ebp),%edx
c011084b:	89 14 24             	mov    %edx,(%esp)
c011084e:	ff d0                	call   *%eax
c0110850:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110853:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110857:	74 05                	je     c011085e <dev_fstat+0xa1>
        return ret;
c0110859:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011085c:	eb 72                	jmp    c01108d0 <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c011085e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110861:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110864:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110868:	74 0d                	je     c0110877 <dev_fstat+0xba>
c011086a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011086d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110870:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110875:	74 24                	je     c011089b <dev_fstat+0xde>
c0110877:	c7 44 24 0c e0 8b 11 	movl   $0xc0118be0,0xc(%esp)
c011087e:	c0 
c011087f:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c0110886:	c0 
c0110887:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c011088e:	00 
c011088f:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c0110896:	e8 19 06 ff ff       	call   c0100eb4 <__panic>
c011089b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011089e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c01108a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108a4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c01108ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01108ae:	8b 10                	mov    (%eax),%edx
c01108b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108b3:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c01108b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108b9:	8b 50 08             	mov    0x8(%eax),%edx
c01108bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01108bf:	8b 40 04             	mov    0x4(%eax),%eax
c01108c2:	0f af d0             	imul   %eax,%edx
c01108c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108c8:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01108cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01108d0:	c9                   	leave  
c01108d1:	c3                   	ret    

c01108d2 <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c01108d2:	55                   	push   %ebp
c01108d3:	89 e5                	mov    %esp,%ebp
c01108d5:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01108d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01108db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01108de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01108e2:	74 0d                	je     c01108f1 <dev_gettype+0x1f>
c01108e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108e7:	8b 40 2c             	mov    0x2c(%eax),%eax
c01108ea:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01108ef:	74 24                	je     c0110915 <dev_gettype+0x43>
c01108f1:	c7 44 24 0c e0 8b 11 	movl   $0xc0118be0,0xc(%esp)
c01108f8:	c0 
c01108f9:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c0110900:	c0 
c0110901:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0110908:	00 
c0110909:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c0110910:	e8 9f 05 ff ff       	call   c0100eb4 <__panic>
c0110915:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110918:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c011091b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011091e:	8b 00                	mov    (%eax),%eax
c0110920:	85 c0                	test   %eax,%eax
c0110922:	74 07                	je     c011092b <dev_gettype+0x59>
c0110924:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110929:	eb 05                	jmp    c0110930 <dev_gettype+0x5e>
c011092b:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110930:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110933:	89 02                	mov    %eax,(%edx)
    return 0;
c0110935:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011093a:	c9                   	leave  
c011093b:	c3                   	ret    

c011093c <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c011093c:	55                   	push   %ebp
c011093d:	89 e5                	mov    %esp,%ebp
c011093f:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110942:	8b 45 08             	mov    0x8(%ebp),%eax
c0110945:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110948:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011094c:	74 0d                	je     c011095b <dev_tryseek+0x1f>
c011094e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110951:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110954:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110959:	74 24                	je     c011097f <dev_tryseek+0x43>
c011095b:	c7 44 24 0c e0 8b 11 	movl   $0xc0118be0,0xc(%esp)
c0110962:	c0 
c0110963:	c7 44 24 08 13 8c 11 	movl   $0xc0118c13,0x8(%esp)
c011096a:	c0 
c011096b:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0110972:	00 
c0110973:	c7 04 24 28 8c 11 c0 	movl   $0xc0118c28,(%esp)
c011097a:	e8 35 05 ff ff       	call   c0100eb4 <__panic>
c011097f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110982:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c0110985:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110988:	8b 00                	mov    (%eax),%eax
c011098a:	85 c0                	test   %eax,%eax
c011098c:	74 38                	je     c01109c6 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c011098e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110991:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110994:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110997:	ba 00 00 00 00       	mov    $0x0,%edx
c011099c:	f7 f1                	div    %ecx
c011099e:	89 d0                	mov    %edx,%eax
c01109a0:	85 c0                	test   %eax,%eax
c01109a2:	75 22                	jne    c01109c6 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c01109a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01109a8:	78 1c                	js     c01109c6 <dev_tryseek+0x8a>
c01109aa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01109ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109b0:	8b 08                	mov    (%eax),%ecx
c01109b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109b5:	8b 40 04             	mov    0x4(%eax),%eax
c01109b8:	0f af c1             	imul   %ecx,%eax
c01109bb:	39 c2                	cmp    %eax,%edx
c01109bd:	73 07                	jae    c01109c6 <dev_tryseek+0x8a>
                return 0;
c01109bf:	b8 00 00 00 00       	mov    $0x0,%eax
c01109c4:	eb 05                	jmp    c01109cb <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c01109c6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01109cb:	c9                   	leave  
c01109cc:	c3                   	ret    

c01109cd <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c01109cd:	55                   	push   %ebp
c01109ce:	89 e5                	mov    %esp,%ebp
c01109d0:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c01109d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01109d6:	0f b6 00             	movzbl (%eax),%eax
c01109d9:	84 c0                	test   %al,%al
c01109db:	74 07                	je     c01109e4 <dev_lookup+0x17>
        return -E_NOENT;
c01109dd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c01109e2:	eb 18                	jmp    c01109fc <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c01109e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01109e7:	89 04 24             	mov    %eax,(%esp)
c01109ea:	e8 a9 e5 ff ff       	call   c010ef98 <inode_ref_inc>
    *node_store = node;
c01109ef:	8b 45 10             	mov    0x10(%ebp),%eax
c01109f2:	8b 55 08             	mov    0x8(%ebp),%edx
c01109f5:	89 10                	mov    %edx,(%eax)
    return 0;
c01109f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01109fc:	c9                   	leave  
c01109fd:	c3                   	ret    

c01109fe <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c01109fe:	55                   	push   %ebp
c01109ff:	89 e5                	mov    %esp,%ebp
c0110a01:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110a04:	e8 8f 07 00 00       	call   c0111198 <dev_init_stdin>
    init_device(stdout);
c0110a09:	e8 0a 09 00 00       	call   c0111318 <dev_init_stdout>
    init_device(disk0);
c0110a0e:	e8 26 04 00 00       	call   c0110e39 <dev_init_disk0>
}
c0110a13:	c9                   	leave  
c0110a14:	c3                   	ret    

c0110a15 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110a15:	55                   	push   %ebp
c0110a16:	89 e5                	mov    %esp,%ebp
c0110a18:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110a1b:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110a22:	e8 96 e4 ff ff       	call   c010eebd <__alloc_inode>
c0110a27:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a2e:	74 1b                	je     c0110a4b <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110a30:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110a37:	00 
c0110a38:	c7 44 24 04 a0 8c 11 	movl   $0xc0118ca0,0x4(%esp)
c0110a3f:	c0 
c0110a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a43:	89 04 24             	mov    %eax,(%esp)
c0110a46:	e8 9b e4 ff ff       	call   c010eee6 <inode_init>
    }
    return node;
c0110a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110a4e:	c9                   	leave  
c0110a4f:	c3                   	ret    

c0110a50 <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110a50:	55                   	push   %ebp
c0110a51:	89 e5                	mov    %esp,%ebp
c0110a53:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110a56:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110a5d:	e8 b5 91 ff ff       	call   c0109c17 <down>
}
c0110a62:	c9                   	leave  
c0110a63:	c3                   	ret    

c0110a64 <unlock_disk0>:

static void
unlock_disk0(void) {
c0110a64:	55                   	push   %ebp
c0110a65:	89 e5                	mov    %esp,%ebp
c0110a67:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110a6a:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110a71:	e8 86 91 ff ff       	call   c0109bfc <up>
}
c0110a76:	c9                   	leave  
c0110a77:	c3                   	ret    

c0110a78 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110a78:	55                   	push   %ebp
c0110a79:	89 e5                	mov    %esp,%ebp
    return 0;
c0110a7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a80:	5d                   	pop    %ebp
c0110a81:	c3                   	ret    

c0110a82 <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110a82:	55                   	push   %ebp
c0110a83:	89 e5                	mov    %esp,%ebp
    return 0;
c0110a85:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a8a:	5d                   	pop    %ebp
c0110a8b:	c3                   	ret    

c0110a8c <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110a8c:	55                   	push   %ebp
c0110a8d:	89 e5                	mov    %esp,%ebp
c0110a8f:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110a92:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a95:	c1 e0 03             	shl    $0x3,%eax
c0110a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a9e:	c1 e0 03             	shl    $0x3,%eax
c0110aa1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110aa4:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110aa9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110aac:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110ab0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ab7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110abb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110ac2:	e8 c5 11 ff ff       	call   c0101c8c <ide_read_secs>
c0110ac7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110aca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110ace:	74 3f                	je     c0110b0f <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110ad0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ad3:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110ad7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ada:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110ade:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ae1:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ae8:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110aec:	8b 45 08             	mov    0x8(%ebp),%eax
c0110aef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110af3:	c7 44 24 08 e0 8c 11 	movl   $0xc0118ce0,0x8(%esp)
c0110afa:	c0 
c0110afb:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0110b02:	00 
c0110b03:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110b0a:	e8 a5 03 ff ff       	call   c0100eb4 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110b0f:	c9                   	leave  
c0110b10:	c3                   	ret    

c0110b11 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110b11:	55                   	push   %ebp
c0110b12:	89 e5                	mov    %esp,%ebp
c0110b14:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110b17:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b1a:	c1 e0 03             	shl    $0x3,%eax
c0110b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110b20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b23:	c1 e0 03             	shl    $0x3,%eax
c0110b26:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110b29:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110b2e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110b31:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110b35:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110b40:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110b47:	e8 82 13 ff ff       	call   c0101ece <ide_write_secs>
c0110b4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110b4f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110b53:	74 3f                	je     c0110b94 <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110b55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b58:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110b5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b5f:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110b63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b66:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b6d:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110b71:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b74:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110b78:	c7 44 24 08 44 8d 11 	movl   $0xc0118d44,0x8(%esp)
c0110b7f:	c0 
c0110b80:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c0110b87:	00 
c0110b88:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110b8f:	e8 20 03 ff ff       	call   c0100eb4 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110b94:	c9                   	leave  
c0110b95:	c3                   	ret    

c0110b96 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110b96:	55                   	push   %ebp
c0110b97:	89 e5                	mov    %esp,%ebp
c0110b99:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b9f:	8b 40 04             	mov    0x4(%eax),%eax
c0110ba2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110ba5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ba8:	8b 40 0c             	mov    0xc(%eax),%eax
c0110bab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110bae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110bb1:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110bb7:	85 c0                	test   %eax,%eax
c0110bb9:	0f 48 c2             	cmovs  %edx,%eax
c0110bbc:	c1 f8 0c             	sar    $0xc,%eax
c0110bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bc5:	c1 e8 0c             	shr    $0xc,%eax
c0110bc8:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110bcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110bce:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110bd3:	85 c0                	test   %eax,%eax
c0110bd5:	75 0c                	jne    c0110be3 <disk0_io+0x4d>
c0110bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bda:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110bdf:	85 c0                	test   %eax,%eax
c0110be1:	74 0a                	je     c0110bed <disk0_io+0x57>
        return -E_INVAL;
c0110be3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110be8:	e9 7a 01 00 00       	jmp    c0110d67 <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110bed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110bf0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110bf3:	01 c2                	add    %eax,%edx
c0110bf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0110bf8:	8b 00                	mov    (%eax),%eax
c0110bfa:	39 c2                	cmp    %eax,%edx
c0110bfc:	76 0a                	jbe    c0110c08 <disk0_io+0x72>
        return -E_INVAL;
c0110bfe:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110c03:	e9 5f 01 00 00       	jmp    c0110d67 <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110c08:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110c0c:	75 0a                	jne    c0110c18 <disk0_io+0x82>
        return 0;
c0110c0e:	b8 00 00 00 00       	mov    $0x0,%eax
c0110c13:	e9 4f 01 00 00       	jmp    c0110d67 <disk0_io+0x1d1>
    }

    lock_disk0();
c0110c18:	e8 33 fe ff ff       	call   c0110a50 <lock_disk0>
    while (resid != 0) {
c0110c1d:	e9 31 01 00 00       	jmp    c0110d53 <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110c22:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110c29:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110c2d:	0f 84 89 00 00 00    	je     c0110cbc <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110c33:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110c38:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110c3b:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110c3f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110c46:	00 
c0110c47:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110c4a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110c4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110c52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c55:	89 04 24             	mov    %eax,(%esp)
c0110c58:	e8 2f a6 ff ff       	call   c010b28c <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110c5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c60:	85 c0                	test   %eax,%eax
c0110c62:	74 14                	je     c0110c78 <disk0_io+0xe2>
c0110c64:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c67:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110c6a:	77 0c                	ja     c0110c78 <disk0_io+0xe2>
c0110c6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c6f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110c74:	85 c0                	test   %eax,%eax
c0110c76:	74 24                	je     c0110c9c <disk0_io+0x106>
c0110c78:	c7 44 24 0c 90 8d 11 	movl   $0xc0118d90,0xc(%esp)
c0110c7f:	c0 
c0110c80:	c7 44 24 08 ce 8d 11 	movl   $0xc0118dce,0x8(%esp)
c0110c87:	c0 
c0110c88:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110c8f:	00 
c0110c90:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110c97:	e8 18 02 ff ff       	call   c0100eb4 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110c9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c9f:	c1 e8 0c             	shr    $0xc,%eax
c0110ca2:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110ca5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ca8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110cac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110caf:	89 04 24             	mov    %eax,(%esp)
c0110cb2:	e8 5a fe ff ff       	call   c0110b11 <disk0_write_blks_nolock>
c0110cb7:	e9 8b 00 00 00       	jmp    c0110d47 <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0110cbc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110cbf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110cc2:	76 06                	jbe    c0110cca <disk0_io+0x134>
                alen = resid;
c0110cc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110cc7:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110cca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110ccd:	c1 e8 0c             	shr    $0xc,%eax
c0110cd0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c0110cd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110cd6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110cda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cdd:	89 04 24             	mov    %eax,(%esp)
c0110ce0:	e8 a7 fd ff ff       	call   c0110a8c <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c0110ce5:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110cea:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110ced:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110cf1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110cf8:	00 
c0110cf9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110cfc:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110d00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d07:	89 04 24             	mov    %eax,(%esp)
c0110d0a:	e8 7d a5 ff ff       	call   c010b28c <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c0110d0f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d12:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0110d15:	75 0c                	jne    c0110d23 <disk0_io+0x18d>
c0110d17:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d1a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110d1f:	85 c0                	test   %eax,%eax
c0110d21:	74 24                	je     c0110d47 <disk0_io+0x1b1>
c0110d23:	c7 44 24 0c e4 8d 11 	movl   $0xc0118de4,0xc(%esp)
c0110d2a:	c0 
c0110d2b:	c7 44 24 08 ce 8d 11 	movl   $0xc0118dce,0x8(%esp)
c0110d32:	c0 
c0110d33:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c0110d3a:	00 
c0110d3b:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110d42:	e8 6d 01 ff ff       	call   c0100eb4 <__panic>
        }
        resid -= copied, blkno += nblks;
c0110d47:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d4a:	29 45 f4             	sub    %eax,-0xc(%ebp)
c0110d4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d50:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0110d53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110d57:	0f 85 c5 fe ff ff    	jne    c0110c22 <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c0110d5d:	e8 02 fd ff ff       	call   c0110a64 <unlock_disk0>
    return 0;
c0110d62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d67:	c9                   	leave  
c0110d68:	c3                   	ret    

c0110d69 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0110d69:	55                   	push   %ebp
c0110d6a:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110d6c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110d71:	5d                   	pop    %ebp
c0110d72:	c3                   	ret    

c0110d73 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110d73:	55                   	push   %ebp
c0110d74:	89 e5                	mov    %esp,%ebp
c0110d76:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0110d79:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110d80:	e8 89 0e ff ff       	call   c0101c0e <ide_device_valid>
c0110d85:	85 c0                	test   %eax,%eax
c0110d87:	75 1c                	jne    c0110da5 <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c0110d89:	c7 44 24 08 14 8e 11 	movl   $0xc0118e14,0x8(%esp)
c0110d90:	c0 
c0110d91:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0110d98:	00 
c0110d99:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110da0:	e8 0f 01 ff ff       	call   c0100eb4 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c0110da5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110dac:	e8 9c 0e ff ff       	call   c0101c4d <ide_device_size>
c0110db1:	c1 e8 03             	shr    $0x3,%eax
c0110db4:	89 c2                	mov    %eax,%edx
c0110db6:	8b 45 08             	mov    0x8(%ebp),%eax
c0110db9:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c0110dbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0110dbe:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c0110dc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0110dc8:	c7 40 08 78 0a 11 c0 	movl   $0xc0110a78,0x8(%eax)
    dev->d_close = disk0_close;
c0110dcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0110dd2:	c7 40 0c 82 0a 11 c0 	movl   $0xc0110a82,0xc(%eax)
    dev->d_io = disk0_io;
c0110dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ddc:	c7 40 10 96 0b 11 c0 	movl   $0xc0110b96,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c0110de3:	8b 45 08             	mov    0x8(%ebp),%eax
c0110de6:	c7 40 14 69 0d 11 c0 	movl   $0xc0110d69,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c0110ded:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0110df4:	00 
c0110df5:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110dfc:	e8 88 8c ff ff       	call   c0109a89 <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c0110e01:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c0110e08:	e8 9f 3e ff ff       	call   c0104cac <kmalloc>
c0110e0d:	a3 dc 1f 15 c0       	mov    %eax,0xc0151fdc
c0110e12:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110e17:	85 c0                	test   %eax,%eax
c0110e19:	75 1c                	jne    c0110e37 <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c0110e1b:	c7 44 24 08 33 8e 11 	movl   $0xc0118e33,0x8(%esp)
c0110e22:	c0 
c0110e23:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c0110e2a:	00 
c0110e2b:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110e32:	e8 7d 00 ff ff       	call   c0100eb4 <__panic>
    }
}
c0110e37:	c9                   	leave  
c0110e38:	c3                   	ret    

c0110e39 <dev_init_disk0>:

void
dev_init_disk0(void) {
c0110e39:	55                   	push   %ebp
c0110e3a:	89 e5                	mov    %esp,%ebp
c0110e3c:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110e3f:	e8 d1 fb ff ff       	call   c0110a15 <dev_create_inode>
c0110e44:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110e4b:	75 1c                	jne    c0110e69 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c0110e4d:	c7 44 24 08 4f 8e 11 	movl   $0xc0118e4f,0x8(%esp)
c0110e54:	c0 
c0110e55:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c0110e5c:	00 
c0110e5d:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110e64:	e8 4b 00 ff ff       	call   c0100eb4 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0110e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110e6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110e73:	74 0d                	je     c0110e82 <dev_init_disk0+0x49>
c0110e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e78:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110e7b:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110e80:	74 24                	je     c0110ea6 <dev_init_disk0+0x6d>
c0110e82:	c7 44 24 0c 68 8e 11 	movl   $0xc0118e68,0xc(%esp)
c0110e89:	c0 
c0110e8a:	c7 44 24 08 ce 8d 11 	movl   $0xc0118dce,0x8(%esp)
c0110e91:	c0 
c0110e92:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c0110e99:	00 
c0110e9a:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110ea1:	e8 0e 00 ff ff       	call   c0100eb4 <__panic>
c0110ea6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ea9:	89 04 24             	mov    %eax,(%esp)
c0110eac:	e8 c2 fe ff ff       	call   c0110d73 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0110eb1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110eb8:	00 
c0110eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ebc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110ec0:	c7 04 24 9b 8e 11 c0 	movl   $0xc0118e9b,(%esp)
c0110ec7:	e8 cb e9 ff ff       	call   c010f897 <vfs_add_dev>
c0110ecc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110ecf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110ed3:	74 23                	je     c0110ef8 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0110ed5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ed8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110edc:	c7 44 24 08 a1 8e 11 	movl   $0xc0118ea1,0x8(%esp)
c0110ee3:	c0 
c0110ee4:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c0110eeb:	00 
c0110eec:	c7 04 24 28 8d 11 c0 	movl   $0xc0118d28,(%esp)
c0110ef3:	e8 bc ff fe ff       	call   c0100eb4 <__panic>
    }
}
c0110ef8:	c9                   	leave  
c0110ef9:	c3                   	ret    

c0110efa <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0110efa:	55                   	push   %ebp
c0110efb:	89 e5                	mov    %esp,%ebp
c0110efd:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0110f00:	9c                   	pushf  
c0110f01:	58                   	pop    %eax
c0110f02:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0110f05:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0110f08:	25 00 02 00 00       	and    $0x200,%eax
c0110f0d:	85 c0                	test   %eax,%eax
c0110f0f:	74 0c                	je     c0110f1d <__intr_save+0x23>
        intr_disable();
c0110f11:	e8 00 12 ff ff       	call   c0102116 <intr_disable>
        return 1;
c0110f16:	b8 01 00 00 00       	mov    $0x1,%eax
c0110f1b:	eb 05                	jmp    c0110f22 <__intr_save+0x28>
    }
    return 0;
c0110f1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110f22:	c9                   	leave  
c0110f23:	c3                   	ret    

c0110f24 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0110f24:	55                   	push   %ebp
c0110f25:	89 e5                	mov    %esp,%ebp
c0110f27:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0110f2a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110f2e:	74 05                	je     c0110f35 <__intr_restore+0x11>
        intr_enable();
c0110f30:	e8 db 11 ff ff       	call   c0102110 <intr_enable>
    }
}
c0110f35:	c9                   	leave  
c0110f36:	c3                   	ret    

c0110f37 <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c0110f37:	55                   	push   %ebp
c0110f38:	89 e5                	mov    %esp,%ebp
c0110f3a:	83 ec 28             	sub    $0x28,%esp
c0110f3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f40:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c0110f43:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0110f47:	0f 84 80 00 00 00    	je     c0110fcd <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c0110f4d:	e8 a8 ff ff ff       	call   c0110efa <__intr_save>
c0110f52:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c0110f55:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110f5a:	99                   	cltd   
c0110f5b:	c1 ea 14             	shr    $0x14,%edx
c0110f5e:	01 d0                	add    %edx,%eax
c0110f60:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110f65:	29 d0                	sub    %edx,%eax
c0110f67:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0110f6b:	88 90 00 20 15 c0    	mov    %dl,-0x3feae000(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c0110f71:	8b 15 04 30 15 c0    	mov    0xc0153004,%edx
c0110f77:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c0110f7c:	29 c2                	sub    %eax,%edx
c0110f7e:	89 d0                	mov    %edx,%eax
c0110f80:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0110f85:	7f 0d                	jg     c0110f94 <dev_stdin_write+0x5d>
                p_wpos ++;
c0110f87:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110f8c:	83 c0 01             	add    $0x1,%eax
c0110f8f:	a3 04 30 15 c0       	mov    %eax,0xc0153004
            }
            if (!wait_queue_empty(wait_queue)) {
c0110f94:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110f99:	89 04 24             	mov    %eax,(%esp)
c0110f9c:	e8 e2 8f ff ff       	call   c0109f83 <wait_queue_empty>
c0110fa1:	85 c0                	test   %eax,%eax
c0110fa3:	75 1d                	jne    c0110fc2 <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c0110fa5:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110faa:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110fb1:	00 
c0110fb2:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c0110fb9:	80 
c0110fba:	89 04 24             	mov    %eax,(%esp)
c0110fbd:	e8 78 90 ff ff       	call   c010a03a <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c0110fc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110fc5:	89 04 24             	mov    %eax,(%esp)
c0110fc8:	e8 57 ff ff ff       	call   c0110f24 <__intr_restore>
    }
}
c0110fcd:	c9                   	leave  
c0110fce:	c3                   	ret    

c0110fcf <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c0110fcf:	55                   	push   %ebp
c0110fd0:	89 e5                	mov    %esp,%ebp
c0110fd2:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0110fd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0110fdc:	e8 19 ff ff ff       	call   c0110efa <__intr_save>
c0110fe1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0110fe4:	e9 bb 00 00 00       	jmp    c01110a4 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c0110fe9:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c0110fef:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110ff4:	39 c2                	cmp    %eax,%edx
c0110ff6:	7d 3d                	jge    c0111035 <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c0110ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ffb:	8d 50 01             	lea    0x1(%eax),%edx
c0110ffe:	89 55 08             	mov    %edx,0x8(%ebp)
c0111001:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c0111007:	89 d1                	mov    %edx,%ecx
c0111009:	c1 f9 1f             	sar    $0x1f,%ecx
c011100c:	c1 e9 14             	shr    $0x14,%ecx
c011100f:	01 ca                	add    %ecx,%edx
c0111011:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0111017:	29 ca                	sub    %ecx,%edx
c0111019:	0f b6 92 00 20 15 c0 	movzbl -0x3feae000(%edx),%edx
c0111020:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111022:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111026:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c011102b:	83 c0 01             	add    $0x1,%eax
c011102e:	a3 00 30 15 c0       	mov    %eax,0xc0153000
c0111033:	eb 6f                	jmp    c01110a4 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c0111035:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0111038:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c011103b:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0111040:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c0111047:	80 
c0111048:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011104b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011104f:	89 04 24             	mov    %eax,(%esp)
c0111052:	e8 78 90 ff ff       	call   c010a0cf <wait_current_set>
                local_intr_restore(intr_flag);
c0111057:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011105a:	89 04 24             	mov    %eax,(%esp)
c011105d:	e8 c2 fe ff ff       	call   c0110f24 <__intr_restore>

                schedule();
c0111062:	e8 cc d4 ff ff       	call   c010e533 <schedule>

                local_intr_save(intr_flag);
c0111067:	e8 8e fe ff ff       	call   c0110efa <__intr_save>
c011106c:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c011106f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111072:	89 04 24             	mov    %eax,(%esp)
c0111075:	e8 26 8f ff ff       	call   c0109fa0 <wait_in_queue>
c011107a:	85 c0                	test   %eax,%eax
c011107c:	74 14                	je     c0111092 <dev_stdin_read+0xc3>
c011107e:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0111083:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111086:	89 54 24 04          	mov    %edx,0x4(%esp)
c011108a:	89 04 24             	mov    %eax,(%esp)
c011108d:	e8 09 8d ff ff       	call   c0109d9b <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c0111092:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111095:	8b 40 04             	mov    0x4(%eax),%eax
c0111098:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c011109d:	75 11                	jne    c01110b0 <dev_stdin_read+0xe1>
c011109f:	e9 45 ff ff ff       	jmp    c0110fe9 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c01110a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01110a7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01110aa:	0f 82 39 ff ff ff    	jb     c0110fe9 <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c01110b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110b3:	89 04 24             	mov    %eax,(%esp)
c01110b6:	e8 69 fe ff ff       	call   c0110f24 <__intr_restore>
    return ret;
c01110bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01110be:	c9                   	leave  
c01110bf:	c3                   	ret    

c01110c0 <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c01110c0:	55                   	push   %ebp
c01110c1:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c01110c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01110c7:	74 07                	je     c01110d0 <stdin_open+0x10>
        return -E_INVAL;
c01110c9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01110ce:	eb 05                	jmp    c01110d5 <stdin_open+0x15>
    }
    return 0;
c01110d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01110d5:	5d                   	pop    %ebp
c01110d6:	c3                   	ret    

c01110d7 <stdin_close>:

static int
stdin_close(struct device *dev) {
c01110d7:	55                   	push   %ebp
c01110d8:	89 e5                	mov    %esp,%ebp
    return 0;
c01110da:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01110df:	5d                   	pop    %ebp
c01110e0:	c3                   	ret    

c01110e1 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c01110e1:	55                   	push   %ebp
c01110e2:	89 e5                	mov    %esp,%ebp
c01110e4:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c01110e7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01110eb:	75 36                	jne    c0111123 <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c01110ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01110f0:	8b 50 0c             	mov    0xc(%eax),%edx
c01110f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01110f6:	8b 00                	mov    (%eax),%eax
c01110f8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01110fc:	89 04 24             	mov    %eax,(%esp)
c01110ff:	e8 cb fe ff ff       	call   c0110fcf <dev_stdin_read>
c0111104:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111107:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011110b:	7e 11                	jle    c011111e <stdin_io+0x3d>
            iob->io_resid -= ret;
c011110d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111110:	8b 50 0c             	mov    0xc(%eax),%edx
c0111113:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111116:	29 c2                	sub    %eax,%edx
c0111118:	8b 45 0c             	mov    0xc(%ebp),%eax
c011111b:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c011111e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111121:	eb 05                	jmp    c0111128 <stdin_io+0x47>
    }
    return -E_INVAL;
c0111123:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111128:	c9                   	leave  
c0111129:	c3                   	ret    

c011112a <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c011112a:	55                   	push   %ebp
c011112b:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011112d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111132:	5d                   	pop    %ebp
c0111133:	c3                   	ret    

c0111134 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c0111134:	55                   	push   %ebp
c0111135:	89 e5                	mov    %esp,%ebp
c0111137:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c011113a:	8b 45 08             	mov    0x8(%ebp),%eax
c011113d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0111143:	8b 45 08             	mov    0x8(%ebp),%eax
c0111146:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c011114d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111150:	c7 40 08 c0 10 11 c0 	movl   $0xc01110c0,0x8(%eax)
    dev->d_close = stdin_close;
c0111157:	8b 45 08             	mov    0x8(%ebp),%eax
c011115a:	c7 40 0c d7 10 11 c0 	movl   $0xc01110d7,0xc(%eax)
    dev->d_io = stdin_io;
c0111161:	8b 45 08             	mov    0x8(%ebp),%eax
c0111164:	c7 40 10 e1 10 11 c0 	movl   $0xc01110e1,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c011116b:	8b 45 08             	mov    0x8(%ebp),%eax
c011116e:	c7 40 14 2a 11 11 c0 	movl   $0xc011112a,0x14(%eax)

    p_rpos = p_wpos = 0;
c0111175:	c7 05 04 30 15 c0 00 	movl   $0x0,0xc0153004
c011117c:	00 00 00 
c011117f:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0111184:	a3 00 30 15 c0       	mov    %eax,0xc0153000
    wait_queue_init(wait_queue);
c0111189:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c011118e:	89 04 24             	mov    %eax,(%esp)
c0111191:	e8 42 8b ff ff       	call   c0109cd8 <wait_queue_init>
}
c0111196:	c9                   	leave  
c0111197:	c3                   	ret    

c0111198 <dev_init_stdin>:

void
dev_init_stdin(void) {
c0111198:	55                   	push   %ebp
c0111199:	89 e5                	mov    %esp,%ebp
c011119b:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011119e:	e8 72 f8 ff ff       	call   c0110a15 <dev_create_inode>
c01111a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01111a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01111aa:	75 1c                	jne    c01111c8 <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c01111ac:	c7 44 24 08 bc 8e 11 	movl   $0xc0118ebc,0x8(%esp)
c01111b3:	c0 
c01111b4:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c01111bb:	00 
c01111bc:	c7 04 24 d5 8e 11 c0 	movl   $0xc0118ed5,(%esp)
c01111c3:	e8 ec fc fe ff       	call   c0100eb4 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c01111c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01111ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01111d2:	74 0d                	je     c01111e1 <dev_init_stdin+0x49>
c01111d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111d7:	8b 40 2c             	mov    0x2c(%eax),%eax
c01111da:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01111df:	74 24                	je     c0111205 <dev_init_stdin+0x6d>
c01111e1:	c7 44 24 0c f0 8e 11 	movl   $0xc0118ef0,0xc(%esp)
c01111e8:	c0 
c01111e9:	c7 44 24 08 23 8f 11 	movl   $0xc0118f23,0x8(%esp)
c01111f0:	c0 
c01111f1:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c01111f8:	00 
c01111f9:	c7 04 24 d5 8e 11 c0 	movl   $0xc0118ed5,(%esp)
c0111200:	e8 af fc fe ff       	call   c0100eb4 <__panic>
c0111205:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111208:	89 04 24             	mov    %eax,(%esp)
c011120b:	e8 24 ff ff ff       	call   c0111134 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c0111210:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111217:	00 
c0111218:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011121b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011121f:	c7 04 24 38 8f 11 c0 	movl   $0xc0118f38,(%esp)
c0111226:	e8 6c e6 ff ff       	call   c010f897 <vfs_add_dev>
c011122b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011122e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111232:	74 23                	je     c0111257 <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c0111234:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111237:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011123b:	c7 44 24 08 3e 8f 11 	movl   $0xc0118f3e,0x8(%esp)
c0111242:	c0 
c0111243:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c011124a:	00 
c011124b:	c7 04 24 d5 8e 11 c0 	movl   $0xc0118ed5,(%esp)
c0111252:	e8 5d fc fe ff       	call   c0100eb4 <__panic>
    }
}
c0111257:	c9                   	leave  
c0111258:	c3                   	ret    

c0111259 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c0111259:	55                   	push   %ebp
c011125a:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c011125c:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0111260:	74 07                	je     c0111269 <stdout_open+0x10>
        return -E_INVAL;
c0111262:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111267:	eb 05                	jmp    c011126e <stdout_open+0x15>
    }
    return 0;
c0111269:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011126e:	5d                   	pop    %ebp
c011126f:	c3                   	ret    

c0111270 <stdout_close>:

static int
stdout_close(struct device *dev) {
c0111270:	55                   	push   %ebp
c0111271:	89 e5                	mov    %esp,%ebp
    return 0;
c0111273:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111278:	5d                   	pop    %ebp
c0111279:	c3                   	ret    

c011127a <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c011127a:	55                   	push   %ebp
c011127b:	89 e5                	mov    %esp,%ebp
c011127d:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c0111280:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111284:	74 41                	je     c01112c7 <stdout_io+0x4d>
        char *data = iob->io_base;
c0111286:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111289:	8b 00                	mov    (%eax),%eax
c011128b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c011128e:	eb 26                	jmp    c01112b6 <stdout_io+0x3c>
            cputchar(*data ++);
c0111290:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111293:	8d 50 01             	lea    0x1(%eax),%edx
c0111296:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0111299:	0f b6 00             	movzbl (%eax),%eax
c011129c:	0f be c0             	movsbl %al,%eax
c011129f:	89 04 24             	mov    %eax,(%esp)
c01112a2:	e8 e4 f0 fe ff       	call   c010038b <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c01112a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112aa:	8b 40 0c             	mov    0xc(%eax),%eax
c01112ad:	8d 50 ff             	lea    -0x1(%eax),%edx
c01112b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112b3:	89 50 0c             	mov    %edx,0xc(%eax)
c01112b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112b9:	8b 40 0c             	mov    0xc(%eax),%eax
c01112bc:	85 c0                	test   %eax,%eax
c01112be:	75 d0                	jne    c0111290 <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c01112c0:	b8 00 00 00 00       	mov    $0x0,%eax
c01112c5:	eb 05                	jmp    c01112cc <stdout_io+0x52>
    }
    return -E_INVAL;
c01112c7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01112cc:	c9                   	leave  
c01112cd:	c3                   	ret    

c01112ce <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c01112ce:	55                   	push   %ebp
c01112cf:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c01112d1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01112d6:	5d                   	pop    %ebp
c01112d7:	c3                   	ret    

c01112d8 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c01112d8:	55                   	push   %ebp
c01112d9:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c01112db:	8b 45 08             	mov    0x8(%ebp),%eax
c01112de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c01112e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01112e7:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c01112ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01112f1:	c7 40 08 59 12 11 c0 	movl   $0xc0111259,0x8(%eax)
    dev->d_close = stdout_close;
c01112f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01112fb:	c7 40 0c 70 12 11 c0 	movl   $0xc0111270,0xc(%eax)
    dev->d_io = stdout_io;
c0111302:	8b 45 08             	mov    0x8(%ebp),%eax
c0111305:	c7 40 10 7a 12 11 c0 	movl   $0xc011127a,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c011130c:	8b 45 08             	mov    0x8(%ebp),%eax
c011130f:	c7 40 14 ce 12 11 c0 	movl   $0xc01112ce,0x14(%eax)
}
c0111316:	5d                   	pop    %ebp
c0111317:	c3                   	ret    

c0111318 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111318:	55                   	push   %ebp
c0111319:	89 e5                	mov    %esp,%ebp
c011131b:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011131e:	e8 f2 f6 ff ff       	call   c0110a15 <dev_create_inode>
c0111323:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111326:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011132a:	75 1c                	jne    c0111348 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c011132c:	c7 44 24 08 58 8f 11 	movl   $0xc0118f58,0x8(%esp)
c0111333:	c0 
c0111334:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c011133b:	00 
c011133c:	c7 04 24 72 8f 11 c0 	movl   $0xc0118f72,(%esp)
c0111343:	e8 6c fb fe ff       	call   c0100eb4 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c0111348:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011134b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011134e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111352:	74 0d                	je     c0111361 <dev_init_stdout+0x49>
c0111354:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111357:	8b 40 2c             	mov    0x2c(%eax),%eax
c011135a:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011135f:	74 24                	je     c0111385 <dev_init_stdout+0x6d>
c0111361:	c7 44 24 0c 8c 8f 11 	movl   $0xc0118f8c,0xc(%esp)
c0111368:	c0 
c0111369:	c7 44 24 08 bf 8f 11 	movl   $0xc0118fbf,0x8(%esp)
c0111370:	c0 
c0111371:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0111378:	00 
c0111379:	c7 04 24 72 8f 11 c0 	movl   $0xc0118f72,(%esp)
c0111380:	e8 2f fb fe ff       	call   c0100eb4 <__panic>
c0111385:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111388:	89 04 24             	mov    %eax,(%esp)
c011138b:	e8 48 ff ff ff       	call   c01112d8 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c0111390:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111397:	00 
c0111398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011139b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011139f:	c7 04 24 d4 8f 11 c0 	movl   $0xc0118fd4,(%esp)
c01113a6:	e8 ec e4 ff ff       	call   c010f897 <vfs_add_dev>
c01113ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01113ae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01113b2:	74 23                	je     c01113d7 <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c01113b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01113bb:	c7 44 24 08 db 8f 11 	movl   $0xc0118fdb,0x8(%esp)
c01113c2:	c0 
c01113c3:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c01113ca:	00 
c01113cb:	c7 04 24 72 8f 11 c0 	movl   $0xc0118f72,(%esp)
c01113d2:	e8 dd fa fe ff       	call   c0100eb4 <__panic>
    }
}
c01113d7:	c9                   	leave  
c01113d8:	c3                   	ret    

c01113d9 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c01113d9:	55                   	push   %ebp
c01113da:	89 e5                	mov    %esp,%ebp
c01113dc:	56                   	push   %esi
c01113dd:	53                   	push   %ebx
c01113de:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c01113e1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01113e5:	74 0b                	je     c01113f2 <bitmap_create+0x19>
c01113e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01113ea:	83 c0 20             	add    $0x20,%eax
c01113ed:	3b 45 08             	cmp    0x8(%ebp),%eax
c01113f0:	77 24                	ja     c0111416 <bitmap_create+0x3d>
c01113f2:	c7 44 24 0c f8 8f 11 	movl   $0xc0118ff8,0xc(%esp)
c01113f9:	c0 
c01113fa:	c7 44 24 08 20 90 11 	movl   $0xc0119020,0x8(%esp)
c0111401:	c0 
c0111402:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111409:	00 
c011140a:	c7 04 24 35 90 11 c0 	movl   $0xc0119035,(%esp)
c0111411:	e8 9e fa fe ff       	call   c0100eb4 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0111416:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c011141d:	e8 8a 38 ff ff       	call   c0104cac <kmalloc>
c0111422:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111425:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111429:	75 0a                	jne    c0111435 <bitmap_create+0x5c>
        return NULL;
c011142b:	b8 00 00 00 00       	mov    $0x0,%eax
c0111430:	e9 43 01 00 00       	jmp    c0111578 <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c0111435:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c011143c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011143f:	8b 55 08             	mov    0x8(%ebp),%edx
c0111442:	01 d0                	add    %edx,%eax
c0111444:	83 e8 01             	sub    $0x1,%eax
c0111447:	ba 00 00 00 00       	mov    $0x0,%edx
c011144c:	f7 75 ec             	divl   -0x14(%ebp)
c011144f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c0111452:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111455:	c1 e0 02             	shl    $0x2,%eax
c0111458:	89 04 24             	mov    %eax,(%esp)
c011145b:	e8 4c 38 ff ff       	call   c0104cac <kmalloc>
c0111460:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111463:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111467:	75 15                	jne    c011147e <bitmap_create+0xa5>
        kfree(bitmap);
c0111469:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011146c:	89 04 24             	mov    %eax,(%esp)
c011146f:	e8 53 38 ff ff       	call   c0104cc7 <kfree>
        return NULL;
c0111474:	b8 00 00 00 00       	mov    $0x0,%eax
c0111479:	e9 fa 00 00 00       	jmp    c0111578 <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c011147e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111481:	8b 55 08             	mov    0x8(%ebp),%edx
c0111484:	89 10                	mov    %edx,(%eax)
c0111486:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111489:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011148c:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c011148f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111492:	c1 e0 02             	shl    $0x2,%eax
c0111495:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111499:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c01114a0:	ff 
c01114a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01114a4:	89 04 24             	mov    %eax,(%esp)
c01114a7:	e8 4c 3f 00 00       	call   c01153f8 <memset>
c01114ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01114af:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c01114b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114b5:	c1 e0 05             	shl    $0x5,%eax
c01114b8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01114bb:	0f 84 b4 00 00 00    	je     c0111575 <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c01114c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114c4:	83 e8 01             	sub    $0x1,%eax
c01114c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01114ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01114cd:	c1 e0 05             	shl    $0x5,%eax
c01114d0:	89 c2                	mov    %eax,%edx
c01114d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01114d5:	29 d0                	sub    %edx,%eax
c01114d7:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c01114da:	8b 45 08             	mov    0x8(%ebp),%eax
c01114dd:	c1 e8 05             	shr    $0x5,%eax
c01114e0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01114e3:	74 24                	je     c0111509 <bitmap_create+0x130>
c01114e5:	c7 44 24 0c 4a 90 11 	movl   $0xc011904a,0xc(%esp)
c01114ec:	c0 
c01114ed:	c7 44 24 08 20 90 11 	movl   $0xc0119020,0x8(%esp)
c01114f4:	c0 
c01114f5:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c01114fc:	00 
c01114fd:	c7 04 24 35 90 11 c0 	movl   $0xc0119035,(%esp)
c0111504:	e8 ab f9 fe ff       	call   c0100eb4 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0111509:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011150d:	74 06                	je     c0111515 <bitmap_create+0x13c>
c011150f:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111513:	76 24                	jbe    c0111539 <bitmap_create+0x160>
c0111515:	c7 44 24 0c 64 90 11 	movl   $0xc0119064,0xc(%esp)
c011151c:	c0 
c011151d:	c7 44 24 08 20 90 11 	movl   $0xc0119020,0x8(%esp)
c0111524:	c0 
c0111525:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c011152c:	00 
c011152d:	c7 04 24 35 90 11 c0 	movl   $0xc0119035,(%esp)
c0111534:	e8 7b f9 fe ff       	call   c0100eb4 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c0111539:	eb 34                	jmp    c011156f <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c011153b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011153e:	8b 40 08             	mov    0x8(%eax),%eax
c0111541:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111544:	c1 e2 02             	shl    $0x2,%edx
c0111547:	01 c2                	add    %eax,%edx
c0111549:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011154c:	8b 40 08             	mov    0x8(%eax),%eax
c011154f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0111552:	c1 e1 02             	shl    $0x2,%ecx
c0111555:	01 c8                	add    %ecx,%eax
c0111557:	8b 18                	mov    (%eax),%ebx
c0111559:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011155c:	be 01 00 00 00       	mov    $0x1,%esi
c0111561:	89 c1                	mov    %eax,%ecx
c0111563:	d3 e6                	shl    %cl,%esi
c0111565:	89 f0                	mov    %esi,%eax
c0111567:	31 d8                	xor    %ebx,%eax
c0111569:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c011156b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011156f:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111573:	76 c6                	jbe    c011153b <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c0111575:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0111578:	83 c4 30             	add    $0x30,%esp
c011157b:	5b                   	pop    %ebx
c011157c:	5e                   	pop    %esi
c011157d:	5d                   	pop    %ebp
c011157e:	c3                   	ret    

c011157f <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c011157f:	55                   	push   %ebp
c0111580:	89 e5                	mov    %esp,%ebp
c0111582:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c0111585:	8b 45 08             	mov    0x8(%ebp),%eax
c0111588:	8b 40 08             	mov    0x8(%eax),%eax
c011158b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c011158e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111591:	8b 40 04             	mov    0x4(%eax),%eax
c0111594:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c0111597:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011159e:	e9 bb 00 00 00       	jmp    c011165e <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c01115a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01115ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01115b0:	01 d0                	add    %edx,%eax
c01115b2:	8b 00                	mov    (%eax),%eax
c01115b4:	85 c0                	test   %eax,%eax
c01115b6:	0f 84 9e 00 00 00    	je     c011165a <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c01115bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01115c3:	eb 6b                	jmp    c0111630 <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c01115c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115c8:	ba 01 00 00 00       	mov    $0x1,%edx
c01115cd:	89 c1                	mov    %eax,%ecx
c01115cf:	d3 e2                	shl    %cl,%edx
c01115d1:	89 d0                	mov    %edx,%eax
c01115d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c01115d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01115e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01115e3:	01 d0                	add    %edx,%eax
c01115e5:	8b 00                	mov    (%eax),%eax
c01115e7:	23 45 e4             	and    -0x1c(%ebp),%eax
c01115ea:	85 c0                	test   %eax,%eax
c01115ec:	74 3e                	je     c011162c <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c01115ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01115f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01115fb:	01 c2                	add    %eax,%edx
c01115fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111600:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0111607:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011160a:	01 c8                	add    %ecx,%eax
c011160c:	8b 00                	mov    (%eax),%eax
c011160e:	33 45 e4             	xor    -0x1c(%ebp),%eax
c0111611:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c0111613:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111616:	c1 e0 05             	shl    $0x5,%eax
c0111619:	89 c2                	mov    %eax,%edx
c011161b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011161e:	01 c2                	add    %eax,%edx
c0111620:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111623:	89 10                	mov    %edx,(%eax)
                    return 0;
c0111625:	b8 00 00 00 00       	mov    $0x0,%eax
c011162a:	eb 43                	jmp    c011166f <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c011162c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111630:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0111634:	76 8f                	jbe    c01115c5 <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c0111636:	c7 44 24 0c 89 90 11 	movl   $0xc0119089,0xc(%esp)
c011163d:	c0 
c011163e:	c7 44 24 08 20 90 11 	movl   $0xc0119020,0x8(%esp)
c0111645:	c0 
c0111646:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c011164d:	00 
c011164e:	c7 04 24 35 90 11 c0 	movl   $0xc0119035,(%esp)
c0111655:	e8 5a f8 fe ff       	call   c0100eb4 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c011165a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011165e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111661:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111664:	0f 82 39 ff ff ff    	jb     c01115a3 <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c011166a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c011166f:	c9                   	leave  
c0111670:	c3                   	ret    

c0111671 <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c0111671:	55                   	push   %ebp
c0111672:	89 e5                	mov    %esp,%ebp
c0111674:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c0111677:	8b 45 08             	mov    0x8(%ebp),%eax
c011167a:	8b 00                	mov    (%eax),%eax
c011167c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011167f:	77 24                	ja     c01116a5 <bitmap_translate+0x34>
c0111681:	c7 44 24 0c 8b 90 11 	movl   $0xc011908b,0xc(%esp)
c0111688:	c0 
c0111689:	c7 44 24 08 20 90 11 	movl   $0xc0119020,0x8(%esp)
c0111690:	c0 
c0111691:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0111698:	00 
c0111699:	c7 04 24 35 90 11 c0 	movl   $0xc0119035,(%esp)
c01116a0:	e8 0f f8 fe ff       	call   c0100eb4 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c01116a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01116a8:	c1 e8 05             	shr    $0x5,%eax
c01116ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01116ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01116b1:	83 e0 1f             	and    $0x1f,%eax
c01116b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c01116b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01116ba:	8b 40 08             	mov    0x8(%eax),%eax
c01116bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01116c0:	c1 e2 02             	shl    $0x2,%edx
c01116c3:	01 c2                	add    %eax,%edx
c01116c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01116c8:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c01116ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01116cd:	ba 01 00 00 00       	mov    $0x1,%edx
c01116d2:	89 c1                	mov    %eax,%ecx
c01116d4:	d3 e2                	shl    %cl,%edx
c01116d6:	89 d0                	mov    %edx,%eax
c01116d8:	89 c2                	mov    %eax,%edx
c01116da:	8b 45 14             	mov    0x14(%ebp),%eax
c01116dd:	89 10                	mov    %edx,(%eax)
}
c01116df:	c9                   	leave  
c01116e0:	c3                   	ret    

c01116e1 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c01116e1:	55                   	push   %ebp
c01116e2:	89 e5                	mov    %esp,%ebp
c01116e4:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c01116e7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01116ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01116ee:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01116f1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01116f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01116f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01116fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01116ff:	89 04 24             	mov    %eax,(%esp)
c0111702:	e8 6a ff ff ff       	call   c0111671 <bitmap_translate>
    return (*word & mask);
c0111707:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011170a:	8b 10                	mov    (%eax),%edx
c011170c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011170f:	21 d0                	and    %edx,%eax
}
c0111711:	c9                   	leave  
c0111712:	c3                   	ret    

c0111713 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0111713:	55                   	push   %ebp
c0111714:	89 e5                	mov    %esp,%ebp
c0111716:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111719:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011171c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111720:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111723:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111727:	8b 45 0c             	mov    0xc(%ebp),%eax
c011172a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011172e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111731:	89 04 24             	mov    %eax,(%esp)
c0111734:	e8 38 ff ff ff       	call   c0111671 <bitmap_translate>
    assert(!(*word & mask));
c0111739:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011173c:	8b 10                	mov    (%eax),%edx
c011173e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111741:	21 d0                	and    %edx,%eax
c0111743:	85 c0                	test   %eax,%eax
c0111745:	74 24                	je     c011176b <bitmap_free+0x58>
c0111747:	c7 44 24 0c a1 90 11 	movl   $0xc01190a1,0xc(%esp)
c011174e:	c0 
c011174f:	c7 44 24 08 20 90 11 	movl   $0xc0119020,0x8(%esp)
c0111756:	c0 
c0111757:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011175e:	00 
c011175f:	c7 04 24 35 90 11 c0 	movl   $0xc0119035,(%esp)
c0111766:	e8 49 f7 fe ff       	call   c0100eb4 <__panic>
    *word |= mask;
c011176b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011176e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111771:	8b 0a                	mov    (%edx),%ecx
c0111773:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111776:	09 ca                	or     %ecx,%edx
c0111778:	89 10                	mov    %edx,(%eax)
}
c011177a:	c9                   	leave  
c011177b:	c3                   	ret    

c011177c <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c011177c:	55                   	push   %ebp
c011177d:	89 e5                	mov    %esp,%ebp
c011177f:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c0111782:	8b 45 08             	mov    0x8(%ebp),%eax
c0111785:	8b 40 08             	mov    0x8(%eax),%eax
c0111788:	89 04 24             	mov    %eax,(%esp)
c011178b:	e8 37 35 ff ff       	call   c0104cc7 <kfree>
    kfree(bitmap);
c0111790:	8b 45 08             	mov    0x8(%ebp),%eax
c0111793:	89 04 24             	mov    %eax,(%esp)
c0111796:	e8 2c 35 ff ff       	call   c0104cc7 <kfree>
}
c011179b:	c9                   	leave  
c011179c:	c3                   	ret    

c011179d <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c011179d:	55                   	push   %ebp
c011179e:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c01117a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01117a4:	74 12                	je     c01117b8 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c01117a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01117a9:	8b 40 04             	mov    0x4(%eax),%eax
c01117ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01117b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01117b6:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c01117b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01117bb:	8b 40 08             	mov    0x8(%eax),%eax
}
c01117be:	5d                   	pop    %ebp
c01117bf:	c3                   	ret    

c01117c0 <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c01117c0:	55                   	push   %ebp
c01117c1:	89 e5                	mov    %esp,%ebp
c01117c3:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c01117c6:	c7 04 24 b1 90 11 c0 	movl   $0xc01190b1,(%esp)
c01117cd:	e8 d6 08 00 00       	call   c01120a8 <sfs_mount>
c01117d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01117d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01117d9:	74 23                	je     c01117fe <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c01117db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01117de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01117e2:	c7 44 24 08 b7 90 11 	movl   $0xc01190b7,0x8(%esp)
c01117e9:	c0 
c01117ea:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c01117f1:	00 
c01117f2:	c7 04 24 d4 90 11 c0 	movl   $0xc01190d4,(%esp)
c01117f9:	e8 b6 f6 fe ff       	call   c0100eb4 <__panic>
    }
}
c01117fe:	c9                   	leave  
c01117ff:	c3                   	ret    

c0111800 <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c0111800:	55                   	push   %ebp
c0111801:	89 e5                	mov    %esp,%ebp
c0111803:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111806:	8b 45 08             	mov    0x8(%ebp),%eax
c0111809:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011180c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111810:	74 0a                	je     c011181c <sfs_sync+0x1c>
c0111812:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111815:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111818:	85 c0                	test   %eax,%eax
c011181a:	74 24                	je     c0111840 <sfs_sync+0x40>
c011181c:	c7 44 24 0c e8 90 11 	movl   $0xc01190e8,0xc(%esp)
c0111823:	c0 
c0111824:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c011182b:	c0 
c011182c:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111833:	00 
c0111834:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c011183b:	e8 74 f6 fe ff       	call   c0100eb4 <__panic>
c0111840:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111843:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0111846:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111849:	89 04 24             	mov    %eax,(%esp)
c011184c:	e8 f5 2f 00 00       	call   c0114846 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c0111851:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111854:	83 c0 60             	add    $0x60,%eax
c0111857:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011185a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011185d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0111860:	eb 74                	jmp    c01118d6 <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c0111862:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111865:	83 e8 1c             	sub    $0x1c,%eax
c0111868:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c011186b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011186e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111871:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0111875:	74 17                	je     c011188e <sfs_sync+0x8e>
c0111877:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011187a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011187d:	85 c0                	test   %eax,%eax
c011187f:	74 0d                	je     c011188e <sfs_sync+0x8e>
c0111881:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111884:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111887:	8b 40 18             	mov    0x18(%eax),%eax
c011188a:	85 c0                	test   %eax,%eax
c011188c:	75 24                	jne    c01118b2 <sfs_sync+0xb2>
c011188e:	c7 44 24 0c 3c 91 11 	movl   $0xc011913c,0xc(%esp)
c0111895:	c0 
c0111896:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c011189d:	c0 
c011189e:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c01118a5:	00 
c01118a6:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c01118ad:	e8 02 f6 fe ff       	call   c0100eb4 <__panic>
c01118b2:	c7 44 24 04 8a 91 11 	movl   $0xc011918a,0x4(%esp)
c01118b9:	c0 
c01118ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118bd:	89 04 24             	mov    %eax,(%esp)
c01118c0:	e8 db d8 ff ff       	call   c010f1a0 <inode_check>
c01118c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118c8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01118cb:	8b 40 18             	mov    0x18(%eax),%eax
c01118ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01118d1:	89 14 24             	mov    %edx,(%esp)
c01118d4:	ff d0                	call   *%eax
c01118d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01118dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01118df:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c01118e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01118e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118e8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01118eb:	0f 85 71 ff ff ff    	jne    c0111862 <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c01118f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01118f4:	89 04 24             	mov    %eax,(%esp)
c01118f7:	e8 76 2f 00 00       	call   c0114872 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c01118fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01118ff:	8b 40 34             	mov    0x34(%eax),%eax
c0111902:	85 c0                	test   %eax,%eax
c0111904:	74 50                	je     c0111956 <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0111906:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111909:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c0111910:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111913:	89 04 24             	mov    %eax,(%esp)
c0111916:	e8 bd 2d 00 00       	call   c01146d8 <sfs_sync_super>
c011191b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011191e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111922:	74 0f                	je     c0111933 <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0111924:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111927:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c011192e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111931:	eb 28                	jmp    c011195b <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0111933:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111936:	89 04 24             	mov    %eax,(%esp)
c0111939:	e8 26 2e 00 00       	call   c0114764 <sfs_sync_freemap>
c011193e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111941:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111945:	74 0f                	je     c0111956 <sfs_sync+0x156>
            sfs->super_dirty = 1;
c0111947:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011194a:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111951:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111954:	eb 05                	jmp    c011195b <sfs_sync+0x15b>
        }
    }
    return 0;
c0111956:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011195b:	c9                   	leave  
c011195c:	c3                   	ret    

c011195d <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c011195d:	55                   	push   %ebp
c011195e:	89 e5                	mov    %esp,%ebp
c0111960:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0111963:	8b 45 08             	mov    0x8(%ebp),%eax
c0111966:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111969:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011196d:	74 0a                	je     c0111979 <sfs_get_root+0x1c>
c011196f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111972:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111975:	85 c0                	test   %eax,%eax
c0111977:	74 24                	je     c011199d <sfs_get_root+0x40>
c0111979:	c7 44 24 0c e8 90 11 	movl   $0xc01190e8,0xc(%esp)
c0111980:	c0 
c0111981:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c0111988:	c0 
c0111989:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c0111990:	00 
c0111991:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c0111998:	e8 17 f5 fe ff       	call   c0100eb4 <__panic>
c011199d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119a0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01119a7:	00 
c01119a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01119ab:	89 54 24 04          	mov    %edx,0x4(%esp)
c01119af:	89 04 24             	mov    %eax,(%esp)
c01119b2:	e8 e1 0b 00 00       	call   c0112598 <sfs_load_inode>
c01119b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01119ba:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01119be:	74 23                	je     c01119e3 <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c01119c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01119c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01119c7:	c7 44 24 08 90 91 11 	movl   $0xc0119190,0x8(%esp)
c01119ce:	c0 
c01119cf:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c01119d6:	00 
c01119d7:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c01119de:	e8 d1 f4 fe ff       	call   c0100eb4 <__panic>
    }
    return node;
c01119e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c01119e6:	c9                   	leave  
c01119e7:	c3                   	ret    

c01119e8 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c01119e8:	55                   	push   %ebp
c01119e9:	89 e5                	mov    %esp,%ebp
c01119eb:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01119ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01119f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01119f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01119f8:	74 0a                	je     c0111a04 <sfs_unmount+0x1c>
c01119fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119fd:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111a00:	85 c0                	test   %eax,%eax
c0111a02:	74 24                	je     c0111a28 <sfs_unmount+0x40>
c0111a04:	c7 44 24 0c e8 90 11 	movl   $0xc01190e8,0xc(%esp)
c0111a0b:	c0 
c0111a0c:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c0111a13:	c0 
c0111a14:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111a1b:	00 
c0111a1c:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c0111a23:	e8 8c f4 fe ff       	call   c0100eb4 <__panic>
c0111a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111a2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a31:	83 c0 60             	add    $0x60,%eax
c0111a34:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111a37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a3a:	8b 40 04             	mov    0x4(%eax),%eax
c0111a3d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111a40:	0f 94 c0             	sete   %al
c0111a43:	0f b6 c0             	movzbl %al,%eax
c0111a46:	85 c0                	test   %eax,%eax
c0111a48:	75 07                	jne    c0111a51 <sfs_unmount+0x69>
        return -E_BUSY;
c0111a4a:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111a4f:	eb 68                	jmp    c0111ab9 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a54:	8b 40 34             	mov    0x34(%eax),%eax
c0111a57:	85 c0                	test   %eax,%eax
c0111a59:	74 24                	je     c0111a7f <sfs_unmount+0x97>
c0111a5b:	c7 44 24 0c a9 91 11 	movl   $0xc01191a9,0xc(%esp)
c0111a62:	c0 
c0111a63:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c0111a6a:	c0 
c0111a6b:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111a72:	00 
c0111a73:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c0111a7a:	e8 35 f4 fe ff       	call   c0100eb4 <__panic>
    bitmap_destroy(sfs->freemap);
c0111a7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a82:	8b 40 30             	mov    0x30(%eax),%eax
c0111a85:	89 04 24             	mov    %eax,(%esp)
c0111a88:	e8 ef fc ff ff       	call   c011177c <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111a8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a90:	8b 40 38             	mov    0x38(%eax),%eax
c0111a93:	89 04 24             	mov    %eax,(%esp)
c0111a96:	e8 2c 32 ff ff       	call   c0104cc7 <kfree>
    kfree(sfs->hash_list);
c0111a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a9e:	8b 40 68             	mov    0x68(%eax),%eax
c0111aa1:	89 04 24             	mov    %eax,(%esp)
c0111aa4:	e8 1e 32 ff ff       	call   c0104cc7 <kfree>
    kfree(sfs);
c0111aa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111aac:	89 04 24             	mov    %eax,(%esp)
c0111aaf:	e8 13 32 ff ff       	call   c0104cc7 <kfree>
    return 0;
c0111ab4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111ab9:	c9                   	leave  
c0111aba:	c3                   	ret    

c0111abb <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0111abb:	55                   	push   %ebp
c0111abc:	89 e5                	mov    %esp,%ebp
c0111abe:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111ac1:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ac4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111ac7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111acb:	74 0a                	je     c0111ad7 <sfs_cleanup+0x1c>
c0111acd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ad0:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111ad3:	85 c0                	test   %eax,%eax
c0111ad5:	74 24                	je     c0111afb <sfs_cleanup+0x40>
c0111ad7:	c7 44 24 0c e8 90 11 	movl   $0xc01190e8,0xc(%esp)
c0111ade:	c0 
c0111adf:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c0111ae6:	c0 
c0111ae7:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0111aee:	00 
c0111aef:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c0111af6:	e8 b9 f3 fe ff       	call   c0100eb4 <__panic>
c0111afb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111afe:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0111b01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b04:	8b 40 04             	mov    0x4(%eax),%eax
c0111b07:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b0d:	8b 40 08             	mov    0x8(%eax),%eax
c0111b10:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111b13:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b16:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111b19:	89 d1                	mov    %edx,%ecx
c0111b1b:	29 c1                	sub    %eax,%ecx
c0111b1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b20:	8d 50 0c             	lea    0xc(%eax),%edx
c0111b23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111b26:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111b2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b2d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111b31:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111b35:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111b39:	c7 04 24 bc 91 11 c0 	movl   $0xc01191bc,(%esp)
c0111b40:	e8 20 e8 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111b45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111b4c:	eb 1d                	jmp    c0111b6b <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c0111b4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b51:	8b 40 70             	mov    0x70(%eax),%eax
c0111b54:	8b 55 08             	mov    0x8(%ebp),%edx
c0111b57:	89 14 24             	mov    %edx,(%esp)
c0111b5a:	ff d0                	call   *%eax
c0111b5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111b5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b63:	75 02                	jne    c0111b67 <sfs_cleanup+0xac>
            break;
c0111b65:	eb 0a                	jmp    c0111b71 <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111b67:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111b6b:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111b6f:	7e dd                	jle    c0111b4e <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c0111b71:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b75:	74 2d                	je     c0111ba4 <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0111b77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b7a:	8d 50 0c             	lea    0xc(%eax),%edx
c0111b7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b80:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111b84:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111b88:	c7 44 24 08 db 91 11 	movl   $0xc01191db,0x8(%esp)
c0111b8f:	c0 
c0111b90:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111b97:	00 
c0111b98:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c0111b9f:	e8 7c f3 fe ff       	call   c0100f20 <__warn>
    }
}
c0111ba4:	c9                   	leave  
c0111ba5:	c3                   	ret    

c0111ba6 <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0111ba6:	55                   	push   %ebp
c0111ba7:	89 e5                	mov    %esp,%ebp
c0111ba9:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111bac:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111baf:	c1 e0 0c             	shl    $0xc,%eax
c0111bb2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111bb6:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111bbd:	00 
c0111bbe:	8b 45 10             	mov    0x10(%ebp),%eax
c0111bc1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111bc5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111bc8:	89 04 24             	mov    %eax,(%esp)
c0111bcb:	e8 8e 96 ff ff       	call   c010b25e <iobuf_init>
c0111bd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0111bd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0111bd6:	8b 40 10             	mov    0x10(%eax),%eax
c0111bd9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111be0:	00 
c0111be1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111be4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111be8:	8b 55 08             	mov    0x8(%ebp),%edx
c0111beb:	89 14 24             	mov    %edx,(%esp)
c0111bee:	ff d0                	call   *%eax
}
c0111bf0:	c9                   	leave  
c0111bf1:	c3                   	ret    

c0111bf2 <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0111bf2:	55                   	push   %ebp
c0111bf3:	89 e5                	mov    %esp,%ebp
c0111bf5:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0111bf8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111bfb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111bff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c02:	89 04 24             	mov    %eax,(%esp)
c0111c05:	e8 93 fb ff ff       	call   c011179d <bitmap_getdata>
c0111c0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0111c0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111c11:	74 0f                	je     c0111c22 <sfs_init_freemap+0x30>
c0111c13:	8b 45 14             	mov    0x14(%ebp),%eax
c0111c16:	c1 e0 0c             	shl    $0xc,%eax
c0111c19:	89 c2                	mov    %eax,%edx
c0111c1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c1e:	39 c2                	cmp    %eax,%edx
c0111c20:	74 24                	je     c0111c46 <sfs_init_freemap+0x54>
c0111c22:	c7 44 24 0c f8 91 11 	movl   $0xc01191f8,0xc(%esp)
c0111c29:	c0 
c0111c2a:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c0111c31:	c0 
c0111c32:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c0111c39:	00 
c0111c3a:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c0111c41:	e8 6e f2 fe ff       	call   c0100eb4 <__panic>
    while (nblks != 0) {
c0111c46:	eb 36                	jmp    c0111c7e <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111c48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c4b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111c4f:	8b 45 10             	mov    0x10(%ebp),%eax
c0111c52:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111c56:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c59:	89 04 24             	mov    %eax,(%esp)
c0111c5c:	e8 45 ff ff ff       	call   c0111ba6 <sfs_init_read>
c0111c61:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111c64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111c68:	74 05                	je     c0111c6f <sfs_init_freemap+0x7d>
            return ret;
c0111c6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111c6d:	eb 1a                	jmp    c0111c89 <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111c6f:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111c73:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0111c77:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111c7e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111c82:	75 c4                	jne    c0111c48 <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111c84:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111c89:	c9                   	leave  
c0111c8a:	c3                   	ret    

c0111c8b <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111c8b:	55                   	push   %ebp
c0111c8c:	89 e5                	mov    %esp,%ebp
c0111c8e:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c94:	8b 40 04             	mov    0x4(%eax),%eax
c0111c97:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111c9c:	74 0a                	je     c0111ca8 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111c9e:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111ca3:	e9 fe 03 00 00       	jmp    c01120a6 <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0111ca8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111caf:	e8 df d5 ff ff       	call   c010f293 <__alloc_fs>
c0111cb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111cb7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111cbb:	75 0a                	jne    c0111cc7 <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0111cbd:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111cc2:	e9 df 03 00 00       	jmp    c01120a6 <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111cc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111cca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111ccd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111cd1:	74 0a                	je     c0111cdd <sfs_do_mount+0x52>
c0111cd3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111cd6:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111cd9:	85 c0                	test   %eax,%eax
c0111cdb:	74 24                	je     c0111d01 <sfs_do_mount+0x76>
c0111cdd:	c7 44 24 0c e8 90 11 	movl   $0xc01190e8,0xc(%esp)
c0111ce4:	c0 
c0111ce5:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c0111cec:	c0 
c0111ced:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0111cf4:	00 
c0111cf5:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c0111cfc:	e8 b3 f1 fe ff       	call   c0100eb4 <__panic>
c0111d01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111d04:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0111d07:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d0a:	8b 55 08             	mov    0x8(%ebp),%edx
c0111d0d:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0111d10:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0111d17:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0111d1e:	e8 89 2f ff ff       	call   c0104cac <kmalloc>
c0111d23:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111d26:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d29:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111d2c:	89 50 38             	mov    %edx,0x38(%eax)
c0111d2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d32:	8b 40 38             	mov    0x38(%eax),%eax
c0111d35:	85 c0                	test   %eax,%eax
c0111d37:	75 05                	jne    c0111d3e <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c0111d39:	e9 5a 03 00 00       	jmp    c0112098 <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0111d3e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111d41:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111d45:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0111d4c:	00 
c0111d4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d50:	89 04 24             	mov    %eax,(%esp)
c0111d53:	e8 4e fe ff ff       	call   c0111ba6 <sfs_init_read>
c0111d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111d5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111d5f:	74 05                	je     c0111d66 <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c0111d61:	e9 27 03 00 00       	jmp    c011208d <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c0111d66:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0111d6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111d70:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0111d73:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111d76:	8b 00                	mov    (%eax),%eax
c0111d78:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0111d7d:	74 22                	je     c0111da1 <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0111d7f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111d82:	8b 00                	mov    (%eax),%eax
c0111d84:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c0111d8b:	2f 
c0111d8c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111d90:	c7 04 24 24 92 11 c0 	movl   $0xc0119224,(%esp)
c0111d97:	e8 c9 e5 fe ff       	call   c0100365 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0111d9c:	e9 ec 02 00 00       	jmp    c011208d <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c0111da1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111da4:	8b 50 04             	mov    0x4(%eax),%edx
c0111da7:	8b 45 08             	mov    0x8(%ebp),%eax
c0111daa:	8b 00                	mov    (%eax),%eax
c0111dac:	39 c2                	cmp    %eax,%edx
c0111dae:	76 24                	jbe    c0111dd4 <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0111db0:	8b 45 08             	mov    0x8(%ebp),%eax
c0111db3:	8b 10                	mov    (%eax),%edx
c0111db5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111db8:	8b 40 04             	mov    0x4(%eax),%eax
c0111dbb:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111dbf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111dc3:	c7 04 24 5c 92 11 c0 	movl   $0xc011925c,(%esp)
c0111dca:	e8 96 e5 fe ff       	call   c0100365 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0111dcf:	e9 b9 02 00 00       	jmp    c011208d <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0111dd4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111dd7:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0111ddb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111dde:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0111de1:	8b 0a                	mov    (%edx),%ecx
c0111de3:	89 08                	mov    %ecx,(%eax)
c0111de5:	8b 4a 04             	mov    0x4(%edx),%ecx
c0111de8:	89 48 04             	mov    %ecx,0x4(%eax)
c0111deb:	8b 4a 08             	mov    0x8(%edx),%ecx
c0111dee:	89 48 08             	mov    %ecx,0x8(%eax)
c0111df1:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0111df4:	89 48 0c             	mov    %ecx,0xc(%eax)
c0111df7:	8b 4a 10             	mov    0x10(%edx),%ecx
c0111dfa:	89 48 10             	mov    %ecx,0x10(%eax)
c0111dfd:	8b 4a 14             	mov    0x14(%edx),%ecx
c0111e00:	89 48 14             	mov    %ecx,0x14(%eax)
c0111e03:	8b 4a 18             	mov    0x18(%edx),%ecx
c0111e06:	89 48 18             	mov    %ecx,0x18(%eax)
c0111e09:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0111e0c:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0111e0f:	8b 4a 20             	mov    0x20(%edx),%ecx
c0111e12:	89 48 20             	mov    %ecx,0x20(%eax)
c0111e15:	8b 4a 24             	mov    0x24(%edx),%ecx
c0111e18:	89 48 24             	mov    %ecx,0x24(%eax)
c0111e1b:	8b 52 28             	mov    0x28(%edx),%edx
c0111e1e:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0111e21:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0111e28:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c0111e2f:	e8 78 2e ff ff       	call   c0104cac <kmalloc>
c0111e34:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0111e37:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e3a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0111e3d:	89 50 68             	mov    %edx,0x68(%eax)
c0111e40:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e43:	8b 40 68             	mov    0x68(%eax),%eax
c0111e46:	85 c0                	test   %eax,%eax
c0111e48:	75 05                	jne    c0111e4f <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c0111e4a:	e9 3e 02 00 00       	jmp    c011208d <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111e4f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111e56:	eb 2a                	jmp    c0111e82 <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c0111e58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111e5b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0111e62:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111e65:	01 d0                	add    %edx,%eax
c0111e67:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0111e6a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111e6d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0111e70:	89 50 04             	mov    %edx,0x4(%eax)
c0111e73:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111e76:	8b 50 04             	mov    0x4(%eax),%edx
c0111e79:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111e7c:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111e7e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111e82:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0111e89:	76 cd                	jbe    c0111e58 <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0111e8b:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c0111e92:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111e95:	8b 50 04             	mov    0x4(%eax),%edx
c0111e98:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111e9b:	01 d0                	add    %edx,%eax
c0111e9d:	83 e8 01             	sub    $0x1,%eax
c0111ea0:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0111ea3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111ea6:	ba 00 00 00 00       	mov    $0x0,%edx
c0111eab:	f7 75 d0             	divl   -0x30(%ebp)
c0111eae:	89 d0                	mov    %edx,%eax
c0111eb0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0111eb3:	29 c2                	sub    %eax,%edx
c0111eb5:	89 d0                	mov    %edx,%eax
c0111eb7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0111eba:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111ebd:	89 04 24             	mov    %eax,(%esp)
c0111ec0:	e8 14 f5 ff ff       	call   c01113d9 <bitmap_create>
c0111ec5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0111ec8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ecb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0111ece:	89 50 30             	mov    %edx,0x30(%eax)
c0111ed1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ed4:	8b 40 30             	mov    0x30(%eax),%eax
c0111ed7:	85 c0                	test   %eax,%eax
c0111ed9:	75 05                	jne    c0111ee0 <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c0111edb:	e9 a2 01 00 00       	jmp    c0112082 <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c0111ee0:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c0111ee7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111eea:	8b 50 04             	mov    0x4(%eax),%edx
c0111eed:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0111ef0:	01 d0                	add    %edx,%eax
c0111ef2:	83 e8 01             	sub    $0x1,%eax
c0111ef5:	ba 00 00 00 00       	mov    $0x0,%edx
c0111efa:	f7 75 c0             	divl   -0x40(%ebp)
c0111efd:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c0111f00:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111f03:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111f07:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0111f0a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111f0e:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0111f15:	00 
c0111f16:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111f19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f20:	89 04 24             	mov    %eax,(%esp)
c0111f23:	e8 ca fc ff ff       	call   c0111bf2 <sfs_init_freemap>
c0111f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111f2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f2f:	74 11                	je     c0111f42 <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c0111f31:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c0111f32:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111f35:	89 04 24             	mov    %eax,(%esp)
c0111f38:	e8 3f f8 ff ff       	call   c011177c <bitmap_destroy>
c0111f3d:	e9 40 01 00 00       	jmp    c0112082 <sfs_do_mount+0x3f7>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c0111f42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f45:	8b 40 04             	mov    0x4(%eax),%eax
c0111f48:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0111f4b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c0111f52:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111f59:	eb 1e                	jmp    c0111f79 <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c0111f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111f5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f62:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111f65:	89 04 24             	mov    %eax,(%esp)
c0111f68:	e8 74 f7 ff ff       	call   c01116e1 <bitmap_test>
c0111f6d:	85 c0                	test   %eax,%eax
c0111f6f:	74 04                	je     c0111f75 <sfs_do_mount+0x2ea>
            unused_blocks ++;
c0111f71:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c0111f75:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111f79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111f7c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0111f7f:	72 da                	jb     c0111f5b <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c0111f81:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f84:	8b 40 08             	mov    0x8(%eax),%eax
c0111f87:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0111f8a:	74 24                	je     c0111fb0 <sfs_do_mount+0x325>
c0111f8c:	c7 44 24 0c 8c 92 11 	movl   $0xc011928c,0xc(%esp)
c0111f93:	c0 
c0111f94:	c7 44 24 08 11 91 11 	movl   $0xc0119111,0x8(%esp)
c0111f9b:	c0 
c0111f9c:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0111fa3:	00 
c0111fa4:	c7 04 24 26 91 11 c0 	movl   $0xc0119126,(%esp)
c0111fab:	e8 04 ef fe ff       	call   c0100eb4 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c0111fb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fb3:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0111fba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fbd:	83 c0 3c             	add    $0x3c,%eax
c0111fc0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111fc7:	00 
c0111fc8:	89 04 24             	mov    %eax,(%esp)
c0111fcb:	e8 b9 7a ff ff       	call   c0109a89 <sem_init>
    sem_init(&(sfs->io_sem), 1);
c0111fd0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fd3:	83 c0 48             	add    $0x48,%eax
c0111fd6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111fdd:	00 
c0111fde:	89 04 24             	mov    %eax,(%esp)
c0111fe1:	e8 a3 7a ff ff       	call   c0109a89 <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c0111fe6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fe9:	83 c0 54             	add    $0x54,%eax
c0111fec:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111ff3:	00 
c0111ff4:	89 04 24             	mov    %eax,(%esp)
c0111ff7:	e8 8d 7a ff ff       	call   c0109a89 <sem_init>
    list_init(&(sfs->inode_list));
c0111ffc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fff:	83 c0 60             	add    $0x60,%eax
c0112002:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0112005:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112008:	8b 55 b0             	mov    -0x50(%ebp),%edx
c011200b:	89 50 04             	mov    %edx,0x4(%eax)
c011200e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112011:	8b 50 04             	mov    0x4(%eax),%edx
c0112014:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112017:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112019:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011201c:	8b 55 b8             	mov    -0x48(%ebp),%edx
c011201f:	89 d1                	mov    %edx,%ecx
c0112021:	29 c1                	sub    %eax,%ecx
c0112023:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112026:	8d 50 0c             	lea    0xc(%eax),%edx
c0112029:	8b 45 b8             	mov    -0x48(%ebp),%eax
c011202c:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112030:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112033:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112037:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c011203b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011203f:	c7 04 24 b6 92 11 c0 	movl   $0xc01192b6,(%esp)
c0112046:	e8 1a e3 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c011204b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011204e:	c7 40 70 00 18 11 c0 	movl   $0xc0111800,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c0112055:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112058:	c7 40 74 5d 19 11 c0 	movl   $0xc011195d,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c011205f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112062:	c7 40 78 e8 19 11 c0 	movl   $0xc01119e8,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c0112069:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011206c:	c7 40 7c bb 1a 11 c0 	movl   $0xc0111abb,0x7c(%eax)
    *fs_store = fs;
c0112073:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112076:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112079:	89 10                	mov    %edx,(%eax)
    return 0;
c011207b:	b8 00 00 00 00       	mov    $0x0,%eax
c0112080:	eb 24                	jmp    c01120a6 <sfs_do_mount+0x41b>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c0112082:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112085:	89 04 24             	mov    %eax,(%esp)
c0112088:	e8 3a 2c ff ff       	call   c0104cc7 <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c011208d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112090:	89 04 24             	mov    %eax,(%esp)
c0112093:	e8 2f 2c ff ff       	call   c0104cc7 <kfree>
failed_cleanup_fs:
    kfree(fs);
c0112098:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011209b:	89 04 24             	mov    %eax,(%esp)
c011209e:	e8 24 2c ff ff       	call   c0104cc7 <kfree>
    return ret;
c01120a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01120a6:	c9                   	leave  
c01120a7:	c3                   	ret    

c01120a8 <sfs_mount>:

int
sfs_mount(const char *devname) {
c01120a8:	55                   	push   %ebp
c01120a9:	89 e5                	mov    %esp,%ebp
c01120ab:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c01120ae:	c7 44 24 04 8b 1c 11 	movl   $0xc0111c8b,0x4(%esp)
c01120b5:	c0 
c01120b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01120b9:	89 04 24             	mov    %eax,(%esp)
c01120bc:	e8 96 d8 ff ff       	call   c010f957 <vfs_mount>
}
c01120c1:	c9                   	leave  
c01120c2:	c3                   	ret    

c01120c3 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c01120c3:	55                   	push   %ebp
c01120c4:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c01120c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01120c9:	8b 40 30             	mov    0x30(%eax),%eax
}
c01120cc:	5d                   	pop    %ebp
c01120cd:	c3                   	ret    

c01120ce <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c01120ce:	55                   	push   %ebp
c01120cf:	89 e5                	mov    %esp,%ebp
c01120d1:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c01120d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01120d7:	83 c0 10             	add    $0x10,%eax
c01120da:	89 04 24             	mov    %eax,(%esp)
c01120dd:	e8 35 7b ff ff       	call   c0109c17 <down>
}
c01120e2:	c9                   	leave  
c01120e3:	c3                   	ret    

c01120e4 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c01120e4:	55                   	push   %ebp
c01120e5:	89 e5                	mov    %esp,%ebp
c01120e7:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c01120ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01120ed:	83 c0 10             	add    $0x10,%eax
c01120f0:	89 04 24             	mov    %eax,(%esp)
c01120f3:	e8 04 7b ff ff       	call   c0109bfc <up>
}
c01120f8:	c9                   	leave  
c01120f9:	c3                   	ret    

c01120fa <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c01120fa:	55                   	push   %ebp
c01120fb:	89 e5                	mov    %esp,%ebp
c01120fd:	83 ec 28             	sub    $0x28,%esp
c0112100:	8b 45 08             	mov    0x8(%ebp),%eax
c0112103:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0112107:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c011210b:	83 f8 01             	cmp    $0x1,%eax
c011210e:	74 0c                	je     c011211c <sfs_get_ops+0x22>
c0112110:	83 f8 02             	cmp    $0x2,%eax
c0112113:	75 0e                	jne    c0112123 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c0112115:	b8 e0 92 11 c0       	mov    $0xc01192e0,%eax
c011211a:	eb 2b                	jmp    c0112147 <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c011211c:	b8 20 93 11 c0       	mov    $0xc0119320,%eax
c0112121:	eb 24                	jmp    c0112147 <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c0112123:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112127:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011212b:	c7 44 24 08 60 93 11 	movl   $0xc0119360,0x8(%esp)
c0112132:	c0 
c0112133:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c011213a:	00 
c011213b:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112142:	e8 6d ed fe ff       	call   c0100eb4 <__panic>
}
c0112147:	c9                   	leave  
c0112148:	c3                   	ret    

c0112149 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0112149:	55                   	push   %ebp
c011214a:	89 e5                	mov    %esp,%ebp
c011214c:	53                   	push   %ebx
c011214d:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c0112150:	8b 45 08             	mov    0x8(%ebp),%eax
c0112153:	8b 58 68             	mov    0x68(%eax),%ebx
c0112156:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c011215d:	00 
c011215e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112161:	89 04 24             	mov    %eax,(%esp)
c0112164:	e8 35 27 00 00       	call   c011489e <hash32>
c0112169:	c1 e0 03             	shl    $0x3,%eax
c011216c:	01 d8                	add    %ebx,%eax
}
c011216e:	83 c4 14             	add    $0x14,%esp
c0112171:	5b                   	pop    %ebx
c0112172:	5d                   	pop    %ebp
c0112173:	c3                   	ret    

c0112174 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112174:	55                   	push   %ebp
c0112175:	89 e5                	mov    %esp,%ebp
c0112177:	53                   	push   %ebx
c0112178:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c011217b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011217e:	83 c0 1c             	add    $0x1c,%eax
c0112181:	8b 55 08             	mov    0x8(%ebp),%edx
c0112184:	83 c2 60             	add    $0x60,%edx
c0112187:	89 55 f4             	mov    %edx,-0xc(%ebp)
c011218a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011218d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112190:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112193:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112196:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0112199:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011219c:	8b 40 04             	mov    0x4(%eax),%eax
c011219f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01121a2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01121a5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01121a8:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01121ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01121ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01121b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01121b4:	89 10                	mov    %edx,(%eax)
c01121b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01121b9:	8b 10                	mov    (%eax),%edx
c01121bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01121be:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01121c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01121c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01121c7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01121ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01121cd:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01121d0:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c01121d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121d5:	8d 58 24             	lea    0x24(%eax),%ebx
c01121d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121db:	8b 40 04             	mov    0x4(%eax),%eax
c01121de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01121e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01121e5:	89 04 24             	mov    %eax,(%esp)
c01121e8:	e8 5c ff ff ff       	call   c0112149 <sfs_hash_list>
c01121ed:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01121f0:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c01121f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01121f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01121f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01121fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01121ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112202:	8b 40 04             	mov    0x4(%eax),%eax
c0112205:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112208:	89 55 c8             	mov    %edx,-0x38(%ebp)
c011220b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011220e:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0112211:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0112214:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112217:	8b 55 c8             	mov    -0x38(%ebp),%edx
c011221a:	89 10                	mov    %edx,(%eax)
c011221c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011221f:	8b 10                	mov    (%eax),%edx
c0112221:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112224:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112227:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011222a:	8b 55 c0             	mov    -0x40(%ebp),%edx
c011222d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0112230:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112233:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0112236:	89 10                	mov    %edx,(%eax)
}
c0112238:	83 c4 54             	add    $0x54,%esp
c011223b:	5b                   	pop    %ebx
c011223c:	5d                   	pop    %ebp
c011223d:	c3                   	ret    

c011223e <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c011223e:	55                   	push   %ebp
c011223f:	89 e5                	mov    %esp,%ebp
c0112241:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c0112244:	8b 45 08             	mov    0x8(%ebp),%eax
c0112247:	83 c0 1c             	add    $0x1c,%eax
c011224a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c011224d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112250:	8b 40 04             	mov    0x4(%eax),%eax
c0112253:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0112256:	8b 12                	mov    (%edx),%edx
c0112258:	89 55 f8             	mov    %edx,-0x8(%ebp)
c011225b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c011225e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0112261:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112264:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0112267:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011226a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011226d:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c011226f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112272:	83 c0 24             	add    $0x24,%eax
c0112275:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0112278:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011227b:	8b 40 04             	mov    0x4(%eax),%eax
c011227e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112281:	8b 12                	mov    (%edx),%edx
c0112283:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0112286:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0112289:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011228c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011228f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0112292:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112295:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112298:	89 10                	mov    %edx,(%eax)
}
c011229a:	c9                   	leave  
c011229b:	c3                   	ret    

c011229c <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c011229c:	55                   	push   %ebp
c011229d:	89 e5                	mov    %esp,%ebp
c011229f:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c01122a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01122a6:	74 2a                	je     c01122d2 <sfs_block_inuse+0x36>
c01122a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01122ab:	8b 40 04             	mov    0x4(%eax),%eax
c01122ae:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01122b1:	76 1f                	jbe    c01122d2 <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c01122b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01122b6:	8b 40 30             	mov    0x30(%eax),%eax
c01122b9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01122bc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01122c0:	89 04 24             	mov    %eax,(%esp)
c01122c3:	e8 19 f4 ff ff       	call   c01116e1 <bitmap_test>
c01122c8:	85 c0                	test   %eax,%eax
c01122ca:	0f 94 c0             	sete   %al
c01122cd:	0f b6 c0             	movzbl %al,%eax
c01122d0:	eb 2d                	jmp    c01122ff <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c01122d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01122d5:	8b 40 04             	mov    0x4(%eax),%eax
c01122d8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01122db:	89 54 24 10          	mov    %edx,0x10(%esp)
c01122df:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01122e3:	c7 44 24 08 90 93 11 	movl   $0xc0119390,0x8(%esp)
c01122ea:	c0 
c01122eb:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c01122f2:	00 
c01122f3:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01122fa:	e8 b5 eb fe ff       	call   c0100eb4 <__panic>
}
c01122ff:	c9                   	leave  
c0112300:	c3                   	ret    

c0112301 <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c0112301:	55                   	push   %ebp
c0112302:	89 e5                	mov    %esp,%ebp
c0112304:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0112307:	8b 45 08             	mov    0x8(%ebp),%eax
c011230a:	8b 40 30             	mov    0x30(%eax),%eax
c011230d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112310:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112314:	89 04 24             	mov    %eax,(%esp)
c0112317:	e8 63 f2 ff ff       	call   c011157f <bitmap_alloc>
c011231c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011231f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112323:	74 08                	je     c011232d <sfs_block_alloc+0x2c>
        return ret;
c0112325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112328:	e9 9f 00 00 00       	jmp    c01123cc <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c011232d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112330:	8b 40 08             	mov    0x8(%eax),%eax
c0112333:	85 c0                	test   %eax,%eax
c0112335:	75 24                	jne    c011235b <sfs_block_alloc+0x5a>
c0112337:	c7 44 24 0c c2 93 11 	movl   $0xc01193c2,0xc(%esp)
c011233e:	c0 
c011233f:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112346:	c0 
c0112347:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011234e:	00 
c011234f:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112356:	e8 59 eb fe ff       	call   c0100eb4 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c011235b:	8b 45 08             	mov    0x8(%ebp),%eax
c011235e:	8b 40 08             	mov    0x8(%eax),%eax
c0112361:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112364:	8b 45 08             	mov    0x8(%ebp),%eax
c0112367:	89 50 08             	mov    %edx,0x8(%eax)
c011236a:	8b 45 08             	mov    0x8(%ebp),%eax
c011236d:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c0112374:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112377:	8b 00                	mov    (%eax),%eax
c0112379:	89 44 24 04          	mov    %eax,0x4(%esp)
c011237d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112380:	89 04 24             	mov    %eax,(%esp)
c0112383:	e8 14 ff ff ff       	call   c011229c <sfs_block_inuse>
c0112388:	85 c0                	test   %eax,%eax
c011238a:	75 24                	jne    c01123b0 <sfs_block_alloc+0xaf>
c011238c:	c7 44 24 0c f4 93 11 	movl   $0xc01193f4,0xc(%esp)
c0112393:	c0 
c0112394:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011239b:	c0 
c011239c:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01123a3:	00 
c01123a4:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01123ab:	e8 04 eb fe ff       	call   c0100eb4 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c01123b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123b3:	8b 00                	mov    (%eax),%eax
c01123b5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01123bc:	00 
c01123bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01123c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01123c4:	89 04 24             	mov    %eax,(%esp)
c01123c7:	e8 f4 23 00 00       	call   c01147c0 <sfs_clear_block>
}
c01123cc:	c9                   	leave  
c01123cd:	c3                   	ret    

c01123ce <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c01123ce:	55                   	push   %ebp
c01123cf:	89 e5                	mov    %esp,%ebp
c01123d1:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c01123d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01123db:	8b 45 08             	mov    0x8(%ebp),%eax
c01123de:	89 04 24             	mov    %eax,(%esp)
c01123e1:	e8 b6 fe ff ff       	call   c011229c <sfs_block_inuse>
c01123e6:	85 c0                	test   %eax,%eax
c01123e8:	75 24                	jne    c011240e <sfs_block_free+0x40>
c01123ea:	c7 44 24 0c 15 94 11 	movl   $0xc0119415,0xc(%esp)
c01123f1:	c0 
c01123f2:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c01123f9:	c0 
c01123fa:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0112401:	00 
c0112402:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112409:	e8 a6 ea fe ff       	call   c0100eb4 <__panic>
    bitmap_free(sfs->freemap, ino);
c011240e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112411:	8b 40 30             	mov    0x30(%eax),%eax
c0112414:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112417:	89 54 24 04          	mov    %edx,0x4(%esp)
c011241b:	89 04 24             	mov    %eax,(%esp)
c011241e:	e8 f0 f2 ff ff       	call   c0111713 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c0112423:	8b 45 08             	mov    0x8(%ebp),%eax
c0112426:	8b 40 08             	mov    0x8(%eax),%eax
c0112429:	8d 50 01             	lea    0x1(%eax),%edx
c011242c:	8b 45 08             	mov    0x8(%ebp),%eax
c011242f:	89 50 08             	mov    %edx,0x8(%eax)
c0112432:	8b 45 08             	mov    0x8(%ebp),%eax
c0112435:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c011243c:	c9                   	leave  
c011243d:	c3                   	ret    

c011243e <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c011243e:	55                   	push   %ebp
c011243f:	89 e5                	mov    %esp,%ebp
c0112441:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c0112444:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c011244b:	e8 6d ca ff ff       	call   c010eebd <__alloc_inode>
c0112450:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112453:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112457:	0f 84 b5 00 00 00    	je     c0112512 <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c011245d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112460:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112464:	0f b7 c0             	movzwl %ax,%eax
c0112467:	89 04 24             	mov    %eax,(%esp)
c011246a:	e8 8b fc ff ff       	call   c01120fa <sfs_get_ops>
c011246f:	8b 55 08             	mov    0x8(%ebp),%edx
c0112472:	89 54 24 08          	mov    %edx,0x8(%esp)
c0112476:	89 44 24 04          	mov    %eax,0x4(%esp)
c011247a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011247d:	89 04 24             	mov    %eax,(%esp)
c0112480:	e8 61 ca ff ff       	call   c010eee6 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c0112485:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112488:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011248b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011248f:	74 0d                	je     c011249e <sfs_create_inode+0x60>
c0112491:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112494:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112497:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011249c:	74 24                	je     c01124c2 <sfs_create_inode+0x84>
c011249e:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c01124a5:	c0 
c01124a6:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c01124ad:	c0 
c01124ae:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c01124b5:	00 
c01124b6:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01124bd:	e8 f2 e9 fe ff       	call   c0100eb4 <__panic>
c01124c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01124c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c01124c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124cb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01124ce:	89 10                	mov    %edx,(%eax)
c01124d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124d3:	8b 55 10             	mov    0x10(%ebp),%edx
c01124d6:	89 50 04             	mov    %edx,0x4(%eax)
c01124d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124dc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01124e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124e6:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c01124ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124f0:	83 c0 10             	add    $0x10,%eax
c01124f3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01124fa:	00 
c01124fb:	89 04 24             	mov    %eax,(%esp)
c01124fe:	e8 86 75 ff ff       	call   c0109a89 <sem_init>
        *node_store = node;
c0112503:	8b 45 14             	mov    0x14(%ebp),%eax
c0112506:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112509:	89 10                	mov    %edx,(%eax)
        return 0;
c011250b:	b8 00 00 00 00       	mov    $0x0,%eax
c0112510:	eb 05                	jmp    c0112517 <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c0112512:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0112517:	c9                   	leave  
c0112518:	c3                   	ret    

c0112519 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0112519:	55                   	push   %ebp
c011251a:	89 e5                	mov    %esp,%ebp
c011251c:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c011251f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112522:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112526:	8b 45 08             	mov    0x8(%ebp),%eax
c0112529:	89 04 24             	mov    %eax,(%esp)
c011252c:	e8 18 fc ff ff       	call   c0112149 <sfs_hash_list>
c0112531:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112534:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112537:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c011253a:	eb 3e                	jmp    c011257a <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c011253c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011253f:	83 e8 24             	sub    $0x24,%eax
c0112542:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c0112545:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112548:	8b 40 04             	mov    0x4(%eax),%eax
c011254b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011254e:	75 2a                	jne    c011257a <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c0112550:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112553:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c0112556:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112559:	89 04 24             	mov    %eax,(%esp)
c011255c:	e8 37 ca ff ff       	call   c010ef98 <inode_ref_inc>
c0112561:	83 f8 01             	cmp    $0x1,%eax
c0112564:	75 0f                	jne    c0112575 <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c0112566:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112569:	8b 40 0c             	mov    0xc(%eax),%eax
c011256c:	8d 50 01             	lea    0x1(%eax),%edx
c011256f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112572:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c0112575:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112578:	eb 1c                	jmp    c0112596 <lookup_sfs_nolock+0x7d>
c011257a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011257d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0112580:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112583:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c0112586:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112589:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011258c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011258f:	75 ab                	jne    c011253c <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c0112591:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112596:	c9                   	leave  
c0112597:	c3                   	ret    

c0112598 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c0112598:	55                   	push   %ebp
c0112599:	89 e5                	mov    %esp,%ebp
c011259b:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c011259e:	8b 45 08             	mov    0x8(%ebp),%eax
c01125a1:	89 04 24             	mov    %eax,(%esp)
c01125a4:	e8 9d 22 00 00       	call   c0114846 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c01125a9:	8b 45 10             	mov    0x10(%ebp),%eax
c01125ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01125b3:	89 04 24             	mov    %eax,(%esp)
c01125b6:	e8 5e ff ff ff       	call   c0112519 <lookup_sfs_nolock>
c01125bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01125be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125c1:	85 c0                	test   %eax,%eax
c01125c3:	74 05                	je     c01125ca <sfs_load_inode+0x32>
        goto out_unlock;
c01125c5:	e9 3c 01 00 00       	jmp    c0112706 <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c01125ca:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c01125d1:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c01125d8:	e8 cf 26 ff ff       	call   c0104cac <kmalloc>
c01125dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01125e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01125e4:	75 05                	jne    c01125eb <sfs_load_inode+0x53>
        goto failed_unlock;
c01125e6:	e9 40 01 00 00       	jmp    c011272b <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c01125eb:	8b 45 10             	mov    0x10(%ebp),%eax
c01125ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01125f5:	89 04 24             	mov    %eax,(%esp)
c01125f8:	e8 9f fc ff ff       	call   c011229c <sfs_block_inuse>
c01125fd:	85 c0                	test   %eax,%eax
c01125ff:	75 24                	jne    c0112625 <sfs_load_inode+0x8d>
c0112601:	c7 44 24 0c 15 94 11 	movl   $0xc0119415,0xc(%esp)
c0112608:	c0 
c0112609:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112610:	c0 
c0112611:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0112618:	00 
c0112619:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112620:	e8 8f e8 fe ff       	call   c0100eb4 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c0112625:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011262c:	00 
c011262d:	8b 45 10             	mov    0x10(%ebp),%eax
c0112630:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112634:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c011263b:	00 
c011263c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011263f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112643:	8b 45 08             	mov    0x8(%ebp),%eax
c0112646:	89 04 24             	mov    %eax,(%esp)
c0112649:	e8 e9 1e 00 00       	call   c0114537 <sfs_rbuf>
c011264e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112651:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112655:	74 05                	je     c011265c <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c0112657:	e9 c4 00 00 00       	jmp    c0112720 <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c011265c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011265f:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0112663:	66 85 c0             	test   %ax,%ax
c0112666:	75 24                	jne    c011268c <sfs_load_inode+0xf4>
c0112668:	c7 44 24 0c 66 94 11 	movl   $0xc0119466,0xc(%esp)
c011266f:	c0 
c0112670:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112677:	c0 
c0112678:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c011267f:	00 
c0112680:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112687:	e8 28 e8 fe ff       	call   c0100eb4 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c011268c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011268f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112693:	8b 45 10             	mov    0x10(%ebp),%eax
c0112696:	89 44 24 08          	mov    %eax,0x8(%esp)
c011269a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011269d:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01126a4:	89 04 24             	mov    %eax,(%esp)
c01126a7:	e8 92 fd ff ff       	call   c011243e <sfs_create_inode>
c01126ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01126af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01126b3:	74 02                	je     c01126b7 <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c01126b5:	eb 69                	jmp    c0112720 <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c01126b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01126ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01126bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01126c1:	74 0d                	je     c01126d0 <sfs_load_inode+0x138>
c01126c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126c6:	8b 40 2c             	mov    0x2c(%eax),%eax
c01126c9:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01126ce:	74 24                	je     c01126f4 <sfs_load_inode+0x15c>
c01126d0:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c01126d7:	c0 
c01126d8:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c01126df:	c0 
c01126e0:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c01126e7:	00 
c01126e8:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01126ef:	e8 c0 e7 fe ff       	call   c0100eb4 <__panic>
c01126f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01126fe:	89 04 24             	mov    %eax,(%esp)
c0112701:	e8 6e fa ff ff       	call   c0112174 <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c0112706:	8b 45 08             	mov    0x8(%ebp),%eax
c0112709:	89 04 24             	mov    %eax,(%esp)
c011270c:	e8 61 21 00 00       	call   c0114872 <unlock_sfs_fs>
    *node_store = node;
c0112711:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112714:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112717:	89 10                	mov    %edx,(%eax)
    return 0;
c0112719:	b8 00 00 00 00       	mov    $0x0,%eax
c011271e:	eb 19                	jmp    c0112739 <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c0112720:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112723:	89 04 24             	mov    %eax,(%esp)
c0112726:	e8 9c 25 ff ff       	call   c0104cc7 <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c011272b:	8b 45 08             	mov    0x8(%ebp),%eax
c011272e:	89 04 24             	mov    %eax,(%esp)
c0112731:	e8 3c 21 00 00       	call   c0114872 <unlock_sfs_fs>
    return ret;
c0112736:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112739:	c9                   	leave  
c011273a:	c3                   	ret    

c011273b <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c011273b:	55                   	push   %ebp
c011273c:	89 e5                	mov    %esp,%ebp
c011273e:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c0112741:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112748:	76 24                	jbe    c011276e <sfs_bmap_get_sub_nolock+0x33>
c011274a:	c7 44 24 0c 77 94 11 	movl   $0xc0119477,0xc(%esp)
c0112751:	c0 
c0112752:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112759:	c0 
c011275a:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0112761:	00 
c0112762:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112769:	e8 46 e7 fe ff       	call   c0100eb4 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c011276e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c0112775:	8b 45 10             	mov    0x10(%ebp),%eax
c0112778:	c1 e0 02             	shl    $0x2,%eax
c011277b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c011277e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112781:	8b 00                	mov    (%eax),%eax
c0112783:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112786:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112789:	85 c0                	test   %eax,%eax
c011278b:	74 50                	je     c01127dd <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c011278d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112790:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112793:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112797:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011279b:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c01127a2:	00 
c01127a3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01127a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01127aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01127ad:	89 04 24             	mov    %eax,(%esp)
c01127b0:	e8 82 1d 00 00       	call   c0114537 <sfs_rbuf>
c01127b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01127b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01127bc:	74 08                	je     c01127c6 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c01127be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127c1:	e9 eb 00 00 00       	jmp    c01128b1 <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c01127c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01127c9:	85 c0                	test   %eax,%eax
c01127cb:	0f 85 9c 00 00 00    	jne    c011286d <sfs_bmap_get_sub_nolock+0x132>
c01127d1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01127d5:	0f 84 92 00 00 00    	je     c011286d <sfs_bmap_get_sub_nolock+0x132>
c01127db:	eb 2e                	jmp    c011280b <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c01127dd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01127e1:	75 05                	jne    c01127e8 <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c01127e3:	e9 85 00 00 00       	jmp    c011286d <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c01127e8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01127eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01127ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01127f2:	89 04 24             	mov    %eax,(%esp)
c01127f5:	e8 07 fb ff ff       	call   c0112301 <sfs_block_alloc>
c01127fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01127fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112801:	74 08                	je     c011280b <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c0112803:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112806:	e9 a6 00 00 00       	jmp    c01128b1 <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c011280b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011280e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112812:	8b 45 08             	mov    0x8(%ebp),%eax
c0112815:	89 04 24             	mov    %eax,(%esp)
c0112818:	e8 e4 fa ff ff       	call   c0112301 <sfs_block_alloc>
c011281d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112820:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112824:	74 02                	je     c0112828 <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c0112826:	eb 68                	jmp    c0112890 <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112828:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011282b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011282e:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112832:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112836:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011283d:	00 
c011283e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112841:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112845:	8b 45 08             	mov    0x8(%ebp),%eax
c0112848:	89 04 24             	mov    %eax,(%esp)
c011284b:	e8 a0 1d 00 00       	call   c01145f0 <sfs_wbuf>
c0112850:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112853:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112857:	74 14                	je     c011286d <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c0112859:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011285c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112860:	8b 45 08             	mov    0x8(%ebp),%eax
c0112863:	89 04 24             	mov    %eax,(%esp)
c0112866:	e8 63 fb ff ff       	call   c01123ce <sfs_block_free>
        goto failed_cleanup;
c011286b:	eb 23                	jmp    c0112890 <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c011286d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112870:	8b 10                	mov    (%eax),%edx
c0112872:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112875:	39 c2                	cmp    %eax,%edx
c0112877:	74 08                	je     c0112881 <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c0112879:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011287c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011287f:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c0112881:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112884:	8b 45 18             	mov    0x18(%ebp),%eax
c0112887:	89 10                	mov    %edx,(%eax)
    return 0;
c0112889:	b8 00 00 00 00       	mov    $0x0,%eax
c011288e:	eb 21                	jmp    c01128b1 <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c0112890:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112893:	8b 10                	mov    (%eax),%edx
c0112895:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112898:	39 c2                	cmp    %eax,%edx
c011289a:	74 12                	je     c01128ae <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c011289c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011289f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01128a6:	89 04 24             	mov    %eax,(%esp)
c01128a9:	e8 20 fb ff ff       	call   c01123ce <sfs_block_free>
    }
    return ret;
c01128ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01128b1:	c9                   	leave  
c01128b2:	c3                   	ret    

c01128b3 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c01128b3:	55                   	push   %ebp
c01128b4:	89 e5                	mov    %esp,%ebp
c01128b6:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c01128b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01128bc:	8b 00                	mov    (%eax),%eax
c01128be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c01128c1:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c01128c5:	77 5e                	ja     c0112925 <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c01128c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128ca:	8b 55 10             	mov    0x10(%ebp),%edx
c01128cd:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c01128d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01128d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01128d7:	85 c0                	test   %eax,%eax
c01128d9:	75 45                	jne    c0112920 <sfs_bmap_get_nolock+0x6d>
c01128db:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01128df:	74 3f                	je     c0112920 <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c01128e1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01128e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01128eb:	89 04 24             	mov    %eax,(%esp)
c01128ee:	e8 0e fa ff ff       	call   c0112301 <sfs_block_alloc>
c01128f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01128f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01128fa:	74 08                	je     c0112904 <sfs_bmap_get_nolock+0x51>
                return ret;
c01128fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01128ff:	e9 2f 01 00 00       	jmp    c0112a33 <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c0112904:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0112907:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011290a:	8b 55 10             	mov    0x10(%ebp),%edx
c011290d:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c0112911:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112914:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c011291b:	e9 c5 00 00 00       	jmp    c01129e5 <sfs_bmap_get_nolock+0x132>
c0112920:	e9 c0 00 00 00       	jmp    c01129e5 <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c0112925:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112929:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112930:	0f 87 93 00 00 00    	ja     c01129c9 <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c0112936:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112939:	8b 40 3c             	mov    0x3c(%eax),%eax
c011293c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c011293f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112942:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112946:	8b 45 14             	mov    0x14(%ebp),%eax
c0112949:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011294d:	8b 45 10             	mov    0x10(%ebp),%eax
c0112950:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112954:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112957:	89 44 24 04          	mov    %eax,0x4(%esp)
c011295b:	8b 45 08             	mov    0x8(%ebp),%eax
c011295e:	89 04 24             	mov    %eax,(%esp)
c0112961:	e8 d5 fd ff ff       	call   c011273b <sfs_bmap_get_sub_nolock>
c0112966:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112969:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011296d:	74 08                	je     c0112977 <sfs_bmap_get_nolock+0xc4>
            return ret;
c011296f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112972:	e9 bc 00 00 00       	jmp    c0112a33 <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c0112977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011297a:	8b 50 3c             	mov    0x3c(%eax),%edx
c011297d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112980:	39 c2                	cmp    %eax,%edx
c0112982:	74 43                	je     c01129c7 <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c0112984:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112987:	8b 40 3c             	mov    0x3c(%eax),%eax
c011298a:	85 c0                	test   %eax,%eax
c011298c:	74 24                	je     c01129b2 <sfs_bmap_get_nolock+0xff>
c011298e:	c7 44 24 0c 8e 94 11 	movl   $0xc011948e,0xc(%esp)
c0112995:	c0 
c0112996:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011299d:	c0 
c011299e:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01129a5:	00 
c01129a6:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01129ad:	e8 02 e5 fe ff       	call   c0100eb4 <__panic>
            din->indirect = ent;
c01129b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01129b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01129b8:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c01129bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01129be:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c01129c5:	eb 1e                	jmp    c01129e5 <sfs_bmap_get_nolock+0x132>
c01129c7:	eb 1c                	jmp    c01129e5 <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c01129c9:	c7 44 24 08 a4 94 11 	movl   $0xc01194a4,0x8(%esp)
c01129d0:	c0 
c01129d1:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c01129d8:	00 
c01129d9:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01129e0:	e8 cf e4 fe ff       	call   c0100eb4 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c01129e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01129e8:	85 c0                	test   %eax,%eax
c01129ea:	74 3a                	je     c0112a26 <sfs_bmap_get_nolock+0x173>
c01129ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01129ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01129f6:	89 04 24             	mov    %eax,(%esp)
c01129f9:	e8 9e f8 ff ff       	call   c011229c <sfs_block_inuse>
c01129fe:	85 c0                	test   %eax,%eax
c0112a00:	75 24                	jne    c0112a26 <sfs_bmap_get_nolock+0x173>
c0112a02:	c7 44 24 0c d0 94 11 	movl   $0xc01194d0,0xc(%esp)
c0112a09:	c0 
c0112a0a:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112a11:	c0 
c0112a12:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0112a19:	00 
c0112a1a:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112a21:	e8 8e e4 fe ff       	call   c0100eb4 <__panic>
    *ino_store = ino;
c0112a26:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112a29:	8b 45 18             	mov    0x18(%ebp),%eax
c0112a2c:	89 10                	mov    %edx,(%eax)
    return 0;
c0112a2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112a33:	c9                   	leave  
c0112a34:	c3                   	ret    

c0112a35 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c0112a35:	55                   	push   %ebp
c0112a36:	89 e5                	mov    %esp,%ebp
c0112a38:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112a3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a42:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a45:	89 04 24             	mov    %eax,(%esp)
c0112a48:	e8 4f f8 ff ff       	call   c011229c <sfs_block_inuse>
c0112a4d:	85 c0                	test   %eax,%eax
c0112a4f:	74 09                	je     c0112a5a <sfs_bmap_free_sub_nolock+0x25>
c0112a51:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112a58:	76 24                	jbe    c0112a7e <sfs_bmap_free_sub_nolock+0x49>
c0112a5a:	c7 44 24 0c f8 94 11 	movl   $0xc01194f8,0xc(%esp)
c0112a61:	c0 
c0112a62:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112a69:	c0 
c0112a6a:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112a71:	00 
c0112a72:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112a79:	e8 36 e4 fe ff       	call   c0100eb4 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112a7e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112a85:	8b 45 10             	mov    0x10(%ebp),%eax
c0112a88:	c1 e0 02             	shl    $0x2,%eax
c0112a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a91:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112a95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a98:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112a9c:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112aa3:	00 
c0112aa4:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112aa7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112aab:	8b 45 08             	mov    0x8(%ebp),%eax
c0112aae:	89 04 24             	mov    %eax,(%esp)
c0112ab1:	e8 81 1a 00 00       	call   c0114537 <sfs_rbuf>
c0112ab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112ab9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112abd:	74 05                	je     c0112ac4 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c0112abf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112ac2:	eb 54                	jmp    c0112b18 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112ac4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ac7:	85 c0                	test   %eax,%eax
c0112ac9:	74 48                	je     c0112b13 <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112acb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ace:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112ad2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ad5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112ad9:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112ae0:	00 
c0112ae1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112ae4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ae8:	8b 45 08             	mov    0x8(%ebp),%eax
c0112aeb:	89 04 24             	mov    %eax,(%esp)
c0112aee:	e8 fd 1a 00 00       	call   c01145f0 <sfs_wbuf>
c0112af3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112af6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112afa:	74 05                	je     c0112b01 <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c0112afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112aff:	eb 17                	jmp    c0112b18 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c0112b01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b0b:	89 04 24             	mov    %eax,(%esp)
c0112b0e:	e8 bb f8 ff ff       	call   c01123ce <sfs_block_free>
    }
    return 0;
c0112b13:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112b18:	c9                   	leave  
c0112b19:	c3                   	ret    

c0112b1a <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0112b1a:	55                   	push   %ebp
c0112b1b:	89 e5                	mov    %esp,%ebp
c0112b1d:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112b20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b23:	8b 00                	mov    (%eax),%eax
c0112b25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0112b28:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112b2c:	77 44                	ja     c0112b72 <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b31:	8b 55 10             	mov    0x10(%ebp),%edx
c0112b34:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112b38:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112b3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112b3f:	74 2a                	je     c0112b6b <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b4b:	89 04 24             	mov    %eax,(%esp)
c0112b4e:	e8 7b f8 ff ff       	call   c01123ce <sfs_block_free>
            din->direct[index] = 0;
c0112b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b56:	8b 55 10             	mov    0x10(%ebp),%edx
c0112b59:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112b60:	00 
            sin->dirty = 1;
c0112b61:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b64:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112b6b:	b8 00 00 00 00       	mov    $0x0,%eax
c0112b70:	eb 4f                	jmp    c0112bc1 <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112b72:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112b76:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112b7d:	77 3d                	ja     c0112bbc <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b82:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112b85:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112b88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112b8c:	74 27                	je     c0112bb5 <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112b8e:	8b 45 10             	mov    0x10(%ebp),%eax
c0112b91:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112b95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b98:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b9f:	89 04 24             	mov    %eax,(%esp)
c0112ba2:	e8 8e fe ff ff       	call   c0112a35 <sfs_bmap_free_sub_nolock>
c0112ba7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112baa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112bae:	74 05                	je     c0112bb5 <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112bb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112bb3:	eb 0c                	jmp    c0112bc1 <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112bb5:	b8 00 00 00 00       	mov    $0x0,%eax
c0112bba:	eb 05                	jmp    c0112bc1 <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112bbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112bc1:	c9                   	leave  
c0112bc2:	c3                   	ret    

c0112bc3 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0112bc3:	55                   	push   %ebp
c0112bc4:	89 e5                	mov    %esp,%ebp
c0112bc6:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112bc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bcc:	8b 00                	mov    (%eax),%eax
c0112bce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0112bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bd4:	8b 40 08             	mov    0x8(%eax),%eax
c0112bd7:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112bda:	73 24                	jae    c0112c00 <sfs_bmap_load_nolock+0x3d>
c0112bdc:	c7 44 24 0c 2c 95 11 	movl   $0xc011952c,0xc(%esp)
c0112be3:	c0 
c0112be4:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112beb:	c0 
c0112bec:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0112bf3:	00 
c0112bf4:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112bfb:	e8 b4 e2 fe ff       	call   c0100eb4 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0112c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c03:	8b 40 08             	mov    0x8(%eax),%eax
c0112c06:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112c09:	0f 94 c0             	sete   %al
c0112c0c:	0f b6 c0             	movzbl %al,%eax
c0112c0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0112c12:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c15:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112c19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c1c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112c20:	8b 45 10             	mov    0x10(%ebp),%eax
c0112c23:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112c27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c31:	89 04 24             	mov    %eax,(%esp)
c0112c34:	e8 7a fc ff ff       	call   c01128b3 <sfs_bmap_get_nolock>
c0112c39:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112c3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112c40:	74 05                	je     c0112c47 <sfs_bmap_load_nolock+0x84>
        return ret;
c0112c42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112c45:	eb 62                	jmp    c0112ca9 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112c47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c51:	89 04 24             	mov    %eax,(%esp)
c0112c54:	e8 43 f6 ff ff       	call   c011229c <sfs_block_inuse>
c0112c59:	85 c0                	test   %eax,%eax
c0112c5b:	75 24                	jne    c0112c81 <sfs_bmap_load_nolock+0xbe>
c0112c5d:	c7 44 24 0c 15 94 11 	movl   $0xc0119415,0xc(%esp)
c0112c64:	c0 
c0112c65:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112c6c:	c0 
c0112c6d:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112c74:	00 
c0112c75:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112c7c:	e8 33 e2 fe ff       	call   c0100eb4 <__panic>
    if (create) {
c0112c81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112c85:	74 0f                	je     c0112c96 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c8a:	8b 40 08             	mov    0x8(%eax),%eax
c0112c8d:	8d 50 01             	lea    0x1(%eax),%edx
c0112c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c93:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112c96:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112c9a:	74 08                	je     c0112ca4 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112c9c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112c9f:	8b 45 14             	mov    0x14(%ebp),%eax
c0112ca2:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112ca4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112ca9:	c9                   	leave  
c0112caa:	c3                   	ret    

c0112cab <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112cab:	55                   	push   %ebp
c0112cac:	89 e5                	mov    %esp,%ebp
c0112cae:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112cb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cb4:	8b 00                	mov    (%eax),%eax
c0112cb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0112cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cbc:	8b 40 08             	mov    0x8(%eax),%eax
c0112cbf:	85 c0                	test   %eax,%eax
c0112cc1:	75 24                	jne    c0112ce7 <sfs_bmap_truncate_nolock+0x3c>
c0112cc3:	c7 44 24 0c 41 95 11 	movl   $0xc0119541,0xc(%esp)
c0112cca:	c0 
c0112ccb:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112cd2:	c0 
c0112cd3:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0112cda:	00 
c0112cdb:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112ce2:	e8 cd e1 fe ff       	call   c0100eb4 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0112ce7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cea:	8b 40 08             	mov    0x8(%eax),%eax
c0112ced:	83 e8 01             	sub    $0x1,%eax
c0112cf0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112cf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cf7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112cfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0112cfe:	89 04 24             	mov    %eax,(%esp)
c0112d01:	e8 14 fe ff ff       	call   c0112b1a <sfs_bmap_free_nolock>
c0112d06:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112d09:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112d0d:	74 05                	je     c0112d14 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c0112d0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d12:	eb 1e                	jmp    c0112d32 <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c0112d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d17:	8b 40 08             	mov    0x8(%eax),%eax
c0112d1a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d20:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0112d23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d26:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c0112d2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d32:	c9                   	leave  
c0112d33:	c3                   	ret    

c0112d34 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0112d34:	55                   	push   %ebp
c0112d35:	89 e5                	mov    %esp,%ebp
c0112d37:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c0112d3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d3d:	8b 00                	mov    (%eax),%eax
c0112d3f:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112d43:	66 83 f8 02          	cmp    $0x2,%ax
c0112d47:	75 15                	jne    c0112d5e <sfs_dirent_read_nolock+0x2a>
c0112d49:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112d4d:	78 0f                	js     c0112d5e <sfs_dirent_read_nolock+0x2a>
c0112d4f:	8b 55 10             	mov    0x10(%ebp),%edx
c0112d52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d55:	8b 00                	mov    (%eax),%eax
c0112d57:	8b 40 08             	mov    0x8(%eax),%eax
c0112d5a:	39 c2                	cmp    %eax,%edx
c0112d5c:	72 24                	jb     c0112d82 <sfs_dirent_read_nolock+0x4e>
c0112d5e:	c7 44 24 0c 54 95 11 	movl   $0xc0119554,0xc(%esp)
c0112d65:	c0 
c0112d66:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112d6d:	c0 
c0112d6e:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c0112d75:	00 
c0112d76:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112d7d:	e8 32 e1 fe ff       	call   c0100eb4 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0112d82:	8b 45 10             	mov    0x10(%ebp),%eax
c0112d85:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0112d88:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112d8c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112d90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d93:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d97:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d9a:	89 04 24             	mov    %eax,(%esp)
c0112d9d:	e8 21 fe ff ff       	call   c0112bc3 <sfs_bmap_load_nolock>
c0112da2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112da5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112da9:	74 08                	je     c0112db3 <sfs_dirent_read_nolock+0x7f>
        return ret;
c0112dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112dae:	e9 80 00 00 00       	jmp    c0112e33 <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112db3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112db6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112dba:	8b 45 08             	mov    0x8(%ebp),%eax
c0112dbd:	89 04 24             	mov    %eax,(%esp)
c0112dc0:	e8 d7 f4 ff ff       	call   c011229c <sfs_block_inuse>
c0112dc5:	85 c0                	test   %eax,%eax
c0112dc7:	75 24                	jne    c0112ded <sfs_dirent_read_nolock+0xb9>
c0112dc9:	c7 44 24 0c 15 94 11 	movl   $0xc0119415,0xc(%esp)
c0112dd0:	c0 
c0112dd1:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112dd8:	c0 
c0112dd9:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c0112de0:	00 
c0112de1:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112de8:	e8 c7 e0 fe ff       	call   c0100eb4 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c0112ded:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112df0:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112df7:	00 
c0112df8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112dfc:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c0112e03:	00 
c0112e04:	8b 45 14             	mov    0x14(%ebp),%eax
c0112e07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e0e:	89 04 24             	mov    %eax,(%esp)
c0112e11:	e8 21 17 00 00       	call   c0114537 <sfs_rbuf>
c0112e16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112e19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112e1d:	74 05                	je     c0112e24 <sfs_dirent_read_nolock+0xf0>
        return ret;
c0112e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e22:	eb 0f                	jmp    c0112e33 <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0112e24:	8b 45 14             	mov    0x14(%ebp),%eax
c0112e27:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c0112e2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112e33:	c9                   	leave  
c0112e34:	c3                   	ret    

c0112e35 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c0112e35:	55                   	push   %ebp
c0112e36:	89 e5                	mov    %esp,%ebp
c0112e38:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c0112e3b:	8b 45 10             	mov    0x10(%ebp),%eax
c0112e3e:	89 04 24             	mov    %eax,(%esp)
c0112e41:	e8 5c 22 00 00       	call   c01150a2 <strlen>
c0112e46:	3d ff 00 00 00       	cmp    $0xff,%eax
c0112e4b:	76 24                	jbe    c0112e71 <sfs_dirent_search_nolock+0x3c>
c0112e4d:	c7 44 24 0c a0 95 11 	movl   $0xc01195a0,0xc(%esp)
c0112e54:	c0 
c0112e55:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0112e5c:	c0 
c0112e5d:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0112e64:	00 
c0112e65:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0112e6c:	e8 43 e0 fe ff       	call   c0100eb4 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0112e71:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0112e78:	e8 2f 1e ff ff       	call   c0104cac <kmalloc>
c0112e7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112e80:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112e84:	75 0a                	jne    c0112e90 <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c0112e86:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0112e8b:	e9 cb 00 00 00       	jmp    c0112f5b <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c0112e90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e93:	8b 00                	mov    (%eax),%eax
c0112e95:	8b 40 08             	mov    0x8(%eax),%eax
c0112e98:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c0112e9b:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112e9f:	74 08                	je     c0112ea9 <sfs_dirent_search_nolock+0x74>
c0112ea1:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112ea4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112ea7:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0112ea9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112eb0:	e9 85 00 00 00       	jmp    c0112f3a <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112eb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112eb8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112ebc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112ebf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ec3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ec6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112eca:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ecd:	89 04 24             	mov    %eax,(%esp)
c0112ed0:	e8 5f fe ff ff       	call   c0112d34 <sfs_dirent_read_nolock>
c0112ed5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112ed8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112edc:	74 02                	je     c0112ee0 <sfs_dirent_search_nolock+0xab>
            goto out;
c0112ede:	eb 6d                	jmp    c0112f4d <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c0112ee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ee3:	8b 00                	mov    (%eax),%eax
c0112ee5:	85 c0                	test   %eax,%eax
c0112ee7:	75 12                	jne    c0112efb <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0112ee9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112eed:	74 0a                	je     c0112ef9 <sfs_dirent_search_nolock+0xc4>
c0112eef:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112ef2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112ef5:	89 10                	mov    %edx,(%eax)
            continue ;
c0112ef7:	eb 3d                	jmp    c0112f36 <sfs_dirent_search_nolock+0x101>
c0112ef9:	eb 3b                	jmp    c0112f36 <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c0112efb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112efe:	83 c0 04             	add    $0x4,%eax
c0112f01:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f05:	8b 45 10             	mov    0x10(%ebp),%eax
c0112f08:	89 04 24             	mov    %eax,(%esp)
c0112f0b:	e8 8a 22 00 00       	call   c011519a <strcmp>
c0112f10:	85 c0                	test   %eax,%eax
c0112f12:	75 22                	jne    c0112f36 <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c0112f14:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0112f18:	74 08                	je     c0112f22 <sfs_dirent_search_nolock+0xed>
c0112f1a:	8b 45 18             	mov    0x18(%ebp),%eax
c0112f1d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112f20:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c0112f22:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112f26:	74 0c                	je     c0112f34 <sfs_dirent_search_nolock+0xff>
c0112f28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f2b:	8b 10                	mov    (%eax),%edx
c0112f2d:	8b 45 14             	mov    0x14(%ebp),%eax
c0112f30:	89 10                	mov    %edx,(%eax)
            goto out;
c0112f32:	eb 19                	jmp    c0112f4d <sfs_dirent_search_nolock+0x118>
c0112f34:	eb 17                	jmp    c0112f4d <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0112f36:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0112f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f3d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0112f40:	0f 8c 6f ff ff ff    	jl     c0112eb5 <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0112f46:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c0112f4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f50:	89 04 24             	mov    %eax,(%esp)
c0112f53:	e8 6f 1d ff ff       	call   c0104cc7 <kfree>
    return ret;
c0112f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112f5b:	c9                   	leave  
c0112f5c:	c3                   	ret    

c0112f5d <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c0112f5d:	55                   	push   %ebp
c0112f5e:	89 e5                	mov    %esp,%ebp
c0112f60:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0112f63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f66:	8b 00                	mov    (%eax),%eax
c0112f68:	8b 40 08             	mov    0x8(%eax),%eax
c0112f6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0112f6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112f75:	eb 43                	jmp    c0112fba <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112f77:	8b 45 14             	mov    0x14(%ebp),%eax
c0112f7a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f81:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112f85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f8f:	89 04 24             	mov    %eax,(%esp)
c0112f92:	e8 9d fd ff ff       	call   c0112d34 <sfs_dirent_read_nolock>
c0112f97:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112f9a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112f9e:	74 05                	je     c0112fa5 <sfs_dirent_findino_nolock+0x48>
            return ret;
c0112fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112fa3:	eb 22                	jmp    c0112fc7 <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c0112fa5:	8b 45 14             	mov    0x14(%ebp),%eax
c0112fa8:	8b 00                	mov    (%eax),%eax
c0112faa:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112fad:	75 07                	jne    c0112fb6 <sfs_dirent_findino_nolock+0x59>
            return 0;
c0112faf:	b8 00 00 00 00       	mov    $0x0,%eax
c0112fb4:	eb 11                	jmp    c0112fc7 <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0112fb6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0112fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fbd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0112fc0:	7c b5                	jl     c0112f77 <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c0112fc2:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0112fc7:	c9                   	leave  
c0112fc8:	c3                   	ret    

c0112fc9 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0112fc9:	55                   	push   %ebp
c0112fca:	89 e5                	mov    %esp,%ebp
c0112fcc:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c0112fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fd2:	89 04 24             	mov    %eax,(%esp)
c0112fd5:	e8 f4 f0 ff ff       	call   c01120ce <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0112fda:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0112fe1:	00 
c0112fe2:	8b 45 18             	mov    0x18(%ebp),%eax
c0112fe5:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112fe9:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0112fec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112ff0:	8b 45 10             	mov    0x10(%ebp),%eax
c0112ff3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ff7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ffa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ffe:	8b 45 08             	mov    0x8(%ebp),%eax
c0113001:	89 04 24             	mov    %eax,(%esp)
c0113004:	e8 2c fe ff ff       	call   c0112e35 <sfs_dirent_search_nolock>
c0113009:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c011300c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011300f:	89 04 24             	mov    %eax,(%esp)
c0113012:	e8 cd f0 ff ff       	call   c01120e4 <unlock_sin>
    if (ret == 0) {
c0113017:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011301b:	75 1c                	jne    c0113039 <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c011301d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113020:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113024:	8b 45 14             	mov    0x14(%ebp),%eax
c0113027:	89 44 24 04          	mov    %eax,0x4(%esp)
c011302b:	8b 45 08             	mov    0x8(%ebp),%eax
c011302e:	89 04 24             	mov    %eax,(%esp)
c0113031:	e8 62 f5 ff ff       	call   c0112598 <sfs_load_inode>
c0113036:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0113039:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011303c:	c9                   	leave  
c011303d:	c3                   	ret    

c011303e <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c011303e:	55                   	push   %ebp
c011303f:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c0113041:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113044:	83 e0 03             	and    $0x3,%eax
c0113047:	85 c0                	test   %eax,%eax
c0113049:	74 07                	je     c0113052 <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c011304b:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0113050:	eb 17                	jmp    c0113069 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c0113052:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c0113053:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113056:	83 e0 20             	and    $0x20,%eax
c0113059:	85 c0                	test   %eax,%eax
c011305b:	74 07                	je     c0113064 <sfs_opendir+0x26>
        return -E_ISDIR;
c011305d:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0113062:	eb 05                	jmp    c0113069 <sfs_opendir+0x2b>
    }
    return 0;
c0113064:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113069:	5d                   	pop    %ebp
c011306a:	c3                   	ret    

c011306b <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c011306b:	55                   	push   %ebp
c011306c:	89 e5                	mov    %esp,%ebp
    return 0;
c011306e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113073:	5d                   	pop    %ebp
c0113074:	c3                   	ret    

c0113075 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c0113075:	55                   	push   %ebp
c0113076:	89 e5                	mov    %esp,%ebp
c0113078:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c011307b:	8b 45 08             	mov    0x8(%ebp),%eax
c011307e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113081:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113085:	74 17                	je     c011309e <sfs_close+0x29>
c0113087:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011308a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011308d:	85 c0                	test   %eax,%eax
c011308f:	74 0d                	je     c011309e <sfs_close+0x29>
c0113091:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113094:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113097:	8b 40 18             	mov    0x18(%eax),%eax
c011309a:	85 c0                	test   %eax,%eax
c011309c:	75 24                	jne    c01130c2 <sfs_close+0x4d>
c011309e:	c7 44 24 0c c4 95 11 	movl   $0xc01195c4,0xc(%esp)
c01130a5:	c0 
c01130a6:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c01130ad:	c0 
c01130ae:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c01130b5:	00 
c01130b6:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01130bd:	e8 f2 dd fe ff       	call   c0100eb4 <__panic>
c01130c2:	c7 44 24 04 12 96 11 	movl   $0xc0119612,0x4(%esp)
c01130c9:	c0 
c01130ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130cd:	89 04 24             	mov    %eax,(%esp)
c01130d0:	e8 cb c0 ff ff       	call   c010f1a0 <inode_check>
c01130d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130d8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01130db:	8b 40 18             	mov    0x18(%eax),%eax
c01130de:	8b 55 08             	mov    0x8(%ebp),%edx
c01130e1:	89 14 24             	mov    %edx,(%esp)
c01130e4:	ff d0                	call   *%eax
}
c01130e6:	c9                   	leave  
c01130e7:	c3                   	ret    

c01130e8 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c01130e8:	55                   	push   %ebp
c01130e9:	89 e5                	mov    %esp,%ebp
c01130eb:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c01130ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130f1:	8b 00                	mov    (%eax),%eax
c01130f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c01130f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01130f9:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01130fd:	66 83 f8 02          	cmp    $0x2,%ax
c0113101:	75 24                	jne    c0113127 <sfs_io_nolock+0x3f>
c0113103:	c7 44 24 0c 18 96 11 	movl   $0xc0119618,0xc(%esp)
c011310a:	c0 
c011310b:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113112:	c0 
c0113113:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c011311a:	00 
c011311b:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113122:	e8 8d dd fe ff       	call   c0100eb4 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0113127:	8b 45 18             	mov    0x18(%ebp),%eax
c011312a:	8b 10                	mov    (%eax),%edx
c011312c:	8b 45 14             	mov    0x14(%ebp),%eax
c011312f:	01 d0                	add    %edx,%eax
c0113131:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c0113134:	8b 45 18             	mov    0x18(%ebp),%eax
c0113137:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c011313d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0113141:	78 12                	js     c0113155 <sfs_io_nolock+0x6d>
c0113143:	8b 45 14             	mov    0x14(%ebp),%eax
c0113146:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c011314b:	77 08                	ja     c0113155 <sfs_io_nolock+0x6d>
c011314d:	8b 45 14             	mov    0x14(%ebp),%eax
c0113150:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0113153:	7e 0a                	jle    c011315f <sfs_io_nolock+0x77>
        return -E_INVAL;
c0113155:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011315a:	e9 a0 02 00 00       	jmp    c01133ff <sfs_io_nolock+0x317>
    }
    if (offset == endpos) {
c011315f:	8b 45 14             	mov    0x14(%ebp),%eax
c0113162:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0113165:	75 0a                	jne    c0113171 <sfs_io_nolock+0x89>
        return 0;
c0113167:	b8 00 00 00 00       	mov    $0x0,%eax
c011316c:	e9 8e 02 00 00       	jmp    c01133ff <sfs_io_nolock+0x317>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c0113171:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113174:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0113179:	76 07                	jbe    c0113182 <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c011317b:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c0113182:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0113186:	75 2a                	jne    c01131b2 <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c0113188:	8b 55 14             	mov    0x14(%ebp),%edx
c011318b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011318e:	8b 00                	mov    (%eax),%eax
c0113190:	39 c2                	cmp    %eax,%edx
c0113192:	72 0a                	jb     c011319e <sfs_io_nolock+0xb6>
            return 0;
c0113194:	b8 00 00 00 00       	mov    $0x0,%eax
c0113199:	e9 61 02 00 00       	jmp    c01133ff <sfs_io_nolock+0x317>
        }
        if (endpos > din->size) {
c011319e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01131a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01131a4:	8b 00                	mov    (%eax),%eax
c01131a6:	39 c2                	cmp    %eax,%edx
c01131a8:	76 08                	jbe    c01131b2 <sfs_io_nolock+0xca>
            endpos = din->size;
c01131aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01131ad:	8b 00                	mov    (%eax),%eax
c01131af:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c01131b2:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01131b6:	74 10                	je     c01131c8 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c01131b8:	c7 45 f0 f0 45 11 c0 	movl   $0xc01145f0,-0x10(%ebp)
c01131bf:	c7 45 ec 07 45 11 c0 	movl   $0xc0114507,-0x14(%ebp)
c01131c6:	eb 0e                	jmp    c01131d6 <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c01131c8:	c7 45 f0 37 45 11 c0 	movl   $0xc0114537,-0x10(%ebp)
c01131cf:	c7 45 ec d7 44 11 c0 	movl   $0xc01144d7,-0x14(%ebp)
    }

    int ret = 0;
c01131d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c01131dd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c01131e4:	8b 45 14             	mov    0x14(%ebp),%eax
c01131e7:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c01131ed:	85 c0                	test   %eax,%eax
c01131ef:	0f 48 c2             	cmovs  %edx,%eax
c01131f2:	c1 f8 0c             	sar    $0xc,%eax
c01131f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c01131f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131fb:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0113201:	85 c0                	test   %eax,%eax
c0113203:	0f 48 c2             	cmovs  %edx,%eax
c0113206:	c1 f8 0c             	sar    $0xc,%eax
c0113209:	2b 45 e0             	sub    -0x20(%ebp),%eax
c011320c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
	// 先判断第一块的情况，如果没对齐，就从偏移的地方读取
    	if ((blkoff = offset % SFS_BLKSIZE) != 0)  {
c011320f:	8b 45 14             	mov    0x14(%ebp),%eax
c0113212:	99                   	cltd   
c0113213:	c1 ea 14             	shr    $0x14,%edx
c0113216:	01 d0                	add    %edx,%eax
c0113218:	25 ff 0f 00 00       	and    $0xfff,%eax
c011321d:	29 d0                	sub    %edx,%eax
c011321f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0113222:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0113226:	0f 84 9f 00 00 00    	je     c01132cb <sfs_io_nolock+0x1e3>
        // 判断 endpos 和 offset 是否在同一块中
        // 若为同一块 则 size 为 endpos - offset
        // 若不为同一块 则 size 为 SFS_BLKSIZE - blkoff(偏移) 为 第一块要读的大小
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c011322c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113230:	74 0a                	je     c011323c <sfs_io_nolock+0x154>
c0113232:	b8 00 10 00 00       	mov    $0x1000,%eax
c0113237:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c011323a:	eb 0a                	jmp    c0113246 <sfs_io_nolock+0x15e>
c011323c:	8b 45 14             	mov    0x14(%ebp),%eax
c011323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113242:	29 c2                	sub    %eax,%edx
c0113244:	89 d0                	mov    %edx,%eax
c0113246:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113249:	8d 45 cc             	lea    -0x34(%ebp),%eax
c011324c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113250:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113253:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113257:	8b 45 0c             	mov    0xc(%ebp),%eax
c011325a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011325e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113261:	89 04 24             	mov    %eax,(%esp)
c0113264:	e8 5a f9 ff ff       	call   c0112bc3 <sfs_bmap_load_nolock>
c0113269:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011326c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113270:	74 05                	je     c0113277 <sfs_io_nolock+0x18f>
            goto out;
c0113272:	e9 51 01 00 00       	jmp    c01133c8 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c0113277:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011327a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011327d:	89 54 24 10          	mov    %edx,0x10(%esp)
c0113281:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113285:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113288:	89 44 24 08          	mov    %eax,0x8(%esp)
c011328c:	8b 45 10             	mov    0x10(%ebp),%eax
c011328f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113293:	8b 45 08             	mov    0x8(%ebp),%eax
c0113296:	89 04 24             	mov    %eax,(%esp)
c0113299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011329c:	ff d0                	call   *%eax
c011329e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01132a1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01132a5:	74 05                	je     c01132ac <sfs_io_nolock+0x1c4>
            goto out;
c01132a7:	e9 1c 01 00 00       	jmp    c01133c8 <sfs_io_nolock+0x2e0>
        }
	//完成实际的读写操作
        alen += size;
c01132ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01132af:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c01132b2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01132b6:	75 05                	jne    c01132bd <sfs_io_nolock+0x1d5>
            goto out;
c01132b8:	e9 0b 01 00 00       	jmp    c01133c8 <sfs_io_nolock+0x2e0>
        }
        buf += size, blkno++; nblks--;
c01132bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01132c0:	01 45 10             	add    %eax,0x10(%ebp)
c01132c3:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c01132c7:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    // 中间对齐的情况，读取中间部分的数据，将其分为size大学的块，然后一次读一块直至读完
    size = SFS_BLKSIZE;
c01132cb:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks != 0) {
c01132d2:	eb 71                	jmp    c0113345 <sfs_io_nolock+0x25d>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01132d4:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01132d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01132db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01132de:	89 44 24 08          	mov    %eax,0x8(%esp)
c01132e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01132e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01132ec:	89 04 24             	mov    %eax,(%esp)
c01132ef:	e8 cf f8 ff ff       	call   c0112bc3 <sfs_bmap_load_nolock>
c01132f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01132f7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01132fb:	74 05                	je     c0113302 <sfs_io_nolock+0x21a>
            goto out;
c01132fd:	e9 c6 00 00 00       	jmp    c01133c8 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c0113302:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113305:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011330c:	00 
c011330d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113311:	8b 45 10             	mov    0x10(%ebp),%eax
c0113314:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113318:	8b 45 08             	mov    0x8(%ebp),%eax
c011331b:	89 04 24             	mov    %eax,(%esp)
c011331e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113321:	ff d0                	call   *%eax
c0113323:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113326:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011332a:	74 05                	je     c0113331 <sfs_io_nolock+0x249>
            goto out;
c011332c:	e9 97 00 00 00       	jmp    c01133c8 <sfs_io_nolock+0x2e0>
        }
        alen += size, buf += size, blkno++, nblks--;
c0113331:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113334:	01 45 e4             	add    %eax,-0x1c(%ebp)
c0113337:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011333a:	01 45 10             	add    %eax,0x10(%ebp)
c011333d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0113341:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
        buf += size, blkno++; nblks--;
    }

    // 中间对齐的情况，读取中间部分的数据，将其分为size大学的块，然后一次读一块直至读完
    size = SFS_BLKSIZE;
    while (nblks != 0) {
c0113345:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113349:	75 89                	jne    c01132d4 <sfs_io_nolock+0x1ec>
        }
        alen += size, buf += size, blkno++, nblks--;
    }

    // 末尾最后一块没对齐的情况，读取第三部分的数据
    if ((size = endpos % SFS_BLKSIZE) != 0) {
c011334b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011334e:	99                   	cltd   
c011334f:	c1 ea 14             	shr    $0x14,%edx
c0113352:	01 d0                	add    %edx,%eax
c0113354:	25 ff 0f 00 00       	and    $0xfff,%eax
c0113359:	29 d0                	sub    %edx,%eax
c011335b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011335e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0113362:	74 64                	je     c01133c8 <sfs_io_nolock+0x2e0>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113364:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0113367:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011336b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011336e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113372:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113375:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113379:	8b 45 08             	mov    0x8(%ebp),%eax
c011337c:	89 04 24             	mov    %eax,(%esp)
c011337f:	e8 3f f8 ff ff       	call   c0112bc3 <sfs_bmap_load_nolock>
c0113384:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113387:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011338b:	74 02                	je     c011338f <sfs_io_nolock+0x2a7>
            goto out;
c011338d:	eb 39                	jmp    c01133c8 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c011338f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113392:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113399:	00 
c011339a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011339e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01133a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01133a5:	8b 45 10             	mov    0x10(%ebp),%eax
c01133a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01133ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01133af:	89 04 24             	mov    %eax,(%esp)
c01133b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01133b5:	ff d0                	call   *%eax
c01133b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01133ba:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01133be:	74 02                	je     c01133c2 <sfs_io_nolock+0x2da>
            goto out;
c01133c0:	eb 06                	jmp    c01133c8 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c01133c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01133c5:	01 45 e4             	add    %eax,-0x1c(%ebp)
    }
out:
    *alenp = alen;
c01133c8:	8b 45 18             	mov    0x18(%ebp),%eax
c01133cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01133ce:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c01133d0:	8b 55 14             	mov    0x14(%ebp),%edx
c01133d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01133d6:	01 c2                	add    %eax,%edx
c01133d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133db:	8b 00                	mov    (%eax),%eax
c01133dd:	8b 00                	mov    (%eax),%eax
c01133df:	39 c2                	cmp    %eax,%edx
c01133e1:	76 19                	jbe    c01133fc <sfs_io_nolock+0x314>
        sin->din->size = offset + alen;
c01133e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133e6:	8b 00                	mov    (%eax),%eax
c01133e8:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01133eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01133ee:	01 ca                	add    %ecx,%edx
c01133f0:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c01133f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133f5:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c01133fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01133ff:	c9                   	leave  
c0113400:	c3                   	ret    

c0113401 <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c0113401:	55                   	push   %ebp
c0113402:	89 e5                	mov    %esp,%ebp
c0113404:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113407:	8b 45 08             	mov    0x8(%ebp),%eax
c011340a:	8b 40 38             	mov    0x38(%eax),%eax
c011340d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113410:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113414:	74 0a                	je     c0113420 <sfs_io+0x1f>
c0113416:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113419:	8b 40 6c             	mov    0x6c(%eax),%eax
c011341c:	85 c0                	test   %eax,%eax
c011341e:	74 24                	je     c0113444 <sfs_io+0x43>
c0113420:	c7 44 24 0c 34 96 11 	movl   $0xc0119634,0xc(%esp)
c0113427:	c0 
c0113428:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011342f:	c0 
c0113430:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c0113437:	00 
c0113438:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c011343f:	e8 70 da fe ff       	call   c0100eb4 <__panic>
c0113444:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113447:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011344a:	8b 45 08             	mov    0x8(%ebp),%eax
c011344d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113450:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113454:	74 0d                	je     c0113463 <sfs_io+0x62>
c0113456:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113459:	8b 40 2c             	mov    0x2c(%eax),%eax
c011345c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113461:	74 24                	je     c0113487 <sfs_io+0x86>
c0113463:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c011346a:	c0 
c011346b:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113472:	c0 
c0113473:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c011347a:	00 
c011347b:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113482:	e8 2d da fe ff       	call   c0100eb4 <__panic>
c0113487:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011348a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c011348d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113490:	89 04 24             	mov    %eax,(%esp)
c0113493:	e8 36 ec ff ff       	call   c01120ce <lock_sin>
    {
        size_t alen = iob->io_resid;
c0113498:	8b 45 0c             	mov    0xc(%ebp),%eax
c011349b:	8b 40 0c             	mov    0xc(%eax),%eax
c011349e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c01134a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01134a4:	8b 50 04             	mov    0x4(%eax),%edx
c01134a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01134aa:	8b 00                	mov    (%eax),%eax
c01134ac:	8b 4d 10             	mov    0x10(%ebp),%ecx
c01134af:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c01134b3:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c01134b6:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01134ba:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01134be:	89 44 24 08          	mov    %eax,0x8(%esp)
c01134c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01134c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01134c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01134cc:	89 04 24             	mov    %eax,(%esp)
c01134cf:	e8 14 fc ff ff       	call   c01130e8 <sfs_io_nolock>
c01134d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c01134d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01134da:	85 c0                	test   %eax,%eax
c01134dc:	74 12                	je     c01134f0 <sfs_io+0xef>
            iobuf_skip(iob, alen);
c01134de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01134e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01134e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01134e8:	89 04 24             	mov    %eax,(%esp)
c01134eb:	e8 b1 7e ff ff       	call   c010b3a1 <iobuf_skip>
        }
    }
    unlock_sin(sin);
c01134f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01134f3:	89 04 24             	mov    %eax,(%esp)
c01134f6:	e8 e9 eb ff ff       	call   c01120e4 <unlock_sin>
    return ret;
c01134fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c01134fe:	c9                   	leave  
c01134ff:	c3                   	ret    

c0113500 <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c0113500:	55                   	push   %ebp
c0113501:	89 e5                	mov    %esp,%ebp
c0113503:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c0113506:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011350d:	00 
c011350e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113511:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113515:	8b 45 08             	mov    0x8(%ebp),%eax
c0113518:	89 04 24             	mov    %eax,(%esp)
c011351b:	e8 e1 fe ff ff       	call   c0113401 <sfs_io>
}
c0113520:	c9                   	leave  
c0113521:	c3                   	ret    

c0113522 <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c0113522:	55                   	push   %ebp
c0113523:	89 e5                	mov    %esp,%ebp
c0113525:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c0113528:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011352f:	00 
c0113530:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113533:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113537:	8b 45 08             	mov    0x8(%ebp),%eax
c011353a:	89 04 24             	mov    %eax,(%esp)
c011353d:	e8 bf fe ff ff       	call   c0113401 <sfs_io>
}
c0113542:	c9                   	leave  
c0113543:	c3                   	ret    

c0113544 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c0113544:	55                   	push   %ebp
c0113545:	89 e5                	mov    %esp,%ebp
c0113547:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c011354a:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0113551:	00 
c0113552:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113559:	00 
c011355a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011355d:	89 04 24             	mov    %eax,(%esp)
c0113560:	e8 93 1e 00 00       	call   c01153f8 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0113565:	8b 45 08             	mov    0x8(%ebp),%eax
c0113568:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011356b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011356f:	74 17                	je     c0113588 <sfs_fstat+0x44>
c0113571:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113574:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113577:	85 c0                	test   %eax,%eax
c0113579:	74 0d                	je     c0113588 <sfs_fstat+0x44>
c011357b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011357e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113581:	8b 40 28             	mov    0x28(%eax),%eax
c0113584:	85 c0                	test   %eax,%eax
c0113586:	75 24                	jne    c01135ac <sfs_fstat+0x68>
c0113588:	c7 44 24 0c 60 96 11 	movl   $0xc0119660,0xc(%esp)
c011358f:	c0 
c0113590:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113597:	c0 
c0113598:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
c011359f:	00 
c01135a0:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01135a7:	e8 08 d9 fe ff       	call   c0100eb4 <__panic>
c01135ac:	c7 44 24 04 b0 96 11 	movl   $0xc01196b0,0x4(%esp)
c01135b3:	c0 
c01135b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135b7:	89 04 24             	mov    %eax,(%esp)
c01135ba:	e8 e1 bb ff ff       	call   c010f1a0 <inode_check>
c01135bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135c2:	8b 40 3c             	mov    0x3c(%eax),%eax
c01135c5:	8b 40 28             	mov    0x28(%eax),%eax
c01135c8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01135cb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01135cf:	8b 55 08             	mov    0x8(%ebp),%edx
c01135d2:	89 14 24             	mov    %edx,(%esp)
c01135d5:	ff d0                	call   *%eax
c01135d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01135da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01135de:	74 05                	je     c01135e5 <sfs_fstat+0xa1>
        return ret;
c01135e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01135e3:	eb 71                	jmp    c0113656 <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c01135e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01135e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01135eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01135ef:	74 0d                	je     c01135fe <sfs_fstat+0xba>
c01135f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01135f4:	8b 40 2c             	mov    0x2c(%eax),%eax
c01135f7:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01135fc:	74 24                	je     c0113622 <sfs_fstat+0xde>
c01135fe:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c0113605:	c0 
c0113606:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011360d:	c0 
c011360e:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c0113615:	00 
c0113616:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c011361d:	e8 92 d8 fe ff       	call   c0100eb4 <__panic>
c0113622:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113625:	8b 00                	mov    (%eax),%eax
c0113627:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c011362a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011362d:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113631:	0f b7 d0             	movzwl %ax,%edx
c0113634:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113637:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c011363a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011363d:	8b 50 08             	mov    0x8(%eax),%edx
c0113640:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113643:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c0113646:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113649:	8b 10                	mov    (%eax),%edx
c011364b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011364e:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0113651:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113656:	c9                   	leave  
c0113657:	c3                   	ret    

c0113658 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c0113658:	55                   	push   %ebp
c0113659:	89 e5                	mov    %esp,%ebp
c011365b:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011365e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113661:	8b 40 38             	mov    0x38(%eax),%eax
c0113664:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113667:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011366b:	74 0a                	je     c0113677 <sfs_fsync+0x1f>
c011366d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113670:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113673:	85 c0                	test   %eax,%eax
c0113675:	74 24                	je     c011369b <sfs_fsync+0x43>
c0113677:	c7 44 24 0c 34 96 11 	movl   $0xc0119634,0xc(%esp)
c011367e:	c0 
c011367f:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113686:	c0 
c0113687:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c011368e:	00 
c011368f:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113696:	e8 19 d8 fe ff       	call   c0100eb4 <__panic>
c011369b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011369e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01136a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01136a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01136a7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01136ab:	74 0d                	je     c01136ba <sfs_fsync+0x62>
c01136ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01136b0:	8b 40 2c             	mov    0x2c(%eax),%eax
c01136b3:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01136b8:	74 24                	je     c01136de <sfs_fsync+0x86>
c01136ba:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c01136c1:	c0 
c01136c2:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c01136c9:	c0 
c01136ca:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
c01136d1:	00 
c01136d2:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01136d9:	e8 d6 d7 fe ff       	call   c0100eb4 <__panic>
c01136de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01136e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c01136e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c01136eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01136ee:	8b 40 08             	mov    0x8(%eax),%eax
c01136f1:	85 c0                	test   %eax,%eax
c01136f3:	74 6b                	je     c0113760 <sfs_fsync+0x108>
        lock_sin(sin);
c01136f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01136f8:	89 04 24             	mov    %eax,(%esp)
c01136fb:	e8 ce e9 ff ff       	call   c01120ce <lock_sin>
        {
            if (sin->dirty) {
c0113700:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113703:	8b 40 08             	mov    0x8(%eax),%eax
c0113706:	85 c0                	test   %eax,%eax
c0113708:	74 4b                	je     c0113755 <sfs_fsync+0xfd>
                sin->dirty = 0;
c011370a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011370d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c0113714:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113717:	8b 50 04             	mov    0x4(%eax),%edx
c011371a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011371d:	8b 00                	mov    (%eax),%eax
c011371f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113726:	00 
c0113727:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011372b:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0113732:	00 
c0113733:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113737:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011373a:	89 04 24             	mov    %eax,(%esp)
c011373d:	e8 ae 0e 00 00       	call   c01145f0 <sfs_wbuf>
c0113742:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113749:	74 0a                	je     c0113755 <sfs_fsync+0xfd>
                    sin->dirty = 1;
c011374b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011374e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c0113755:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113758:	89 04 24             	mov    %eax,(%esp)
c011375b:	e8 84 e9 ff ff       	call   c01120e4 <unlock_sin>
    }
    return ret;
c0113760:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113763:	c9                   	leave  
c0113764:	c3                   	ret    

c0113765 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c0113765:	55                   	push   %ebp
c0113766:	89 e5                	mov    %esp,%ebp
c0113768:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011376b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011376e:	8b 40 0c             	mov    0xc(%eax),%eax
c0113771:	83 f8 02             	cmp    $0x2,%eax
c0113774:	76 15                	jbe    c011378b <sfs_namefile+0x26>
c0113776:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c011377d:	e8 2a 15 ff ff       	call   c0104cac <kmalloc>
c0113782:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113785:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113789:	75 0a                	jne    c0113795 <sfs_namefile+0x30>
        return -E_NO_MEM;
c011378b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113790:	e9 bd 02 00 00       	jmp    c0113a52 <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113795:	8b 45 08             	mov    0x8(%ebp),%eax
c0113798:	8b 40 38             	mov    0x38(%eax),%eax
c011379b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011379e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01137a2:	74 0a                	je     c01137ae <sfs_namefile+0x49>
c01137a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01137a7:	8b 40 6c             	mov    0x6c(%eax),%eax
c01137aa:	85 c0                	test   %eax,%eax
c01137ac:	74 24                	je     c01137d2 <sfs_namefile+0x6d>
c01137ae:	c7 44 24 0c 34 96 11 	movl   $0xc0119634,0xc(%esp)
c01137b5:	c0 
c01137b6:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c01137bd:	c0 
c01137be:	c7 44 24 04 e1 02 00 	movl   $0x2e1,0x4(%esp)
c01137c5:	00 
c01137c6:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01137cd:	e8 e2 d6 fe ff       	call   c0100eb4 <__panic>
c01137d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01137d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01137d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01137db:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01137de:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01137e2:	74 0d                	je     c01137f1 <sfs_namefile+0x8c>
c01137e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01137e7:	8b 40 2c             	mov    0x2c(%eax),%eax
c01137ea:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01137ef:	74 24                	je     c0113815 <sfs_namefile+0xb0>
c01137f1:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c01137f8:	c0 
c01137f9:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113800:	c0 
c0113801:	c7 44 24 04 e2 02 00 	movl   $0x2e2,0x4(%esp)
c0113808:	00 
c0113809:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113810:	e8 9f d6 fe ff       	call   c0100eb4 <__panic>
c0113815:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113818:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c011381b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011381e:	8b 10                	mov    (%eax),%edx
c0113820:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113823:	8b 40 0c             	mov    0xc(%eax),%eax
c0113826:	01 d0                	add    %edx,%eax
c0113828:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c011382b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011382e:	8b 40 0c             	mov    0xc(%eax),%eax
c0113831:	83 e8 02             	sub    $0x2,%eax
c0113834:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0113837:	8b 45 08             	mov    0x8(%ebp),%eax
c011383a:	89 04 24             	mov    %eax,(%esp)
c011383d:	e8 56 b7 ff ff       	call   c010ef98 <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c0113842:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113849:	00 
c011384a:	8d 45 c8             	lea    -0x38(%ebp),%eax
c011384d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113851:	c7 44 24 08 b8 96 11 	movl   $0xc01196b8,0x8(%esp)
c0113858:	c0 
c0113859:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011385c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113860:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113863:	89 04 24             	mov    %eax,(%esp)
c0113866:	e8 5e f7 ff ff       	call   c0112fc9 <sfs_lookup_once>
c011386b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011386e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113872:	74 05                	je     c0113879 <sfs_namefile+0x114>
            goto failed;
c0113874:	e9 c0 01 00 00       	jmp    c0113a39 <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c0113879:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011387c:	8b 40 04             	mov    0x4(%eax),%eax
c011387f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c0113882:	8b 45 08             	mov    0x8(%ebp),%eax
c0113885:	89 04 24             	mov    %eax,(%esp)
c0113888:	e8 25 b7 ff ff       	call   c010efb2 <inode_ref_dec>
        if (node == parent) {
c011388d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113890:	39 45 08             	cmp    %eax,0x8(%ebp)
c0113893:	75 76                	jne    c011390b <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c0113895:	8b 45 08             	mov    0x8(%ebp),%eax
c0113898:	89 04 24             	mov    %eax,(%esp)
c011389b:	e8 12 b7 ff ff       	call   c010efb2 <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c01138a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138a3:	8b 40 0c             	mov    0xc(%eax),%eax
c01138a6:	2b 45 e8             	sub    -0x18(%ebp),%eax
c01138a9:	83 e8 02             	sub    $0x2,%eax
c01138ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c01138af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138b2:	8b 00                	mov    (%eax),%eax
c01138b4:	8d 50 01             	lea    0x1(%eax),%edx
c01138b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01138ba:	89 44 24 08          	mov    %eax,0x8(%esp)
c01138be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01138c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01138c5:	89 14 24             	mov    %edx,(%esp)
c01138c8:	e8 6a 1b 00 00       	call   c0115437 <memmove>
c01138cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c01138d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01138d3:	83 e8 01             	sub    $0x1,%eax
c01138d6:	c6 00 2f             	movb   $0x2f,(%eax)
c01138d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01138dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01138df:	01 d0                	add    %edx,%eax
c01138e1:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c01138e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01138e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01138eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138ee:	89 04 24             	mov    %eax,(%esp)
c01138f1:	e8 ab 7a ff ff       	call   c010b3a1 <iobuf_skip>
    kfree(entry);
c01138f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01138f9:	89 04 24             	mov    %eax,(%esp)
c01138fc:	e8 c6 13 ff ff       	call   c0104cc7 <kfree>
    return 0;
c0113901:	b8 00 00 00 00       	mov    $0x0,%eax
c0113906:	e9 47 01 00 00       	jmp    c0113a52 <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c011390b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011390e:	89 45 08             	mov    %eax,0x8(%ebp)
c0113911:	8b 45 08             	mov    0x8(%ebp),%eax
c0113914:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0113917:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c011391b:	74 0d                	je     c011392a <sfs_namefile+0x1c5>
c011391d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113920:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113923:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113928:	74 24                	je     c011394e <sfs_namefile+0x1e9>
c011392a:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c0113931:	c0 
c0113932:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113939:	c0 
c011393a:	c7 44 24 04 f5 02 00 	movl   $0x2f5,0x4(%esp)
c0113941:	00 
c0113942:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113949:	e8 66 d5 fe ff       	call   c0100eb4 <__panic>
c011394e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113951:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0113954:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113957:	8b 40 04             	mov    0x4(%eax),%eax
c011395a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011395d:	74 0f                	je     c011396e <sfs_namefile+0x209>
c011395f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113962:	8b 00                	mov    (%eax),%eax
c0113964:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113968:	66 83 f8 02          	cmp    $0x2,%ax
c011396c:	74 24                	je     c0113992 <sfs_namefile+0x22d>
c011396e:	c7 44 24 0c bc 96 11 	movl   $0xc01196bc,0xc(%esp)
c0113975:	c0 
c0113976:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011397d:	c0 
c011397e:	c7 44 24 04 f6 02 00 	movl   $0x2f6,0x4(%esp)
c0113985:	00 
c0113986:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c011398d:	e8 22 d5 fe ff       	call   c0100eb4 <__panic>

        lock_sin(sin);
c0113992:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113995:	89 04 24             	mov    %eax,(%esp)
c0113998:	e8 31 e7 ff ff       	call   c01120ce <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c011399d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01139a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01139a7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01139ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01139b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01139b5:	89 04 24             	mov    %eax,(%esp)
c01139b8:	e8 a0 f5 ff ff       	call   c0112f5d <sfs_dirent_findino_nolock>
c01139bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c01139c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139c3:	89 04 24             	mov    %eax,(%esp)
c01139c6:	e8 19 e7 ff ff       	call   c01120e4 <unlock_sin>

        if (ret != 0) {
c01139cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01139cf:	74 03                	je     c01139d4 <sfs_namefile+0x26f>
            goto failed;
c01139d1:	90                   	nop
c01139d2:	eb 65                	jmp    c0113a39 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c01139d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139d7:	83 c0 04             	add    $0x4,%eax
c01139da:	89 04 24             	mov    %eax,(%esp)
c01139dd:	e8 c0 16 00 00       	call   c01150a2 <strlen>
c01139e2:	83 c0 01             	add    $0x1,%eax
c01139e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01139e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01139eb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01139ee:	76 09                	jbe    c01139f9 <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c01139f0:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c01139f7:	eb 40                	jmp    c0113a39 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c01139f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01139fc:	29 45 e8             	sub    %eax,-0x18(%ebp)
c01139ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a02:	f7 d8                	neg    %eax
c0113a04:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0113a07:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a0a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a10:	83 c0 04             	add    $0x4,%eax
c0113a13:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113a17:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a1e:	89 04 24             	mov    %eax,(%esp)
c0113a21:	e8 b4 1a 00 00       	call   c01154da <memcpy>
        ptr[alen - 1] = '/';
c0113a26:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a29:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113a2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a2f:	01 d0                	add    %edx,%eax
c0113a31:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0113a34:	e9 09 fe ff ff       	jmp    c0113842 <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a3c:	89 04 24             	mov    %eax,(%esp)
c0113a3f:	e8 6e b5 ff ff       	call   c010efb2 <inode_ref_dec>
    kfree(entry);
c0113a44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a47:	89 04 24             	mov    %eax,(%esp)
c0113a4a:	e8 78 12 ff ff       	call   c0104cc7 <kfree>
    return ret;
c0113a4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113a52:	c9                   	leave  
c0113a53:	c3                   	ret    

c0113a54 <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113a54:	55                   	push   %ebp
c0113a55:	89 e5                	mov    %esp,%ebp
c0113a57:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113a5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a5d:	8b 00                	mov    (%eax),%eax
c0113a5f:	8b 40 08             	mov    0x8(%eax),%eax
c0113a62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113a65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113a6c:	eb 4c                	jmp    c0113aba <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113a6e:	8b 45 14             	mov    0x14(%ebp),%eax
c0113a71:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113a75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a78:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113a7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a83:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a86:	89 04 24             	mov    %eax,(%esp)
c0113a89:	e8 a6 f2 ff ff       	call   c0112d34 <sfs_dirent_read_nolock>
c0113a8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113a91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113a95:	74 05                	je     c0113a9c <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113a97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a9a:	eb 2b                	jmp    c0113ac7 <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113a9c:	8b 45 14             	mov    0x14(%ebp),%eax
c0113a9f:	8b 00                	mov    (%eax),%eax
c0113aa1:	85 c0                	test   %eax,%eax
c0113aa3:	74 11                	je     c0113ab6 <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113aa5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113aa9:	75 07                	jne    c0113ab2 <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113aab:	b8 00 00 00 00       	mov    $0x0,%eax
c0113ab0:	eb 15                	jmp    c0113ac7 <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c0113ab2:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113ab6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113aba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113abd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113ac0:	7c ac                	jl     c0113a6e <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0113ac2:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113ac7:	c9                   	leave  
c0113ac8:	c3                   	ret    

c0113ac9 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113ac9:	55                   	push   %ebp
c0113aca:	89 e5                	mov    %esp,%ebp
c0113acc:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113acf:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113ad6:	e8 d1 11 ff ff       	call   c0104cac <kmalloc>
c0113adb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113ade:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113ae2:	75 0a                	jne    c0113aee <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113ae4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113ae9:	e9 6b 01 00 00       	jmp    c0113c59 <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113aee:	8b 45 08             	mov    0x8(%ebp),%eax
c0113af1:	8b 40 38             	mov    0x38(%eax),%eax
c0113af4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113af7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113afb:	74 0a                	je     c0113b07 <sfs_getdirentry+0x3e>
c0113afd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b00:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113b03:	85 c0                	test   %eax,%eax
c0113b05:	74 24                	je     c0113b2b <sfs_getdirentry+0x62>
c0113b07:	c7 44 24 0c 34 96 11 	movl   $0xc0119634,0xc(%esp)
c0113b0e:	c0 
c0113b0f:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113b16:	c0 
c0113b17:	c7 44 24 04 37 03 00 	movl   $0x337,0x4(%esp)
c0113b1e:	00 
c0113b1f:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113b26:	e8 89 d3 fe ff       	call   c0100eb4 <__panic>
c0113b2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b2e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113b31:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113b37:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113b3b:	74 0d                	je     c0113b4a <sfs_getdirentry+0x81>
c0113b3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b40:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113b43:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113b48:	74 24                	je     c0113b6e <sfs_getdirentry+0xa5>
c0113b4a:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c0113b51:	c0 
c0113b52:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113b59:	c0 
c0113b5a:	c7 44 24 04 38 03 00 	movl   $0x338,0x4(%esp)
c0113b61:	00 
c0113b62:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113b69:	e8 46 d3 fe ff       	call   c0100eb4 <__panic>
c0113b6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b71:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113b74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b77:	8b 40 04             	mov    0x4(%eax),%eax
c0113b7a:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113b7d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113b81:	78 0a                	js     c0113b8d <sfs_getdirentry+0xc4>
c0113b83:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113b86:	0f b6 c0             	movzbl %al,%eax
c0113b89:	85 c0                	test   %eax,%eax
c0113b8b:	74 15                	je     c0113ba2 <sfs_getdirentry+0xd9>
        kfree(entry);
c0113b8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113b90:	89 04 24             	mov    %eax,(%esp)
c0113b93:	e8 2f 11 ff ff       	call   c0104cc7 <kfree>
        return -E_INVAL;
c0113b98:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113b9d:	e9 b7 00 00 00       	jmp    c0113c59 <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0113ba2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113ba5:	c1 e8 08             	shr    $0x8,%eax
c0113ba8:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113bab:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0113bae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113bb1:	8b 00                	mov    (%eax),%eax
c0113bb3:	8b 40 08             	mov    0x8(%eax),%eax
c0113bb6:	39 c2                	cmp    %eax,%edx
c0113bb8:	76 15                	jbe    c0113bcf <sfs_getdirentry+0x106>
        kfree(entry);
c0113bba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113bbd:	89 04 24             	mov    %eax,(%esp)
c0113bc0:	e8 02 11 ff ff       	call   c0104cc7 <kfree>
        return -E_NOENT;
c0113bc5:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113bca:	e9 8a 00 00 00       	jmp    c0113c59 <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c0113bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113bd2:	89 04 24             	mov    %eax,(%esp)
c0113bd5:	e8 f4 e4 ff ff       	call   c01120ce <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113bda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113bdd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113be1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113be4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113be8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113beb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113bef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113bf2:	89 04 24             	mov    %eax,(%esp)
c0113bf5:	e8 5a fe ff ff       	call   c0113a54 <sfs_getdirentry_sub_nolock>
c0113bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113bfd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113c01:	74 0d                	je     c0113c10 <sfs_getdirentry+0x147>
        unlock_sin(sin);
c0113c03:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c06:	89 04 24             	mov    %eax,(%esp)
c0113c09:	e8 d6 e4 ff ff       	call   c01120e4 <unlock_sin>
        goto out;
c0113c0e:	eb 3b                	jmp    c0113c4b <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c0113c10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c13:	89 04 24             	mov    %eax,(%esp)
c0113c16:	e8 c9 e4 ff ff       	call   c01120e4 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113c1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c1e:	83 c0 04             	add    $0x4,%eax
c0113c21:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113c28:	00 
c0113c29:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113c30:	00 
c0113c31:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113c38:	00 
c0113c39:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113c40:	89 04 24             	mov    %eax,(%esp)
c0113c43:	e8 44 76 ff ff       	call   c010b28c <iobuf_move>
c0113c48:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113c4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c4e:	89 04 24             	mov    %eax,(%esp)
c0113c51:	e8 71 10 ff ff       	call   c0104cc7 <kfree>
    return ret;
c0113c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113c59:	c9                   	leave  
c0113c5a:	c3                   	ret    

c0113c5b <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113c5b:	55                   	push   %ebp
c0113c5c:	89 e5                	mov    %esp,%ebp
c0113c5e:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c64:	8b 40 38             	mov    0x38(%eax),%eax
c0113c67:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113c6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113c6e:	74 0a                	je     c0113c7a <sfs_reclaim+0x1f>
c0113c70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c73:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113c76:	85 c0                	test   %eax,%eax
c0113c78:	74 24                	je     c0113c9e <sfs_reclaim+0x43>
c0113c7a:	c7 44 24 0c 34 96 11 	movl   $0xc0119634,0xc(%esp)
c0113c81:	c0 
c0113c82:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113c89:	c0 
c0113c8a:	c7 44 24 04 55 03 00 	movl   $0x355,0x4(%esp)
c0113c91:	00 
c0113c92:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113c99:	e8 16 d2 fe ff       	call   c0100eb4 <__panic>
c0113c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ca1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113ca4:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ca7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113caa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113cae:	74 0d                	je     c0113cbd <sfs_reclaim+0x62>
c0113cb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113cb3:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113cb6:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113cbb:	74 24                	je     c0113ce1 <sfs_reclaim+0x86>
c0113cbd:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c0113cc4:	c0 
c0113cc5:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113ccc:	c0 
c0113ccd:	c7 44 24 04 56 03 00 	movl   $0x356,0x4(%esp)
c0113cd4:	00 
c0113cd5:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113cdc:	e8 d3 d1 fe ff       	call   c0100eb4 <__panic>
c0113ce1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113ce4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0113ce7:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0113cee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113cf1:	89 04 24             	mov    %eax,(%esp)
c0113cf4:	e8 4d 0b 00 00       	call   c0114846 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0113cf9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113cfc:	8b 40 0c             	mov    0xc(%eax),%eax
c0113cff:	85 c0                	test   %eax,%eax
c0113d01:	7f 24                	jg     c0113d27 <sfs_reclaim+0xcc>
c0113d03:	c7 44 24 0c ee 96 11 	movl   $0xc01196ee,0xc(%esp)
c0113d0a:	c0 
c0113d0b:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113d12:	c0 
c0113d13:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c0113d1a:	00 
c0113d1b:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113d22:	e8 8d d1 fe ff       	call   c0100eb4 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0113d27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d2a:	8b 40 0c             	mov    0xc(%eax),%eax
c0113d2d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113d30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d33:	89 50 0c             	mov    %edx,0xc(%eax)
c0113d36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d39:	8b 40 0c             	mov    0xc(%eax),%eax
c0113d3c:	85 c0                	test   %eax,%eax
c0113d3e:	0f 85 a1 01 00 00    	jne    c0113ee5 <sfs_reclaim+0x28a>
c0113d44:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d47:	89 04 24             	mov    %eax,(%esp)
c0113d4a:	e8 74 e3 ff ff       	call   c01120c3 <inode_ref_count>
c0113d4f:	85 c0                	test   %eax,%eax
c0113d51:	0f 85 8e 01 00 00    	jne    c0113ee5 <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0113d57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d5a:	8b 00                	mov    (%eax),%eax
c0113d5c:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113d60:	66 85 c0             	test   %ax,%ax
c0113d63:	0f 85 81 00 00 00    	jne    c0113dea <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0113d69:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d6c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113d6f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113d73:	74 17                	je     c0113d8c <sfs_reclaim+0x131>
c0113d75:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d78:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113d7b:	85 c0                	test   %eax,%eax
c0113d7d:	74 0d                	je     c0113d8c <sfs_reclaim+0x131>
c0113d7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d82:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113d85:	8b 40 30             	mov    0x30(%eax),%eax
c0113d88:	85 c0                	test   %eax,%eax
c0113d8a:	75 24                	jne    c0113db0 <sfs_reclaim+0x155>
c0113d8c:	c7 44 24 0c 08 97 11 	movl   $0xc0119708,0xc(%esp)
c0113d93:	c0 
c0113d94:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113d9b:	c0 
c0113d9c:	c7 44 24 04 60 03 00 	movl   $0x360,0x4(%esp)
c0113da3:	00 
c0113da4:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113dab:	e8 04 d1 fe ff       	call   c0100eb4 <__panic>
c0113db0:	c7 44 24 04 59 97 11 	movl   $0xc0119759,0x4(%esp)
c0113db7:	c0 
c0113db8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113dbb:	89 04 24             	mov    %eax,(%esp)
c0113dbe:	e8 dd b3 ff ff       	call   c010f1a0 <inode_check>
c0113dc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113dc6:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113dc9:	8b 40 30             	mov    0x30(%eax),%eax
c0113dcc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113dd3:	00 
c0113dd4:	8b 55 08             	mov    0x8(%ebp),%edx
c0113dd7:	89 14 24             	mov    %edx,(%esp)
c0113dda:	ff d0                	call   *%eax
c0113ddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113ddf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113de3:	74 05                	je     c0113dea <sfs_reclaim+0x18f>
            goto failed_unlock;
c0113de5:	e9 fb 00 00 00       	jmp    c0113ee5 <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0113dea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ded:	8b 40 08             	mov    0x8(%eax),%eax
c0113df0:	85 c0                	test   %eax,%eax
c0113df2:	74 76                	je     c0113e6a <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c0113df4:	8b 45 08             	mov    0x8(%ebp),%eax
c0113df7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0113dfa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113dfe:	74 17                	je     c0113e17 <sfs_reclaim+0x1bc>
c0113e00:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e03:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e06:	85 c0                	test   %eax,%eax
c0113e08:	74 0d                	je     c0113e17 <sfs_reclaim+0x1bc>
c0113e0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e0d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e10:	8b 40 18             	mov    0x18(%eax),%eax
c0113e13:	85 c0                	test   %eax,%eax
c0113e15:	75 24                	jne    c0113e3b <sfs_reclaim+0x1e0>
c0113e17:	c7 44 24 0c c4 95 11 	movl   $0xc01195c4,0xc(%esp)
c0113e1e:	c0 
c0113e1f:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113e26:	c0 
c0113e27:	c7 44 24 04 65 03 00 	movl   $0x365,0x4(%esp)
c0113e2e:	00 
c0113e2f:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113e36:	e8 79 d0 fe ff       	call   c0100eb4 <__panic>
c0113e3b:	c7 44 24 04 12 96 11 	movl   $0xc0119612,0x4(%esp)
c0113e42:	c0 
c0113e43:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e46:	89 04 24             	mov    %eax,(%esp)
c0113e49:	e8 52 b3 ff ff       	call   c010f1a0 <inode_check>
c0113e4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e51:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e54:	8b 40 18             	mov    0x18(%eax),%eax
c0113e57:	8b 55 08             	mov    0x8(%ebp),%edx
c0113e5a:	89 14 24             	mov    %edx,(%esp)
c0113e5d:	ff d0                	call   *%eax
c0113e5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113e62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113e66:	74 02                	je     c0113e6a <sfs_reclaim+0x20f>
            goto failed_unlock;
c0113e68:	eb 7b                	jmp    c0113ee5 <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c0113e6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e6d:	89 04 24             	mov    %eax,(%esp)
c0113e70:	e8 c9 e3 ff ff       	call   c011223e <sfs_remove_links>
    unlock_sfs_fs(sfs);
c0113e75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e78:	89 04 24             	mov    %eax,(%esp)
c0113e7b:	e8 f2 09 00 00       	call   c0114872 <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c0113e80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e83:	8b 00                	mov    (%eax),%eax
c0113e85:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113e89:	66 85 c0             	test   %ax,%ax
c0113e8c:	75 38                	jne    c0113ec6 <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c0113e8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e91:	8b 40 04             	mov    0x4(%eax),%eax
c0113e94:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113e98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e9b:	89 04 24             	mov    %eax,(%esp)
c0113e9e:	e8 2b e5 ff ff       	call   c01123ce <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c0113ea3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ea6:	8b 00                	mov    (%eax),%eax
c0113ea8:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113eab:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113eae:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113eb2:	74 12                	je     c0113ec6 <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c0113eb4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113eb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113ebb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ebe:	89 04 24             	mov    %eax,(%esp)
c0113ec1:	e8 08 e5 ff ff       	call   c01123ce <sfs_block_free>
        }
    }
    kfree(sin->din);
c0113ec6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ec9:	8b 00                	mov    (%eax),%eax
c0113ecb:	89 04 24             	mov    %eax,(%esp)
c0113ece:	e8 f4 0d ff ff       	call   c0104cc7 <kfree>
    vop_kill(node);
c0113ed3:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ed6:	89 04 24             	mov    %eax,(%esp)
c0113ed9:	e8 41 b0 ff ff       	call   c010ef1f <inode_kill>
    return 0;
c0113ede:	b8 00 00 00 00       	mov    $0x0,%eax
c0113ee3:	eb 0e                	jmp    c0113ef3 <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c0113ee5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ee8:	89 04 24             	mov    %eax,(%esp)
c0113eeb:	e8 82 09 00 00       	call   c0114872 <unlock_sfs_fs>
    return ret;
c0113ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113ef3:	c9                   	leave  
c0113ef4:	c3                   	ret    

c0113ef5 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0113ef5:	55                   	push   %ebp
c0113ef6:	89 e5                	mov    %esp,%ebp
c0113ef8:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113efb:	8b 45 08             	mov    0x8(%ebp),%eax
c0113efe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113f01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113f05:	74 0d                	je     c0113f14 <sfs_gettype+0x1f>
c0113f07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113f0a:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113f0d:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113f12:	74 24                	je     c0113f38 <sfs_gettype+0x43>
c0113f14:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c0113f1b:	c0 
c0113f1c:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113f23:	c0 
c0113f24:	c7 44 24 04 80 03 00 	movl   $0x380,0x4(%esp)
c0113f2b:	00 
c0113f2c:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113f33:	e8 7c cf fe ff       	call   c0100eb4 <__panic>
c0113f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113f3b:	8b 00                	mov    (%eax),%eax
c0113f3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c0113f40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f43:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113f47:	0f b7 c0             	movzwl %ax,%eax
c0113f4a:	83 f8 02             	cmp    $0x2,%eax
c0113f4d:	74 0c                	je     c0113f5b <sfs_gettype+0x66>
c0113f4f:	83 f8 03             	cmp    $0x3,%eax
c0113f52:	74 27                	je     c0113f7b <sfs_gettype+0x86>
c0113f54:	83 f8 01             	cmp    $0x1,%eax
c0113f57:	74 12                	je     c0113f6b <sfs_gettype+0x76>
c0113f59:	eb 30                	jmp    c0113f8b <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0113f5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f5e:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0113f64:	b8 00 00 00 00       	mov    $0x0,%eax
c0113f69:	eb 4a                	jmp    c0113fb5 <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0113f6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f6e:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c0113f74:	b8 00 00 00 00       	mov    $0x0,%eax
c0113f79:	eb 3a                	jmp    c0113fb5 <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0113f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f7e:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c0113f84:	b8 00 00 00 00       	mov    $0x0,%eax
c0113f89:	eb 2a                	jmp    c0113fb5 <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c0113f8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f8e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113f92:	0f b7 c0             	movzwl %ax,%eax
c0113f95:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113f99:	c7 44 24 08 60 93 11 	movl   $0xc0119360,0x8(%esp)
c0113fa0:	c0 
c0113fa1:	c7 44 24 04 8c 03 00 	movl   $0x38c,0x4(%esp)
c0113fa8:	00 
c0113fa9:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0113fb0:	e8 ff ce fe ff       	call   c0100eb4 <__panic>
}
c0113fb5:	c9                   	leave  
c0113fb6:	c3                   	ret    

c0113fb7 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0113fb7:	55                   	push   %ebp
c0113fb8:	89 e5                	mov    %esp,%ebp
c0113fba:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c0113fbd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113fc1:	78 0a                	js     c0113fcd <sfs_tryseek+0x16>
c0113fc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113fc6:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0113fcb:	76 0a                	jbe    c0113fd7 <sfs_tryseek+0x20>
        return -E_INVAL;
c0113fcd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113fd2:	e9 ca 00 00 00       	jmp    c01140a1 <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113fd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fda:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113fdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113fe1:	74 0d                	je     c0113ff0 <sfs_tryseek+0x39>
c0113fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113fe6:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113fe9:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113fee:	74 24                	je     c0114014 <sfs_tryseek+0x5d>
c0113ff0:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c0113ff7:	c0 
c0113ff8:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0113fff:	c0 
c0114000:	c7 44 24 04 97 03 00 	movl   $0x397,0x4(%esp)
c0114007:	00 
c0114008:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c011400f:	e8 a0 ce fe ff       	call   c0100eb4 <__panic>
c0114014:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114017:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c011401a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011401d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114020:	8b 00                	mov    (%eax),%eax
c0114022:	8b 00                	mov    (%eax),%eax
c0114024:	39 c2                	cmp    %eax,%edx
c0114026:	76 74                	jbe    c011409c <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0114028:	8b 45 08             	mov    0x8(%ebp),%eax
c011402b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011402e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0114032:	74 17                	je     c011404b <sfs_tryseek+0x94>
c0114034:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114037:	8b 40 3c             	mov    0x3c(%eax),%eax
c011403a:	85 c0                	test   %eax,%eax
c011403c:	74 0d                	je     c011404b <sfs_tryseek+0x94>
c011403e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114041:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114044:	8b 40 30             	mov    0x30(%eax),%eax
c0114047:	85 c0                	test   %eax,%eax
c0114049:	75 24                	jne    c011406f <sfs_tryseek+0xb8>
c011404b:	c7 44 24 0c 08 97 11 	movl   $0xc0119708,0xc(%esp)
c0114052:	c0 
c0114053:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011405a:	c0 
c011405b:	c7 44 24 04 99 03 00 	movl   $0x399,0x4(%esp)
c0114062:	00 
c0114063:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c011406a:	e8 45 ce fe ff       	call   c0100eb4 <__panic>
c011406f:	c7 44 24 04 59 97 11 	movl   $0xc0119759,0x4(%esp)
c0114076:	c0 
c0114077:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011407a:	89 04 24             	mov    %eax,(%esp)
c011407d:	e8 1e b1 ff ff       	call   c010f1a0 <inode_check>
c0114082:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114085:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114088:	8b 40 30             	mov    0x30(%eax),%eax
c011408b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011408e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114092:	8b 55 08             	mov    0x8(%ebp),%edx
c0114095:	89 14 24             	mov    %edx,(%esp)
c0114098:	ff d0                	call   *%eax
c011409a:	eb 05                	jmp    c01140a1 <sfs_tryseek+0xea>
    }
    return 0;
c011409c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01140a1:	c9                   	leave  
c01140a2:	c3                   	ret    

c01140a3 <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c01140a3:	55                   	push   %ebp
c01140a4:	89 e5                	mov    %esp,%ebp
c01140a6:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c01140a9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01140ad:	78 0a                	js     c01140b9 <sfs_truncfile+0x16>
c01140af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01140b2:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01140b7:	76 0a                	jbe    c01140c3 <sfs_truncfile+0x20>
        return -E_INVAL;
c01140b9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01140be:	e9 d4 01 00 00       	jmp    c0114297 <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01140c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01140c6:	8b 40 38             	mov    0x38(%eax),%eax
c01140c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01140cc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01140d0:	74 0a                	je     c01140dc <sfs_truncfile+0x39>
c01140d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140d5:	8b 40 6c             	mov    0x6c(%eax),%eax
c01140d8:	85 c0                	test   %eax,%eax
c01140da:	74 24                	je     c0114100 <sfs_truncfile+0x5d>
c01140dc:	c7 44 24 0c 34 96 11 	movl   $0xc0119634,0xc(%esp)
c01140e3:	c0 
c01140e4:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c01140eb:	c0 
c01140ec:	c7 44 24 04 a6 03 00 	movl   $0x3a6,0x4(%esp)
c01140f3:	00 
c01140f4:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01140fb:	e8 b4 cd fe ff       	call   c0100eb4 <__panic>
c0114100:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114103:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114106:	8b 45 08             	mov    0x8(%ebp),%eax
c0114109:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011410c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114110:	74 0d                	je     c011411f <sfs_truncfile+0x7c>
c0114112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114115:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114118:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011411d:	74 24                	je     c0114143 <sfs_truncfile+0xa0>
c011411f:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c0114126:	c0 
c0114127:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011412e:	c0 
c011412f:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c0114136:	00 
c0114137:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c011413e:	e8 71 cd fe ff       	call   c0100eb4 <__panic>
c0114143:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114146:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0114149:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011414c:	8b 00                	mov    (%eax),%eax
c011414e:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c0114151:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c0114158:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c011415f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114162:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114165:	01 d0                	add    %edx,%eax
c0114167:	83 e8 01             	sub    $0x1,%eax
c011416a:	ba 00 00 00 00       	mov    $0x0,%edx
c011416f:	f7 75 d8             	divl   -0x28(%ebp)
c0114172:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c0114175:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114178:	8b 10                	mov    (%eax),%edx
c011417a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011417d:	39 c2                	cmp    %eax,%edx
c011417f:	75 39                	jne    c01141ba <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c0114181:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114184:	8b 40 08             	mov    0x8(%eax),%eax
c0114187:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011418a:	74 24                	je     c01141b0 <sfs_truncfile+0x10d>
c011418c:	c7 44 24 0c 62 97 11 	movl   $0xc0119762,0xc(%esp)
c0114193:	c0 
c0114194:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011419b:	c0 
c011419c:	c7 44 24 04 ae 03 00 	movl   $0x3ae,0x4(%esp)
c01141a3:	00 
c01141a4:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01141ab:	e8 04 cd fe ff       	call   c0100eb4 <__panic>
        return 0;
c01141b0:	b8 00 00 00 00       	mov    $0x0,%eax
c01141b5:	e9 dd 00 00 00       	jmp    c0114297 <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c01141ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01141bd:	89 04 24             	mov    %eax,(%esp)
c01141c0:	e8 09 df ff ff       	call   c01120ce <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c01141c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01141c8:	8b 40 08             	mov    0x8(%eax),%eax
c01141cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c01141ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01141d1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01141d4:	73 3f                	jae    c0114215 <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c01141d6:	eb 33                	jmp    c011420b <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c01141d8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01141df:	00 
c01141e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01141e3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01141e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01141ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01141ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01141f1:	89 04 24             	mov    %eax,(%esp)
c01141f4:	e8 ca e9 ff ff       	call   c0112bc3 <sfs_bmap_load_nolock>
c01141f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01141fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114200:	74 05                	je     c0114207 <sfs_truncfile+0x164>
                goto out_unlock;
c0114202:	e9 82 00 00 00       	jmp    c0114289 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c0114207:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c011420b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011420e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114211:	75 c5                	jne    c01141d8 <sfs_truncfile+0x135>
c0114213:	eb 33                	jmp    c0114248 <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c0114215:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114218:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011421b:	73 2b                	jae    c0114248 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c011421d:	eb 21                	jmp    c0114240 <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c011421f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114222:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114226:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114229:	89 04 24             	mov    %eax,(%esp)
c011422c:	e8 7a ea ff ff       	call   c0112cab <sfs_bmap_truncate_nolock>
c0114231:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114234:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114238:	74 02                	je     c011423c <sfs_truncfile+0x199>
                goto out_unlock;
c011423a:	eb 4d                	jmp    c0114289 <sfs_truncfile+0x1e6>
            }
            nblks --;
c011423c:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c0114240:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114243:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114246:	75 d7                	jne    c011421f <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c0114248:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011424b:	8b 40 08             	mov    0x8(%eax),%eax
c011424e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114251:	74 24                	je     c0114277 <sfs_truncfile+0x1d4>
c0114253:	c7 44 24 0c 77 97 11 	movl   $0xc0119777,0xc(%esp)
c011425a:	c0 
c011425b:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0114262:	c0 
c0114263:	c7 44 24 04 c7 03 00 	movl   $0x3c7,0x4(%esp)
c011426a:	00 
c011426b:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0114272:	e8 3d cc fe ff       	call   c0100eb4 <__panic>
    din->size = len;
c0114277:	8b 55 0c             	mov    0xc(%ebp),%edx
c011427a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011427d:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c011427f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114282:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c0114289:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011428c:	89 04 24             	mov    %eax,(%esp)
c011428f:	e8 50 de ff ff       	call   c01120e4 <unlock_sin>
    return ret;
c0114294:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114297:	c9                   	leave  
c0114298:	c3                   	ret    

c0114299 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c0114299:	55                   	push   %ebp
c011429a:	89 e5                	mov    %esp,%ebp
c011429c:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011429f:	8b 45 08             	mov    0x8(%ebp),%eax
c01142a2:	8b 40 38             	mov    0x38(%eax),%eax
c01142a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01142a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01142ac:	74 0a                	je     c01142b8 <sfs_lookup+0x1f>
c01142ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01142b1:	8b 40 6c             	mov    0x6c(%eax),%eax
c01142b4:	85 c0                	test   %eax,%eax
c01142b6:	74 24                	je     c01142dc <sfs_lookup+0x43>
c01142b8:	c7 44 24 0c 34 96 11 	movl   $0xc0119634,0xc(%esp)
c01142bf:	c0 
c01142c0:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c01142c7:	c0 
c01142c8:	c7 44 24 04 d7 03 00 	movl   $0x3d7,0x4(%esp)
c01142cf:	00 
c01142d0:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c01142d7:	e8 d8 cb fe ff       	call   c0100eb4 <__panic>
c01142dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01142df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c01142e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142e5:	0f b6 00             	movzbl (%eax),%eax
c01142e8:	84 c0                	test   %al,%al
c01142ea:	74 0a                	je     c01142f6 <sfs_lookup+0x5d>
c01142ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142ef:	0f b6 00             	movzbl (%eax),%eax
c01142f2:	3c 2f                	cmp    $0x2f,%al
c01142f4:	75 24                	jne    c011431a <sfs_lookup+0x81>
c01142f6:	c7 44 24 0c 8c 97 11 	movl   $0xc011978c,0xc(%esp)
c01142fd:	c0 
c01142fe:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c0114305:	c0 
c0114306:	c7 44 24 04 d8 03 00 	movl   $0x3d8,0x4(%esp)
c011430d:	00 
c011430e:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c0114315:	e8 9a cb fe ff       	call   c0100eb4 <__panic>
    vop_ref_inc(node);
c011431a:	8b 45 08             	mov    0x8(%ebp),%eax
c011431d:	89 04 24             	mov    %eax,(%esp)
c0114320:	e8 73 ac ff ff       	call   c010ef98 <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114325:	8b 45 08             	mov    0x8(%ebp),%eax
c0114328:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011432b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011432f:	74 0d                	je     c011433e <sfs_lookup+0xa5>
c0114331:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114334:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114337:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011433c:	74 24                	je     c0114362 <sfs_lookup+0xc9>
c011433e:	c7 44 24 0c 30 94 11 	movl   $0xc0119430,0xc(%esp)
c0114345:	c0 
c0114346:	c7 44 24 08 df 93 11 	movl   $0xc01193df,0x8(%esp)
c011434d:	c0 
c011434e:	c7 44 24 04 da 03 00 	movl   $0x3da,0x4(%esp)
c0114355:	00 
c0114356:	c7 04 24 77 93 11 c0 	movl   $0xc0119377,(%esp)
c011435d:	e8 52 cb fe ff       	call   c0100eb4 <__panic>
c0114362:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114365:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c0114368:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011436b:	8b 00                	mov    (%eax),%eax
c011436d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0114371:	66 83 f8 02          	cmp    $0x2,%ax
c0114375:	74 12                	je     c0114389 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c0114377:	8b 45 08             	mov    0x8(%ebp),%eax
c011437a:	89 04 24             	mov    %eax,(%esp)
c011437d:	e8 30 ac ff ff       	call   c010efb2 <inode_ref_dec>
        return -E_NOTDIR;
c0114382:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c0114387:	eb 4e                	jmp    c01143d7 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c0114389:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114390:	00 
c0114391:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0114394:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114398:	8b 45 0c             	mov    0xc(%ebp),%eax
c011439b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011439f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01143a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01143a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01143a9:	89 04 24             	mov    %eax,(%esp)
c01143ac:	e8 18 ec ff ff       	call   c0112fc9 <sfs_lookup_once>
c01143b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c01143b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01143b7:	89 04 24             	mov    %eax,(%esp)
c01143ba:	e8 f3 ab ff ff       	call   c010efb2 <inode_ref_dec>
    if (ret != 0) {
c01143bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01143c3:	74 05                	je     c01143ca <sfs_lookup+0x131>
        return ret;
c01143c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01143c8:	eb 0d                	jmp    c01143d7 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c01143ca:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01143cd:	8b 45 10             	mov    0x10(%ebp),%eax
c01143d0:	89 10                	mov    %edx,(%eax)
    return 0;
c01143d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01143d7:	c9                   	leave  
c01143d8:	c3                   	ret    

c01143d9 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c01143d9:	55                   	push   %ebp
c01143da:	89 e5                	mov    %esp,%ebp
c01143dc:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c01143df:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01143e3:	75 06                	jne    c01143eb <sfs_rwblock_nolock+0x12>
c01143e5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01143e9:	75 0b                	jne    c01143f6 <sfs_rwblock_nolock+0x1d>
c01143eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01143ee:	8b 40 04             	mov    0x4(%eax),%eax
c01143f1:	3b 45 10             	cmp    0x10(%ebp),%eax
c01143f4:	77 24                	ja     c011441a <sfs_rwblock_nolock+0x41>
c01143f6:	c7 44 24 0c ac 97 11 	movl   $0xc01197ac,0xc(%esp)
c01143fd:	c0 
c01143fe:	c7 44 24 08 e0 97 11 	movl   $0xc01197e0,0x8(%esp)
c0114405:	c0 
c0114406:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c011440d:	00 
c011440e:	c7 04 24 f5 97 11 c0 	movl   $0xc01197f5,(%esp)
c0114415:	e8 9a ca fe ff       	call   c0100eb4 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c011441a:	8b 45 10             	mov    0x10(%ebp),%eax
c011441d:	c1 e0 0c             	shl    $0xc,%eax
c0114420:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114424:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c011442b:	00 
c011442c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011442f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114433:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0114436:	89 04 24             	mov    %eax,(%esp)
c0114439:	e8 20 6e ff ff       	call   c010b25e <iobuf_init>
c011443e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c0114441:	8b 45 08             	mov    0x8(%ebp),%eax
c0114444:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114447:	8b 40 10             	mov    0x10(%eax),%eax
c011444a:	8b 55 08             	mov    0x8(%ebp),%edx
c011444d:	8b 52 2c             	mov    0x2c(%edx),%edx
c0114450:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0114453:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0114457:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c011445a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011445e:	89 14 24             	mov    %edx,(%esp)
c0114461:	ff d0                	call   *%eax
}
c0114463:	c9                   	leave  
c0114464:	c3                   	ret    

c0114465 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c0114465:	55                   	push   %ebp
c0114466:	89 e5                	mov    %esp,%ebp
c0114468:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c011446b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c0114472:	8b 45 08             	mov    0x8(%ebp),%eax
c0114475:	89 04 24             	mov    %eax,(%esp)
c0114478:	e8 df 03 00 00       	call   c011485c <lock_sfs_io>
    {
        while (nblks != 0) {
c011447d:	eb 42                	jmp    c01144c1 <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c011447f:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114486:	00 
c0114487:	8b 45 18             	mov    0x18(%ebp),%eax
c011448a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011448e:	8b 45 10             	mov    0x10(%ebp),%eax
c0114491:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114495:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114498:	89 44 24 04          	mov    %eax,0x4(%esp)
c011449c:	8b 45 08             	mov    0x8(%ebp),%eax
c011449f:	89 04 24             	mov    %eax,(%esp)
c01144a2:	e8 32 ff ff ff       	call   c01143d9 <sfs_rwblock_nolock>
c01144a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01144aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01144ae:	74 02                	je     c01144b2 <sfs_rwblock+0x4d>
                break;
c01144b0:	eb 15                	jmp    c01144c7 <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c01144b2:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c01144b6:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c01144ba:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c01144c1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01144c5:	75 b8                	jne    c011447f <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c01144c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01144ca:	89 04 24             	mov    %eax,(%esp)
c01144cd:	e8 b6 03 00 00       	call   c0114888 <unlock_sfs_io>
    return ret;
c01144d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01144d5:	c9                   	leave  
c01144d6:	c3                   	ret    

c01144d7 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c01144d7:	55                   	push   %ebp
c01144d8:	89 e5                	mov    %esp,%ebp
c01144da:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c01144dd:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01144e4:	00 
c01144e5:	8b 45 14             	mov    0x14(%ebp),%eax
c01144e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01144ec:	8b 45 10             	mov    0x10(%ebp),%eax
c01144ef:	89 44 24 08          	mov    %eax,0x8(%esp)
c01144f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01144fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01144fd:	89 04 24             	mov    %eax,(%esp)
c0114500:	e8 60 ff ff ff       	call   c0114465 <sfs_rwblock>
}
c0114505:	c9                   	leave  
c0114506:	c3                   	ret    

c0114507 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114507:	55                   	push   %ebp
c0114508:	89 e5                	mov    %esp,%ebp
c011450a:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c011450d:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114514:	00 
c0114515:	8b 45 14             	mov    0x14(%ebp),%eax
c0114518:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011451c:	8b 45 10             	mov    0x10(%ebp),%eax
c011451f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114523:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114526:	89 44 24 04          	mov    %eax,0x4(%esp)
c011452a:	8b 45 08             	mov    0x8(%ebp),%eax
c011452d:	89 04 24             	mov    %eax,(%esp)
c0114530:	e8 30 ff ff ff       	call   c0114465 <sfs_rwblock>
}
c0114535:	c9                   	leave  
c0114536:	c3                   	ret    

c0114537 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0114537:	55                   	push   %ebp
c0114538:	89 e5                	mov    %esp,%ebp
c011453a:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c011453d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114541:	78 18                	js     c011455b <sfs_rbuf+0x24>
c0114543:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c011454a:	7f 0f                	jg     c011455b <sfs_rbuf+0x24>
c011454c:	8b 55 18             	mov    0x18(%ebp),%edx
c011454f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114552:	01 d0                	add    %edx,%eax
c0114554:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114559:	76 24                	jbe    c011457f <sfs_rbuf+0x48>
c011455b:	c7 44 24 0c 0c 98 11 	movl   $0xc011980c,0xc(%esp)
c0114562:	c0 
c0114563:	c7 44 24 08 e0 97 11 	movl   $0xc01197e0,0x8(%esp)
c011456a:	c0 
c011456b:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0114572:	00 
c0114573:	c7 04 24 f5 97 11 c0 	movl   $0xc01197f5,(%esp)
c011457a:	e8 35 c9 fe ff       	call   c0100eb4 <__panic>
    int ret;
    lock_sfs_io(sfs);
c011457f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114582:	89 04 24             	mov    %eax,(%esp)
c0114585:	e8 d2 02 00 00       	call   c011485c <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c011458a:	8b 45 08             	mov    0x8(%ebp),%eax
c011458d:	8b 40 38             	mov    0x38(%eax),%eax
c0114590:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114597:	00 
c0114598:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011459f:	00 
c01145a0:	8b 55 14             	mov    0x14(%ebp),%edx
c01145a3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01145a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01145ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01145ae:	89 04 24             	mov    %eax,(%esp)
c01145b1:	e8 23 fe ff ff       	call   c01143d9 <sfs_rwblock_nolock>
c01145b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01145b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01145bd:	75 21                	jne    c01145e0 <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c01145bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01145c2:	8b 50 38             	mov    0x38(%eax),%edx
c01145c5:	8b 45 18             	mov    0x18(%ebp),%eax
c01145c8:	01 c2                	add    %eax,%edx
c01145ca:	8b 45 10             	mov    0x10(%ebp),%eax
c01145cd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01145d1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01145d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01145d8:	89 04 24             	mov    %eax,(%esp)
c01145db:	e8 fa 0e 00 00       	call   c01154da <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c01145e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01145e3:	89 04 24             	mov    %eax,(%esp)
c01145e6:	e8 9d 02 00 00       	call   c0114888 <unlock_sfs_io>
    return ret;
c01145eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01145ee:	c9                   	leave  
c01145ef:	c3                   	ret    

c01145f0 <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c01145f0:	55                   	push   %ebp
c01145f1:	89 e5                	mov    %esp,%ebp
c01145f3:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c01145f6:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01145fa:	78 18                	js     c0114614 <sfs_wbuf+0x24>
c01145fc:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114603:	7f 0f                	jg     c0114614 <sfs_wbuf+0x24>
c0114605:	8b 55 18             	mov    0x18(%ebp),%edx
c0114608:	8b 45 10             	mov    0x10(%ebp),%eax
c011460b:	01 d0                	add    %edx,%eax
c011460d:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114612:	76 24                	jbe    c0114638 <sfs_wbuf+0x48>
c0114614:	c7 44 24 0c 0c 98 11 	movl   $0xc011980c,0xc(%esp)
c011461b:	c0 
c011461c:	c7 44 24 08 e0 97 11 	movl   $0xc01197e0,0x8(%esp)
c0114623:	c0 
c0114624:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c011462b:	00 
c011462c:	c7 04 24 f5 97 11 c0 	movl   $0xc01197f5,(%esp)
c0114633:	e8 7c c8 fe ff       	call   c0100eb4 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0114638:	8b 45 08             	mov    0x8(%ebp),%eax
c011463b:	89 04 24             	mov    %eax,(%esp)
c011463e:	e8 19 02 00 00       	call   c011485c <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0114643:	8b 45 08             	mov    0x8(%ebp),%eax
c0114646:	8b 40 38             	mov    0x38(%eax),%eax
c0114649:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114650:	00 
c0114651:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114658:	00 
c0114659:	8b 55 14             	mov    0x14(%ebp),%edx
c011465c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114660:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114664:	8b 45 08             	mov    0x8(%ebp),%eax
c0114667:	89 04 24             	mov    %eax,(%esp)
c011466a:	e8 6a fd ff ff       	call   c01143d9 <sfs_rwblock_nolock>
c011466f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114672:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114676:	75 50                	jne    c01146c8 <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c0114678:	8b 45 08             	mov    0x8(%ebp),%eax
c011467b:	8b 50 38             	mov    0x38(%eax),%edx
c011467e:	8b 45 18             	mov    0x18(%ebp),%eax
c0114681:	01 c2                	add    %eax,%edx
c0114683:	8b 45 10             	mov    0x10(%ebp),%eax
c0114686:	89 44 24 08          	mov    %eax,0x8(%esp)
c011468a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011468d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114691:	89 14 24             	mov    %edx,(%esp)
c0114694:	e8 41 0e 00 00       	call   c01154da <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c0114699:	8b 45 08             	mov    0x8(%ebp),%eax
c011469c:	8b 40 38             	mov    0x38(%eax),%eax
c011469f:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01146a6:	00 
c01146a7:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01146ae:	00 
c01146af:	8b 55 14             	mov    0x14(%ebp),%edx
c01146b2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01146b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01146bd:	89 04 24             	mov    %eax,(%esp)
c01146c0:	e8 14 fd ff ff       	call   c01143d9 <sfs_rwblock_nolock>
c01146c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c01146c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01146cb:	89 04 24             	mov    %eax,(%esp)
c01146ce:	e8 b5 01 00 00       	call   c0114888 <unlock_sfs_io>
    return ret;
c01146d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01146d6:	c9                   	leave  
c01146d7:	c3                   	ret    

c01146d8 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c01146d8:	55                   	push   %ebp
c01146d9:	89 e5                	mov    %esp,%ebp
c01146db:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c01146de:	8b 45 08             	mov    0x8(%ebp),%eax
c01146e1:	89 04 24             	mov    %eax,(%esp)
c01146e4:	e8 73 01 00 00       	call   c011485c <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c01146e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01146ec:	8b 40 38             	mov    0x38(%eax),%eax
c01146ef:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01146f6:	00 
c01146f7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01146fe:	00 
c01146ff:	89 04 24             	mov    %eax,(%esp)
c0114702:	e8 f1 0c 00 00       	call   c01153f8 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c0114707:	8b 55 08             	mov    0x8(%ebp),%edx
c011470a:	8b 45 08             	mov    0x8(%ebp),%eax
c011470d:	8b 40 38             	mov    0x38(%eax),%eax
c0114710:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c0114717:	00 
c0114718:	89 54 24 04          	mov    %edx,0x4(%esp)
c011471c:	89 04 24             	mov    %eax,(%esp)
c011471f:	e8 b6 0d 00 00       	call   c01154da <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c0114724:	8b 45 08             	mov    0x8(%ebp),%eax
c0114727:	8b 40 38             	mov    0x38(%eax),%eax
c011472a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114731:	00 
c0114732:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114739:	00 
c011473a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0114741:	00 
c0114742:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114746:	8b 45 08             	mov    0x8(%ebp),%eax
c0114749:	89 04 24             	mov    %eax,(%esp)
c011474c:	e8 88 fc ff ff       	call   c01143d9 <sfs_rwblock_nolock>
c0114751:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c0114754:	8b 45 08             	mov    0x8(%ebp),%eax
c0114757:	89 04 24             	mov    %eax,(%esp)
c011475a:	e8 29 01 00 00       	call   c0114888 <unlock_sfs_io>
    return ret;
c011475f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114762:	c9                   	leave  
c0114763:	c3                   	ret    

c0114764 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c0114764:	55                   	push   %ebp
c0114765:	89 e5                	mov    %esp,%ebp
c0114767:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c011476a:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c0114771:	8b 45 08             	mov    0x8(%ebp),%eax
c0114774:	8b 50 04             	mov    0x4(%eax),%edx
c0114777:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011477a:	01 d0                	add    %edx,%eax
c011477c:	83 e8 01             	sub    $0x1,%eax
c011477f:	ba 00 00 00 00       	mov    $0x0,%edx
c0114784:	f7 75 f4             	divl   -0xc(%ebp)
c0114787:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c011478a:	8b 45 08             	mov    0x8(%ebp),%eax
c011478d:	8b 40 30             	mov    0x30(%eax),%eax
c0114790:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114797:	00 
c0114798:	89 04 24             	mov    %eax,(%esp)
c011479b:	e8 fd cf ff ff       	call   c011179d <bitmap_getdata>
c01147a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01147a3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01147a7:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01147ae:	00 
c01147af:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01147b6:	89 04 24             	mov    %eax,(%esp)
c01147b9:	e8 49 fd ff ff       	call   c0114507 <sfs_wblock>
}
c01147be:	c9                   	leave  
c01147bf:	c3                   	ret    

c01147c0 <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c01147c0:	55                   	push   %ebp
c01147c1:	89 e5                	mov    %esp,%ebp
c01147c3:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c01147c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01147c9:	89 04 24             	mov    %eax,(%esp)
c01147cc:	e8 8b 00 00 00       	call   c011485c <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c01147d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01147d4:	8b 40 38             	mov    0x38(%eax),%eax
c01147d7:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01147de:	00 
c01147df:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01147e6:	00 
c01147e7:	89 04 24             	mov    %eax,(%esp)
c01147ea:	e8 09 0c 00 00       	call   c01153f8 <memset>
        while (nblks != 0) {
c01147ef:	eb 3f                	jmp    c0114830 <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c01147f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01147f4:	8b 40 38             	mov    0x38(%eax),%eax
c01147f7:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01147fe:	00 
c01147ff:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114806:	00 
c0114807:	8b 55 0c             	mov    0xc(%ebp),%edx
c011480a:	89 54 24 08          	mov    %edx,0x8(%esp)
c011480e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114812:	8b 45 08             	mov    0x8(%ebp),%eax
c0114815:	89 04 24             	mov    %eax,(%esp)
c0114818:	e8 bc fb ff ff       	call   c01143d9 <sfs_rwblock_nolock>
c011481d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114820:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114824:	74 02                	je     c0114828 <sfs_clear_block+0x68>
                break;
c0114826:	eb 0e                	jmp    c0114836 <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c0114828:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c011482c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c0114830:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114834:	75 bb                	jne    c01147f1 <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c0114836:	8b 45 08             	mov    0x8(%ebp),%eax
c0114839:	89 04 24             	mov    %eax,(%esp)
c011483c:	e8 47 00 00 00       	call   c0114888 <unlock_sfs_io>
    return ret;
c0114841:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114844:	c9                   	leave  
c0114845:	c3                   	ret    

c0114846 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0114846:	55                   	push   %ebp
c0114847:	89 e5                	mov    %esp,%ebp
c0114849:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c011484c:	8b 45 08             	mov    0x8(%ebp),%eax
c011484f:	83 c0 3c             	add    $0x3c,%eax
c0114852:	89 04 24             	mov    %eax,(%esp)
c0114855:	e8 bd 53 ff ff       	call   c0109c17 <down>
}
c011485a:	c9                   	leave  
c011485b:	c3                   	ret    

c011485c <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c011485c:	55                   	push   %ebp
c011485d:	89 e5                	mov    %esp,%ebp
c011485f:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c0114862:	8b 45 08             	mov    0x8(%ebp),%eax
c0114865:	83 c0 48             	add    $0x48,%eax
c0114868:	89 04 24             	mov    %eax,(%esp)
c011486b:	e8 a7 53 ff ff       	call   c0109c17 <down>
}
c0114870:	c9                   	leave  
c0114871:	c3                   	ret    

c0114872 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c0114872:	55                   	push   %ebp
c0114873:	89 e5                	mov    %esp,%ebp
c0114875:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c0114878:	8b 45 08             	mov    0x8(%ebp),%eax
c011487b:	83 c0 3c             	add    $0x3c,%eax
c011487e:	89 04 24             	mov    %eax,(%esp)
c0114881:	e8 76 53 ff ff       	call   c0109bfc <up>
}
c0114886:	c9                   	leave  
c0114887:	c3                   	ret    

c0114888 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c0114888:	55                   	push   %ebp
c0114889:	89 e5                	mov    %esp,%ebp
c011488b:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c011488e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114891:	83 c0 48             	add    $0x48,%eax
c0114894:	89 04 24             	mov    %eax,(%esp)
c0114897:	e8 60 53 ff ff       	call   c0109bfc <up>
}
c011489c:	c9                   	leave  
c011489d:	c3                   	ret    

c011489e <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c011489e:	55                   	push   %ebp
c011489f:	89 e5                	mov    %esp,%ebp
c01148a1:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c01148a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01148a7:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c01148ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c01148b0:	b8 20 00 00 00       	mov    $0x20,%eax
c01148b5:	2b 45 0c             	sub    0xc(%ebp),%eax
c01148b8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01148bb:	89 c1                	mov    %eax,%ecx
c01148bd:	d3 ea                	shr    %cl,%edx
c01148bf:	89 d0                	mov    %edx,%eax
}
c01148c1:	c9                   	leave  
c01148c2:	c3                   	ret    

c01148c3 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c01148c3:	55                   	push   %ebp
c01148c4:	89 e5                	mov    %esp,%ebp
c01148c6:	83 ec 58             	sub    $0x58,%esp
c01148c9:	8b 45 14             	mov    0x14(%ebp),%eax
c01148cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01148cf:	8b 45 18             	mov    0x18(%ebp),%eax
c01148d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c01148d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01148d8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01148db:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01148de:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c01148e1:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01148e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01148e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01148ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01148ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01148f0:	89 55 f0             	mov    %edx,-0x10(%ebp)
c01148f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01148f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01148f9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01148fd:	74 1c                	je     c011491b <printnum+0x58>
c01148ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114902:	ba 00 00 00 00       	mov    $0x0,%edx
c0114907:	f7 75 e4             	divl   -0x1c(%ebp)
c011490a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c011490d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114910:	ba 00 00 00 00       	mov    $0x0,%edx
c0114915:	f7 75 e4             	divl   -0x1c(%ebp)
c0114918:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011491b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011491e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114921:	f7 75 e4             	divl   -0x1c(%ebp)
c0114924:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114927:	89 55 dc             	mov    %edx,-0x24(%ebp)
c011492a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011492d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114930:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114933:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0114936:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114939:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c011493c:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011493f:	ba 00 00 00 00       	mov    $0x0,%edx
c0114944:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114947:	77 64                	ja     c01149ad <printnum+0xea>
c0114949:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c011494c:	72 05                	jb     c0114953 <printnum+0x90>
c011494e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0114951:	77 5a                	ja     c01149ad <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0114953:	8b 45 20             	mov    0x20(%ebp),%eax
c0114956:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114959:	8b 45 24             	mov    0x24(%ebp),%eax
c011495c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0114960:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114964:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114967:	89 44 24 14          	mov    %eax,0x14(%esp)
c011496b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011496e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114971:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114975:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114979:	8b 45 10             	mov    0x10(%ebp),%eax
c011497c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114980:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114983:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114987:	8b 45 08             	mov    0x8(%ebp),%eax
c011498a:	89 04 24             	mov    %eax,(%esp)
c011498d:	e8 31 ff ff ff       	call   c01148c3 <printnum>
c0114992:	eb 23                	jmp    c01149b7 <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0114994:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114997:	89 44 24 08          	mov    %eax,0x8(%esp)
c011499b:	8b 45 10             	mov    0x10(%ebp),%eax
c011499e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149a2:	8b 45 24             	mov    0x24(%ebp),%eax
c01149a5:	89 04 24             	mov    %eax,(%esp)
c01149a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01149ab:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c01149ad:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c01149b1:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c01149b5:	7f dd                	jg     c0114994 <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c01149b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01149ba:	05 64 9a 11 c0       	add    $0xc0119a64,%eax
c01149bf:	0f b6 00             	movzbl (%eax),%eax
c01149c2:	0f be c0             	movsbl %al,%eax
c01149c5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01149c8:	89 54 24 08          	mov    %edx,0x8(%esp)
c01149cc:	8b 55 10             	mov    0x10(%ebp),%edx
c01149cf:	89 54 24 04          	mov    %edx,0x4(%esp)
c01149d3:	89 04 24             	mov    %eax,(%esp)
c01149d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01149d9:	ff d0                	call   *%eax
}
c01149db:	c9                   	leave  
c01149dc:	c3                   	ret    

c01149dd <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c01149dd:	55                   	push   %ebp
c01149de:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c01149e0:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01149e4:	7e 14                	jle    c01149fa <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c01149e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01149e9:	8b 00                	mov    (%eax),%eax
c01149eb:	8d 48 08             	lea    0x8(%eax),%ecx
c01149ee:	8b 55 08             	mov    0x8(%ebp),%edx
c01149f1:	89 0a                	mov    %ecx,(%edx)
c01149f3:	8b 50 04             	mov    0x4(%eax),%edx
c01149f6:	8b 00                	mov    (%eax),%eax
c01149f8:	eb 30                	jmp    c0114a2a <getuint+0x4d>
    }
    else if (lflag) {
c01149fa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01149fe:	74 16                	je     c0114a16 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114a00:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a03:	8b 00                	mov    (%eax),%eax
c0114a05:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a08:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a0b:	89 0a                	mov    %ecx,(%edx)
c0114a0d:	8b 00                	mov    (%eax),%eax
c0114a0f:	ba 00 00 00 00       	mov    $0x0,%edx
c0114a14:	eb 14                	jmp    c0114a2a <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0114a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a19:	8b 00                	mov    (%eax),%eax
c0114a1b:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a1e:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a21:	89 0a                	mov    %ecx,(%edx)
c0114a23:	8b 00                	mov    (%eax),%eax
c0114a25:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114a2a:	5d                   	pop    %ebp
c0114a2b:	c3                   	ret    

c0114a2c <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114a2c:	55                   	push   %ebp
c0114a2d:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114a2f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114a33:	7e 14                	jle    c0114a49 <getint+0x1d>
        return va_arg(*ap, long long);
c0114a35:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a38:	8b 00                	mov    (%eax),%eax
c0114a3a:	8d 48 08             	lea    0x8(%eax),%ecx
c0114a3d:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a40:	89 0a                	mov    %ecx,(%edx)
c0114a42:	8b 50 04             	mov    0x4(%eax),%edx
c0114a45:	8b 00                	mov    (%eax),%eax
c0114a47:	eb 28                	jmp    c0114a71 <getint+0x45>
    }
    else if (lflag) {
c0114a49:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114a4d:	74 12                	je     c0114a61 <getint+0x35>
        return va_arg(*ap, long);
c0114a4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a52:	8b 00                	mov    (%eax),%eax
c0114a54:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a57:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a5a:	89 0a                	mov    %ecx,(%edx)
c0114a5c:	8b 00                	mov    (%eax),%eax
c0114a5e:	99                   	cltd   
c0114a5f:	eb 10                	jmp    c0114a71 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0114a61:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a64:	8b 00                	mov    (%eax),%eax
c0114a66:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a69:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a6c:	89 0a                	mov    %ecx,(%edx)
c0114a6e:	8b 00                	mov    (%eax),%eax
c0114a70:	99                   	cltd   
    }
}
c0114a71:	5d                   	pop    %ebp
c0114a72:	c3                   	ret    

c0114a73 <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0114a73:	55                   	push   %ebp
c0114a74:	89 e5                	mov    %esp,%ebp
c0114a76:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0114a79:	8d 45 18             	lea    0x18(%ebp),%eax
c0114a7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0114a7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114a82:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114a86:	8b 45 14             	mov    0x14(%ebp),%eax
c0114a89:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114a8d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114a90:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114a94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a9e:	89 04 24             	mov    %eax,(%esp)
c0114aa1:	e8 02 00 00 00       	call   c0114aa8 <vprintfmt>
    va_end(ap);
}
c0114aa6:	c9                   	leave  
c0114aa7:	c3                   	ret    

c0114aa8 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0114aa8:	55                   	push   %ebp
c0114aa9:	89 e5                	mov    %esp,%ebp
c0114aab:	56                   	push   %esi
c0114aac:	53                   	push   %ebx
c0114aad:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114ab0:	eb 1f                	jmp    c0114ad1 <vprintfmt+0x29>
            if (ch == '\0') {
c0114ab2:	85 db                	test   %ebx,%ebx
c0114ab4:	75 05                	jne    c0114abb <vprintfmt+0x13>
                return;
c0114ab6:	e9 33 04 00 00       	jmp    c0114eee <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c0114abb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114abe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ac2:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ac5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ac9:	89 1c 24             	mov    %ebx,(%esp)
c0114acc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114acf:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114ad1:	8b 45 14             	mov    0x14(%ebp),%eax
c0114ad4:	8d 50 01             	lea    0x1(%eax),%edx
c0114ad7:	89 55 14             	mov    %edx,0x14(%ebp)
c0114ada:	0f b6 00             	movzbl (%eax),%eax
c0114add:	0f b6 d8             	movzbl %al,%ebx
c0114ae0:	83 fb 25             	cmp    $0x25,%ebx
c0114ae3:	75 cd                	jne    c0114ab2 <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0114ae5:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114ae9:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114af0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114af3:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0114af6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114afd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114b00:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0114b03:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b06:	8d 50 01             	lea    0x1(%eax),%edx
c0114b09:	89 55 14             	mov    %edx,0x14(%ebp)
c0114b0c:	0f b6 00             	movzbl (%eax),%eax
c0114b0f:	0f b6 d8             	movzbl %al,%ebx
c0114b12:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0114b15:	83 f8 55             	cmp    $0x55,%eax
c0114b18:	0f 87 98 03 00 00    	ja     c0114eb6 <vprintfmt+0x40e>
c0114b1e:	8b 04 85 88 9a 11 c0 	mov    -0x3fee6578(,%eax,4),%eax
c0114b25:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0114b27:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114b2b:	eb d6                	jmp    c0114b03 <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114b2d:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114b31:	eb d0                	jmp    c0114b03 <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114b33:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114b3a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114b3d:	89 d0                	mov    %edx,%eax
c0114b3f:	c1 e0 02             	shl    $0x2,%eax
c0114b42:	01 d0                	add    %edx,%eax
c0114b44:	01 c0                	add    %eax,%eax
c0114b46:	01 d8                	add    %ebx,%eax
c0114b48:	83 e8 30             	sub    $0x30,%eax
c0114b4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114b4e:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b51:	0f b6 00             	movzbl (%eax),%eax
c0114b54:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0114b57:	83 fb 2f             	cmp    $0x2f,%ebx
c0114b5a:	7e 0b                	jle    c0114b67 <vprintfmt+0xbf>
c0114b5c:	83 fb 39             	cmp    $0x39,%ebx
c0114b5f:	7f 06                	jg     c0114b67 <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114b61:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0114b65:	eb d3                	jmp    c0114b3a <vprintfmt+0x92>
            goto process_precision;
c0114b67:	eb 33                	jmp    c0114b9c <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c0114b69:	8b 45 18             	mov    0x18(%ebp),%eax
c0114b6c:	8d 50 04             	lea    0x4(%eax),%edx
c0114b6f:	89 55 18             	mov    %edx,0x18(%ebp)
c0114b72:	8b 00                	mov    (%eax),%eax
c0114b74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0114b77:	eb 23                	jmp    c0114b9c <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c0114b79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114b7d:	79 0c                	jns    c0114b8b <vprintfmt+0xe3>
                width = 0;
c0114b7f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0114b86:	e9 78 ff ff ff       	jmp    c0114b03 <vprintfmt+0x5b>
c0114b8b:	e9 73 ff ff ff       	jmp    c0114b03 <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c0114b90:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0114b97:	e9 67 ff ff ff       	jmp    c0114b03 <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c0114b9c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114ba0:	79 12                	jns    c0114bb4 <vprintfmt+0x10c>
                width = precision, precision = -1;
c0114ba2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114ba5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114ba8:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0114baf:	e9 4f ff ff ff       	jmp    c0114b03 <vprintfmt+0x5b>
c0114bb4:	e9 4a ff ff ff       	jmp    c0114b03 <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0114bb9:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0114bbd:	e9 41 ff ff ff       	jmp    c0114b03 <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0114bc2:	8b 45 18             	mov    0x18(%ebp),%eax
c0114bc5:	8d 50 04             	lea    0x4(%eax),%edx
c0114bc8:	89 55 18             	mov    %edx,0x18(%ebp)
c0114bcb:	8b 00                	mov    (%eax),%eax
c0114bcd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114bd0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114bd4:	8b 55 10             	mov    0x10(%ebp),%edx
c0114bd7:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114bdb:	89 04 24             	mov    %eax,(%esp)
c0114bde:	8b 45 08             	mov    0x8(%ebp),%eax
c0114be1:	ff d0                	call   *%eax
            break;
c0114be3:	e9 00 03 00 00       	jmp    c0114ee8 <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0114be8:	8b 45 18             	mov    0x18(%ebp),%eax
c0114beb:	8d 50 04             	lea    0x4(%eax),%edx
c0114bee:	89 55 18             	mov    %edx,0x18(%ebp)
c0114bf1:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0114bf3:	85 db                	test   %ebx,%ebx
c0114bf5:	79 02                	jns    c0114bf9 <vprintfmt+0x151>
                err = -err;
c0114bf7:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114bf9:	83 fb 18             	cmp    $0x18,%ebx
c0114bfc:	7f 0b                	jg     c0114c09 <vprintfmt+0x161>
c0114bfe:	8b 34 9d 00 9a 11 c0 	mov    -0x3fee6600(,%ebx,4),%esi
c0114c05:	85 f6                	test   %esi,%esi
c0114c07:	75 2a                	jne    c0114c33 <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0114c09:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114c0d:	c7 44 24 0c 75 9a 11 	movl   $0xc0119a75,0xc(%esp)
c0114c14:	c0 
c0114c15:	8b 45 10             	mov    0x10(%ebp),%eax
c0114c18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114c1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c23:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c26:	89 04 24             	mov    %eax,(%esp)
c0114c29:	e8 45 fe ff ff       	call   c0114a73 <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114c2e:	e9 b5 02 00 00       	jmp    c0114ee8 <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0114c33:	89 74 24 10          	mov    %esi,0x10(%esp)
c0114c37:	c7 44 24 0c 7e 9a 11 	movl   $0xc0119a7e,0xc(%esp)
c0114c3e:	c0 
c0114c3f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114c42:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114c46:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c49:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c50:	89 04 24             	mov    %eax,(%esp)
c0114c53:	e8 1b fe ff ff       	call   c0114a73 <printfmt>
            }
            break;
c0114c58:	e9 8b 02 00 00       	jmp    c0114ee8 <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114c5d:	8b 45 18             	mov    0x18(%ebp),%eax
c0114c60:	8d 50 04             	lea    0x4(%eax),%edx
c0114c63:	89 55 18             	mov    %edx,0x18(%ebp)
c0114c66:	8b 30                	mov    (%eax),%esi
c0114c68:	85 f6                	test   %esi,%esi
c0114c6a:	75 05                	jne    c0114c71 <vprintfmt+0x1c9>
                p = "(null)";
c0114c6c:	be 81 9a 11 c0       	mov    $0xc0119a81,%esi
            }
            if (width > 0 && padc != '-') {
c0114c71:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114c75:	7e 45                	jle    c0114cbc <vprintfmt+0x214>
c0114c77:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0114c7b:	74 3f                	je     c0114cbc <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114c7d:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0114c80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114c83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c87:	89 34 24             	mov    %esi,(%esp)
c0114c8a:	e8 3b 04 00 00       	call   c01150ca <strnlen>
c0114c8f:	29 c3                	sub    %eax,%ebx
c0114c91:	89 d8                	mov    %ebx,%eax
c0114c93:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114c96:	eb 1e                	jmp    c0114cb6 <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c0114c98:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0114c9c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114c9f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114ca3:	8b 55 10             	mov    0x10(%ebp),%edx
c0114ca6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114caa:	89 04 24             	mov    %eax,(%esp)
c0114cad:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cb0:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114cb2:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114cb6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114cba:	7f dc                	jg     c0114c98 <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114cbc:	eb 46                	jmp    c0114d04 <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c0114cbe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0114cc2:	74 26                	je     c0114cea <vprintfmt+0x242>
c0114cc4:	83 fb 1f             	cmp    $0x1f,%ebx
c0114cc7:	7e 05                	jle    c0114cce <vprintfmt+0x226>
c0114cc9:	83 fb 7e             	cmp    $0x7e,%ebx
c0114ccc:	7e 1c                	jle    c0114cea <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0114cce:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cd1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cd5:	8b 45 10             	mov    0x10(%ebp),%eax
c0114cd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cdc:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c0114ce3:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ce6:	ff d0                	call   *%eax
c0114ce8:	eb 16                	jmp    c0114d00 <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0114cea:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ced:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cf1:	8b 45 10             	mov    0x10(%ebp),%eax
c0114cf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cf8:	89 1c 24             	mov    %ebx,(%esp)
c0114cfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cfe:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114d00:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114d04:	89 f0                	mov    %esi,%eax
c0114d06:	8d 70 01             	lea    0x1(%eax),%esi
c0114d09:	0f b6 00             	movzbl (%eax),%eax
c0114d0c:	0f be d8             	movsbl %al,%ebx
c0114d0f:	85 db                	test   %ebx,%ebx
c0114d11:	74 10                	je     c0114d23 <vprintfmt+0x27b>
c0114d13:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114d17:	78 a5                	js     c0114cbe <vprintfmt+0x216>
c0114d19:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0114d1d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114d21:	79 9b                	jns    c0114cbe <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114d23:	eb 1e                	jmp    c0114d43 <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c0114d25:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d28:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d2c:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d2f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d33:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0114d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d3d:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114d3f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114d43:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114d47:	7f dc                	jg     c0114d25 <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c0114d49:	e9 9a 01 00 00       	jmp    c0114ee8 <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0114d4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114d51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d55:	8d 45 18             	lea    0x18(%ebp),%eax
c0114d58:	89 04 24             	mov    %eax,(%esp)
c0114d5b:	e8 cc fc ff ff       	call   c0114a2c <getint>
c0114d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114d63:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0114d66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114d69:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114d6c:	85 d2                	test   %edx,%edx
c0114d6e:	79 2d                	jns    c0114d9d <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c0114d70:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d73:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d77:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d7a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d7e:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c0114d85:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d88:	ff d0                	call   *%eax
                num = -(long long)num;
c0114d8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114d8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114d90:	f7 d8                	neg    %eax
c0114d92:	83 d2 00             	adc    $0x0,%edx
c0114d95:	f7 da                	neg    %edx
c0114d97:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114d9a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c0114d9d:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114da4:	e9 b6 00 00 00       	jmp    c0114e5f <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0114da9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114dac:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114db0:	8d 45 18             	lea    0x18(%ebp),%eax
c0114db3:	89 04 24             	mov    %eax,(%esp)
c0114db6:	e8 22 fc ff ff       	call   c01149dd <getuint>
c0114dbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114dbe:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0114dc1:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114dc8:	e9 92 00 00 00       	jmp    c0114e5f <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0114dcd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dd4:	8d 45 18             	lea    0x18(%ebp),%eax
c0114dd7:	89 04 24             	mov    %eax,(%esp)
c0114dda:	e8 fe fb ff ff       	call   c01149dd <getuint>
c0114ddf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114de2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0114de5:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0114dec:	eb 71                	jmp    c0114e5f <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0114dee:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114df1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114df5:	8b 45 10             	mov    0x10(%ebp),%eax
c0114df8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dfc:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0114e03:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e06:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0114e08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e0b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e0f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e12:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e16:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0114e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e20:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0114e22:	8b 45 18             	mov    0x18(%ebp),%eax
c0114e25:	8d 50 04             	lea    0x4(%eax),%edx
c0114e28:	89 55 18             	mov    %edx,0x18(%ebp)
c0114e2b:	8b 00                	mov    (%eax),%eax
c0114e2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114e30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0114e37:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0114e3e:	eb 1f                	jmp    c0114e5f <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0114e40:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114e43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e47:	8d 45 18             	lea    0x18(%ebp),%eax
c0114e4a:	89 04 24             	mov    %eax,(%esp)
c0114e4d:	e8 8b fb ff ff       	call   c01149dd <getuint>
c0114e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114e55:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c0114e58:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c0114e5f:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c0114e63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114e66:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c0114e6a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0114e6d:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114e71:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114e78:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114e7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114e7f:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114e83:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e86:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e91:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e94:	89 04 24             	mov    %eax,(%esp)
c0114e97:	e8 27 fa ff ff       	call   c01148c3 <printnum>
            break;
c0114e9c:	eb 4a                	jmp    c0114ee8 <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c0114e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ea1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ea5:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ea8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114eac:	89 1c 24             	mov    %ebx,(%esp)
c0114eaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0114eb2:	ff d0                	call   *%eax
            break;
c0114eb4:	eb 32                	jmp    c0114ee8 <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0114eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114eb9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ebd:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ec0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ec4:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0114ecb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ece:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c0114ed0:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114ed4:	eb 04                	jmp    c0114eda <vprintfmt+0x432>
c0114ed6:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114eda:	8b 45 14             	mov    0x14(%ebp),%eax
c0114edd:	83 e8 01             	sub    $0x1,%eax
c0114ee0:	0f b6 00             	movzbl (%eax),%eax
c0114ee3:	3c 25                	cmp    $0x25,%al
c0114ee5:	75 ef                	jne    c0114ed6 <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0114ee7:	90                   	nop
        }
    }
c0114ee8:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114ee9:	e9 e3 fb ff ff       	jmp    c0114ad1 <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0114eee:	83 c4 40             	add    $0x40,%esp
c0114ef1:	5b                   	pop    %ebx
c0114ef2:	5e                   	pop    %esi
c0114ef3:	5d                   	pop    %ebp
c0114ef4:	c3                   	ret    

c0114ef5 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0114ef5:	55                   	push   %ebp
c0114ef6:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0114ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114efb:	8b 40 08             	mov    0x8(%eax),%eax
c0114efe:	8d 50 01             	lea    0x1(%eax),%edx
c0114f01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f04:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0114f07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f0a:	8b 10                	mov    (%eax),%edx
c0114f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f0f:	8b 40 04             	mov    0x4(%eax),%eax
c0114f12:	39 c2                	cmp    %eax,%edx
c0114f14:	73 12                	jae    c0114f28 <sprintputch+0x33>
        *b->buf ++ = ch;
c0114f16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f19:	8b 00                	mov    (%eax),%eax
c0114f1b:	8d 48 01             	lea    0x1(%eax),%ecx
c0114f1e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114f21:	89 0a                	mov    %ecx,(%edx)
c0114f23:	8b 55 08             	mov    0x8(%ebp),%edx
c0114f26:	88 10                	mov    %dl,(%eax)
    }
}
c0114f28:	5d                   	pop    %ebp
c0114f29:	c3                   	ret    

c0114f2a <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0114f2a:	55                   	push   %ebp
c0114f2b:	89 e5                	mov    %esp,%ebp
c0114f2d:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0114f30:	8d 45 14             	lea    0x14(%ebp),%eax
c0114f33:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0114f36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114f39:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114f3d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f40:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f4e:	89 04 24             	mov    %eax,(%esp)
c0114f51:	e8 08 00 00 00       	call   c0114f5e <vsnprintf>
c0114f56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0114f59:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114f5c:	c9                   	leave  
c0114f5d:	c3                   	ret    

c0114f5e <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c0114f5e:	55                   	push   %ebp
c0114f5f:	89 e5                	mov    %esp,%ebp
c0114f61:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c0114f64:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114f6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f6d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114f70:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f73:	01 d0                	add    %edx,%eax
c0114f75:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114f78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c0114f7f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0114f83:	74 0a                	je     c0114f8f <vsnprintf+0x31>
c0114f85:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114f88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114f8b:	39 c2                	cmp    %eax,%edx
c0114f8d:	76 07                	jbe    c0114f96 <vsnprintf+0x38>
        return -E_INVAL;
c0114f8f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114f94:	eb 32                	jmp    c0114fc8 <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c0114f96:	8b 45 14             	mov    0x14(%ebp),%eax
c0114f99:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114f9d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114fa0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114fa4:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0114fa7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114fab:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0114fb2:	ff 
c0114fb3:	c7 04 24 f5 4e 11 c0 	movl   $0xc0114ef5,(%esp)
c0114fba:	e8 e9 fa ff ff       	call   c0114aa8 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c0114fbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114fc2:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0114fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114fc8:	c9                   	leave  
c0114fc9:	c3                   	ret    

c0114fca <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0114fca:	55                   	push   %ebp
c0114fcb:	89 e5                	mov    %esp,%ebp
c0114fcd:	57                   	push   %edi
c0114fce:	56                   	push   %esi
c0114fcf:	53                   	push   %ebx
c0114fd0:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0114fd3:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0114fd8:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c0114fde:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0114fe4:	6b f0 05             	imul   $0x5,%eax,%esi
c0114fe7:	01 f7                	add    %esi,%edi
c0114fe9:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c0114fee:	f7 e6                	mul    %esi
c0114ff0:	8d 34 17             	lea    (%edi,%edx,1),%esi
c0114ff3:	89 f2                	mov    %esi,%edx
c0114ff5:	83 c0 0b             	add    $0xb,%eax
c0114ff8:	83 d2 00             	adc    $0x0,%edx
c0114ffb:	89 c7                	mov    %eax,%edi
c0114ffd:	83 e7 ff             	and    $0xffffffff,%edi
c0115000:	89 f9                	mov    %edi,%ecx
c0115002:	0f b7 da             	movzwl %dx,%ebx
c0115005:	89 0d c8 ee 14 c0    	mov    %ecx,0xc014eec8
c011500b:	89 1d cc ee 14 c0    	mov    %ebx,0xc014eecc
    unsigned long long result = (next >> 12);
c0115011:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0115016:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c011501c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0115020:	c1 ea 0c             	shr    $0xc,%edx
c0115023:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115026:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0115029:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c0115030:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115033:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0115036:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0115039:	89 55 e8             	mov    %edx,-0x18(%ebp)
c011503c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011503f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115042:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0115046:	74 1c                	je     c0115064 <rand+0x9a>
c0115048:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011504b:	ba 00 00 00 00       	mov    $0x0,%edx
c0115050:	f7 75 dc             	divl   -0x24(%ebp)
c0115053:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0115056:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115059:	ba 00 00 00 00       	mov    $0x0,%edx
c011505e:	f7 75 dc             	divl   -0x24(%ebp)
c0115061:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0115064:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0115067:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011506a:	f7 75 dc             	divl   -0x24(%ebp)
c011506d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0115070:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0115073:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0115076:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0115079:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011507c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c011507f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c0115082:	83 c4 24             	add    $0x24,%esp
c0115085:	5b                   	pop    %ebx
c0115086:	5e                   	pop    %esi
c0115087:	5f                   	pop    %edi
c0115088:	5d                   	pop    %ebp
c0115089:	c3                   	ret    

c011508a <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c011508a:	55                   	push   %ebp
c011508b:	89 e5                	mov    %esp,%ebp
    next = seed;
c011508d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115090:	ba 00 00 00 00       	mov    $0x0,%edx
c0115095:	a3 c8 ee 14 c0       	mov    %eax,0xc014eec8
c011509a:	89 15 cc ee 14 c0    	mov    %edx,0xc014eecc
}
c01150a0:	5d                   	pop    %ebp
c01150a1:	c3                   	ret    

c01150a2 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c01150a2:	55                   	push   %ebp
c01150a3:	89 e5                	mov    %esp,%ebp
c01150a5:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01150a8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c01150af:	eb 04                	jmp    c01150b5 <strlen+0x13>
        cnt ++;
c01150b1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c01150b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01150b8:	8d 50 01             	lea    0x1(%eax),%edx
c01150bb:	89 55 08             	mov    %edx,0x8(%ebp)
c01150be:	0f b6 00             	movzbl (%eax),%eax
c01150c1:	84 c0                	test   %al,%al
c01150c3:	75 ec                	jne    c01150b1 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c01150c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01150c8:	c9                   	leave  
c01150c9:	c3                   	ret    

c01150ca <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c01150ca:	55                   	push   %ebp
c01150cb:	89 e5                	mov    %esp,%ebp
c01150cd:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01150d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c01150d7:	eb 04                	jmp    c01150dd <strnlen+0x13>
        cnt ++;
c01150d9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c01150dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01150e0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01150e3:	73 10                	jae    c01150f5 <strnlen+0x2b>
c01150e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01150e8:	8d 50 01             	lea    0x1(%eax),%edx
c01150eb:	89 55 08             	mov    %edx,0x8(%ebp)
c01150ee:	0f b6 00             	movzbl (%eax),%eax
c01150f1:	84 c0                	test   %al,%al
c01150f3:	75 e4                	jne    c01150d9 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c01150f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01150f8:	c9                   	leave  
c01150f9:	c3                   	ret    

c01150fa <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c01150fa:	55                   	push   %ebp
c01150fb:	89 e5                	mov    %esp,%ebp
c01150fd:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c0115100:	8b 45 08             	mov    0x8(%ebp),%eax
c0115103:	89 04 24             	mov    %eax,(%esp)
c0115106:	e8 97 ff ff ff       	call   c01150a2 <strlen>
c011510b:	8b 55 08             	mov    0x8(%ebp),%edx
c011510e:	01 c2                	add    %eax,%edx
c0115110:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115113:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115117:	89 14 24             	mov    %edx,(%esp)
c011511a:	e8 02 00 00 00       	call   c0115121 <strcpy>
}
c011511f:	c9                   	leave  
c0115120:	c3                   	ret    

c0115121 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0115121:	55                   	push   %ebp
c0115122:	89 e5                	mov    %esp,%ebp
c0115124:	57                   	push   %edi
c0115125:	56                   	push   %esi
c0115126:	83 ec 20             	sub    $0x20,%esp
c0115129:	8b 45 08             	mov    0x8(%ebp),%eax
c011512c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011512f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115132:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c0115135:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0115138:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011513b:	89 d1                	mov    %edx,%ecx
c011513d:	89 c2                	mov    %eax,%edx
c011513f:	89 ce                	mov    %ecx,%esi
c0115141:	89 d7                	mov    %edx,%edi
c0115143:	ac                   	lods   %ds:(%esi),%al
c0115144:	aa                   	stos   %al,%es:(%edi)
c0115145:	84 c0                	test   %al,%al
c0115147:	75 fa                	jne    c0115143 <strcpy+0x22>
c0115149:	89 fa                	mov    %edi,%edx
c011514b:	89 f1                	mov    %esi,%ecx
c011514d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0115150:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0115153:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c0115156:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0115159:	83 c4 20             	add    $0x20,%esp
c011515c:	5e                   	pop    %esi
c011515d:	5f                   	pop    %edi
c011515e:	5d                   	pop    %ebp
c011515f:	c3                   	ret    

c0115160 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c0115160:	55                   	push   %ebp
c0115161:	89 e5                	mov    %esp,%ebp
c0115163:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c0115166:	8b 45 08             	mov    0x8(%ebp),%eax
c0115169:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c011516c:	eb 21                	jmp    c011518f <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c011516e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115171:	0f b6 10             	movzbl (%eax),%edx
c0115174:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115177:	88 10                	mov    %dl,(%eax)
c0115179:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011517c:	0f b6 00             	movzbl (%eax),%eax
c011517f:	84 c0                	test   %al,%al
c0115181:	74 04                	je     c0115187 <strncpy+0x27>
            src ++;
c0115183:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c0115187:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c011518b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c011518f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115193:	75 d9                	jne    c011516e <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c0115195:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0115198:	c9                   	leave  
c0115199:	c3                   	ret    

c011519a <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c011519a:	55                   	push   %ebp
c011519b:	89 e5                	mov    %esp,%ebp
c011519d:	57                   	push   %edi
c011519e:	56                   	push   %esi
c011519f:	83 ec 20             	sub    $0x20,%esp
c01151a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01151a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01151a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c01151ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01151b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151b4:	89 d1                	mov    %edx,%ecx
c01151b6:	89 c2                	mov    %eax,%edx
c01151b8:	89 ce                	mov    %ecx,%esi
c01151ba:	89 d7                	mov    %edx,%edi
c01151bc:	ac                   	lods   %ds:(%esi),%al
c01151bd:	ae                   	scas   %es:(%edi),%al
c01151be:	75 08                	jne    c01151c8 <strcmp+0x2e>
c01151c0:	84 c0                	test   %al,%al
c01151c2:	75 f8                	jne    c01151bc <strcmp+0x22>
c01151c4:	31 c0                	xor    %eax,%eax
c01151c6:	eb 04                	jmp    c01151cc <strcmp+0x32>
c01151c8:	19 c0                	sbb    %eax,%eax
c01151ca:	0c 01                	or     $0x1,%al
c01151cc:	89 fa                	mov    %edi,%edx
c01151ce:	89 f1                	mov    %esi,%ecx
c01151d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01151d3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01151d6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c01151d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c01151dc:	83 c4 20             	add    $0x20,%esp
c01151df:	5e                   	pop    %esi
c01151e0:	5f                   	pop    %edi
c01151e1:	5d                   	pop    %ebp
c01151e2:	c3                   	ret    

c01151e3 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c01151e3:	55                   	push   %ebp
c01151e4:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c01151e6:	eb 0c                	jmp    c01151f4 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c01151e8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c01151ec:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01151f0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c01151f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01151f8:	74 1a                	je     c0115214 <strncmp+0x31>
c01151fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01151fd:	0f b6 00             	movzbl (%eax),%eax
c0115200:	84 c0                	test   %al,%al
c0115202:	74 10                	je     c0115214 <strncmp+0x31>
c0115204:	8b 45 08             	mov    0x8(%ebp),%eax
c0115207:	0f b6 10             	movzbl (%eax),%edx
c011520a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011520d:	0f b6 00             	movzbl (%eax),%eax
c0115210:	38 c2                	cmp    %al,%dl
c0115212:	74 d4                	je     c01151e8 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0115214:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115218:	74 18                	je     c0115232 <strncmp+0x4f>
c011521a:	8b 45 08             	mov    0x8(%ebp),%eax
c011521d:	0f b6 00             	movzbl (%eax),%eax
c0115220:	0f b6 d0             	movzbl %al,%edx
c0115223:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115226:	0f b6 00             	movzbl (%eax),%eax
c0115229:	0f b6 c0             	movzbl %al,%eax
c011522c:	29 c2                	sub    %eax,%edx
c011522e:	89 d0                	mov    %edx,%eax
c0115230:	eb 05                	jmp    c0115237 <strncmp+0x54>
c0115232:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0115237:	5d                   	pop    %ebp
c0115238:	c3                   	ret    

c0115239 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0115239:	55                   	push   %ebp
c011523a:	89 e5                	mov    %esp,%ebp
c011523c:	83 ec 04             	sub    $0x4,%esp
c011523f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115242:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0115245:	eb 14                	jmp    c011525b <strchr+0x22>
        if (*s == c) {
c0115247:	8b 45 08             	mov    0x8(%ebp),%eax
c011524a:	0f b6 00             	movzbl (%eax),%eax
c011524d:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0115250:	75 05                	jne    c0115257 <strchr+0x1e>
            return (char *)s;
c0115252:	8b 45 08             	mov    0x8(%ebp),%eax
c0115255:	eb 13                	jmp    c011526a <strchr+0x31>
        }
        s ++;
c0115257:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c011525b:	8b 45 08             	mov    0x8(%ebp),%eax
c011525e:	0f b6 00             	movzbl (%eax),%eax
c0115261:	84 c0                	test   %al,%al
c0115263:	75 e2                	jne    c0115247 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c0115265:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011526a:	c9                   	leave  
c011526b:	c3                   	ret    

c011526c <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c011526c:	55                   	push   %ebp
c011526d:	89 e5                	mov    %esp,%ebp
c011526f:	83 ec 04             	sub    $0x4,%esp
c0115272:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115275:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0115278:	eb 11                	jmp    c011528b <strfind+0x1f>
        if (*s == c) {
c011527a:	8b 45 08             	mov    0x8(%ebp),%eax
c011527d:	0f b6 00             	movzbl (%eax),%eax
c0115280:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0115283:	75 02                	jne    c0115287 <strfind+0x1b>
            break;
c0115285:	eb 0e                	jmp    c0115295 <strfind+0x29>
        }
        s ++;
c0115287:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c011528b:	8b 45 08             	mov    0x8(%ebp),%eax
c011528e:	0f b6 00             	movzbl (%eax),%eax
c0115291:	84 c0                	test   %al,%al
c0115293:	75 e5                	jne    c011527a <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c0115295:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0115298:	c9                   	leave  
c0115299:	c3                   	ret    

c011529a <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c011529a:	55                   	push   %ebp
c011529b:	89 e5                	mov    %esp,%ebp
c011529d:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c01152a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c01152a7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01152ae:	eb 04                	jmp    c01152b4 <strtol+0x1a>
        s ++;
c01152b0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01152b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01152b7:	0f b6 00             	movzbl (%eax),%eax
c01152ba:	3c 20                	cmp    $0x20,%al
c01152bc:	74 f2                	je     c01152b0 <strtol+0x16>
c01152be:	8b 45 08             	mov    0x8(%ebp),%eax
c01152c1:	0f b6 00             	movzbl (%eax),%eax
c01152c4:	3c 09                	cmp    $0x9,%al
c01152c6:	74 e8                	je     c01152b0 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c01152c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01152cb:	0f b6 00             	movzbl (%eax),%eax
c01152ce:	3c 2b                	cmp    $0x2b,%al
c01152d0:	75 06                	jne    c01152d8 <strtol+0x3e>
        s ++;
c01152d2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01152d6:	eb 15                	jmp    c01152ed <strtol+0x53>
    }
    else if (*s == '-') {
c01152d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01152db:	0f b6 00             	movzbl (%eax),%eax
c01152de:	3c 2d                	cmp    $0x2d,%al
c01152e0:	75 0b                	jne    c01152ed <strtol+0x53>
        s ++, neg = 1;
c01152e2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01152e6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c01152ed:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01152f1:	74 06                	je     c01152f9 <strtol+0x5f>
c01152f3:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c01152f7:	75 24                	jne    c011531d <strtol+0x83>
c01152f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01152fc:	0f b6 00             	movzbl (%eax),%eax
c01152ff:	3c 30                	cmp    $0x30,%al
c0115301:	75 1a                	jne    c011531d <strtol+0x83>
c0115303:	8b 45 08             	mov    0x8(%ebp),%eax
c0115306:	83 c0 01             	add    $0x1,%eax
c0115309:	0f b6 00             	movzbl (%eax),%eax
c011530c:	3c 78                	cmp    $0x78,%al
c011530e:	75 0d                	jne    c011531d <strtol+0x83>
        s += 2, base = 16;
c0115310:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0115314:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c011531b:	eb 2a                	jmp    c0115347 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c011531d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115321:	75 17                	jne    c011533a <strtol+0xa0>
c0115323:	8b 45 08             	mov    0x8(%ebp),%eax
c0115326:	0f b6 00             	movzbl (%eax),%eax
c0115329:	3c 30                	cmp    $0x30,%al
c011532b:	75 0d                	jne    c011533a <strtol+0xa0>
        s ++, base = 8;
c011532d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115331:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0115338:	eb 0d                	jmp    c0115347 <strtol+0xad>
    }
    else if (base == 0) {
c011533a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011533e:	75 07                	jne    c0115347 <strtol+0xad>
        base = 10;
c0115340:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0115347:	8b 45 08             	mov    0x8(%ebp),%eax
c011534a:	0f b6 00             	movzbl (%eax),%eax
c011534d:	3c 2f                	cmp    $0x2f,%al
c011534f:	7e 1b                	jle    c011536c <strtol+0xd2>
c0115351:	8b 45 08             	mov    0x8(%ebp),%eax
c0115354:	0f b6 00             	movzbl (%eax),%eax
c0115357:	3c 39                	cmp    $0x39,%al
c0115359:	7f 11                	jg     c011536c <strtol+0xd2>
            dig = *s - '0';
c011535b:	8b 45 08             	mov    0x8(%ebp),%eax
c011535e:	0f b6 00             	movzbl (%eax),%eax
c0115361:	0f be c0             	movsbl %al,%eax
c0115364:	83 e8 30             	sub    $0x30,%eax
c0115367:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011536a:	eb 48                	jmp    c01153b4 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c011536c:	8b 45 08             	mov    0x8(%ebp),%eax
c011536f:	0f b6 00             	movzbl (%eax),%eax
c0115372:	3c 60                	cmp    $0x60,%al
c0115374:	7e 1b                	jle    c0115391 <strtol+0xf7>
c0115376:	8b 45 08             	mov    0x8(%ebp),%eax
c0115379:	0f b6 00             	movzbl (%eax),%eax
c011537c:	3c 7a                	cmp    $0x7a,%al
c011537e:	7f 11                	jg     c0115391 <strtol+0xf7>
            dig = *s - 'a' + 10;
c0115380:	8b 45 08             	mov    0x8(%ebp),%eax
c0115383:	0f b6 00             	movzbl (%eax),%eax
c0115386:	0f be c0             	movsbl %al,%eax
c0115389:	83 e8 57             	sub    $0x57,%eax
c011538c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011538f:	eb 23                	jmp    c01153b4 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c0115391:	8b 45 08             	mov    0x8(%ebp),%eax
c0115394:	0f b6 00             	movzbl (%eax),%eax
c0115397:	3c 40                	cmp    $0x40,%al
c0115399:	7e 3d                	jle    c01153d8 <strtol+0x13e>
c011539b:	8b 45 08             	mov    0x8(%ebp),%eax
c011539e:	0f b6 00             	movzbl (%eax),%eax
c01153a1:	3c 5a                	cmp    $0x5a,%al
c01153a3:	7f 33                	jg     c01153d8 <strtol+0x13e>
            dig = *s - 'A' + 10;
c01153a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01153a8:	0f b6 00             	movzbl (%eax),%eax
c01153ab:	0f be c0             	movsbl %al,%eax
c01153ae:	83 e8 37             	sub    $0x37,%eax
c01153b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c01153b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01153b7:	3b 45 10             	cmp    0x10(%ebp),%eax
c01153ba:	7c 02                	jl     c01153be <strtol+0x124>
            break;
c01153bc:	eb 1a                	jmp    c01153d8 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c01153be:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01153c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01153c5:	0f af 45 10          	imul   0x10(%ebp),%eax
c01153c9:	89 c2                	mov    %eax,%edx
c01153cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01153ce:	01 d0                	add    %edx,%eax
c01153d0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c01153d3:	e9 6f ff ff ff       	jmp    c0115347 <strtol+0xad>

    if (endptr) {
c01153d8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01153dc:	74 08                	je     c01153e6 <strtol+0x14c>
        *endptr = (char *) s;
c01153de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01153e1:	8b 55 08             	mov    0x8(%ebp),%edx
c01153e4:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c01153e6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01153ea:	74 07                	je     c01153f3 <strtol+0x159>
c01153ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01153ef:	f7 d8                	neg    %eax
c01153f1:	eb 03                	jmp    c01153f6 <strtol+0x15c>
c01153f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c01153f6:	c9                   	leave  
c01153f7:	c3                   	ret    

c01153f8 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c01153f8:	55                   	push   %ebp
c01153f9:	89 e5                	mov    %esp,%ebp
c01153fb:	57                   	push   %edi
c01153fc:	83 ec 24             	sub    $0x24,%esp
c01153ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115402:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0115405:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0115409:	8b 55 08             	mov    0x8(%ebp),%edx
c011540c:	89 55 f8             	mov    %edx,-0x8(%ebp)
c011540f:	88 45 f7             	mov    %al,-0x9(%ebp)
c0115412:	8b 45 10             	mov    0x10(%ebp),%eax
c0115415:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0115418:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c011541b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c011541f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0115422:	89 d7                	mov    %edx,%edi
c0115424:	f3 aa                	rep stos %al,%es:(%edi)
c0115426:	89 fa                	mov    %edi,%edx
c0115428:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c011542b:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c011542e:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c0115431:	83 c4 24             	add    $0x24,%esp
c0115434:	5f                   	pop    %edi
c0115435:	5d                   	pop    %ebp
c0115436:	c3                   	ret    

c0115437 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0115437:	55                   	push   %ebp
c0115438:	89 e5                	mov    %esp,%ebp
c011543a:	57                   	push   %edi
c011543b:	56                   	push   %esi
c011543c:	53                   	push   %ebx
c011543d:	83 ec 30             	sub    $0x30,%esp
c0115440:	8b 45 08             	mov    0x8(%ebp),%eax
c0115443:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115446:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115449:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011544c:	8b 45 10             	mov    0x10(%ebp),%eax
c011544f:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c0115452:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115455:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0115458:	73 42                	jae    c011549c <memmove+0x65>
c011545a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011545d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0115460:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115463:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115466:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115469:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c011546c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011546f:	c1 e8 02             	shr    $0x2,%eax
c0115472:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0115474:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0115477:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011547a:	89 d7                	mov    %edx,%edi
c011547c:	89 c6                	mov    %eax,%esi
c011547e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115480:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0115483:	83 e1 03             	and    $0x3,%ecx
c0115486:	74 02                	je     c011548a <memmove+0x53>
c0115488:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c011548a:	89 f0                	mov    %esi,%eax
c011548c:	89 fa                	mov    %edi,%edx
c011548e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0115491:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0115494:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0115497:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011549a:	eb 36                	jmp    c01154d2 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c011549c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011549f:	8d 50 ff             	lea    -0x1(%eax),%edx
c01154a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01154a5:	01 c2                	add    %eax,%edx
c01154a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01154aa:	8d 48 ff             	lea    -0x1(%eax),%ecx
c01154ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01154b0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c01154b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01154b6:	89 c1                	mov    %eax,%ecx
c01154b8:	89 d8                	mov    %ebx,%eax
c01154ba:	89 d6                	mov    %edx,%esi
c01154bc:	89 c7                	mov    %eax,%edi
c01154be:	fd                   	std    
c01154bf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01154c1:	fc                   	cld    
c01154c2:	89 f8                	mov    %edi,%eax
c01154c4:	89 f2                	mov    %esi,%edx
c01154c6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c01154c9:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01154cc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c01154cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c01154d2:	83 c4 30             	add    $0x30,%esp
c01154d5:	5b                   	pop    %ebx
c01154d6:	5e                   	pop    %esi
c01154d7:	5f                   	pop    %edi
c01154d8:	5d                   	pop    %ebp
c01154d9:	c3                   	ret    

c01154da <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c01154da:	55                   	push   %ebp
c01154db:	89 e5                	mov    %esp,%ebp
c01154dd:	57                   	push   %edi
c01154de:	56                   	push   %esi
c01154df:	83 ec 20             	sub    $0x20,%esp
c01154e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01154e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01154e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01154ee:	8b 45 10             	mov    0x10(%ebp),%eax
c01154f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01154f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01154f7:	c1 e8 02             	shr    $0x2,%eax
c01154fa:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01154fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01154ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115502:	89 d7                	mov    %edx,%edi
c0115504:	89 c6                	mov    %eax,%esi
c0115506:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115508:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c011550b:	83 e1 03             	and    $0x3,%ecx
c011550e:	74 02                	je     c0115512 <memcpy+0x38>
c0115510:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115512:	89 f0                	mov    %esi,%eax
c0115514:	89 fa                	mov    %edi,%edx
c0115516:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115519:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c011551c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c011551f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0115522:	83 c4 20             	add    $0x20,%esp
c0115525:	5e                   	pop    %esi
c0115526:	5f                   	pop    %edi
c0115527:	5d                   	pop    %ebp
c0115528:	c3                   	ret    

c0115529 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0115529:	55                   	push   %ebp
c011552a:	89 e5                	mov    %esp,%ebp
c011552c:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c011552f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115532:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c0115535:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115538:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c011553b:	eb 30                	jmp    c011556d <memcmp+0x44>
        if (*s1 != *s2) {
c011553d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115540:	0f b6 10             	movzbl (%eax),%edx
c0115543:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115546:	0f b6 00             	movzbl (%eax),%eax
c0115549:	38 c2                	cmp    %al,%dl
c011554b:	74 18                	je     c0115565 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c011554d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115550:	0f b6 00             	movzbl (%eax),%eax
c0115553:	0f b6 d0             	movzbl %al,%edx
c0115556:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115559:	0f b6 00             	movzbl (%eax),%eax
c011555c:	0f b6 c0             	movzbl %al,%eax
c011555f:	29 c2                	sub    %eax,%edx
c0115561:	89 d0                	mov    %edx,%eax
c0115563:	eb 1a                	jmp    c011557f <memcmp+0x56>
        }
        s1 ++, s2 ++;
c0115565:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0115569:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c011556d:	8b 45 10             	mov    0x10(%ebp),%eax
c0115570:	8d 50 ff             	lea    -0x1(%eax),%edx
c0115573:	89 55 10             	mov    %edx,0x10(%ebp)
c0115576:	85 c0                	test   %eax,%eax
c0115578:	75 c3                	jne    c011553d <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c011557a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011557f:	c9                   	leave  
c0115580:	c3                   	ret    
